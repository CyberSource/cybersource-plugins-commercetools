
declare module "cybersource-rest-client" {
  export interface MerchantConfig {
    authenticationType: string;
    runEnvironment: string;

    merchantID: string;
    merchantKeyId?: string;
    merchantsecretKey?: string;

    keyAlias?: string;
    keyPass?: string;
    keyFileName?: string;
    keysDirectory?: string;
    logConfiguration: {
      enableLog: boolean;
      logFilename?: string;
      logDirectory?: string;
      logFileMaxSize?: string;
    };
  }

  export class ApiClient {
    downloadFilePath: string;

    /**
     * Manages low level client-server communications, parameter marshalling, etc. There should not be any need for an
     * application to use this class directly - the *Api and model classes provide the public API for the service. The
     * contents of this file should be regarded as internal but are documented for completeness.
     * @alias module:ApiClient
     * @class
     */

    constructor();

    /**
     * Applies authentication headers to the request.
     * @param {Object} request The request object created by a <code>superagent()</code> call.
     * @param {Array.<String>} authNames An array of authentication method names.
     */
    applyAuthToRequest(request: any, authNames: Array<string>): void;

    /**
     * Builds a string representation of an array-type actual parameter, according to the given collection format.
     * @param {Array} param An array parameter.
     * @param {module:ApiClient.CollectionFormatEnum} collectionFormat The array element 	 separator strategy.
     * @returns {String|Array} A string representation of the supplied collection, using the specified delimiter. Returns
     * <code>param</code> as is if <code>collectionFormat</code> is <code>multi</code>.
     */
    buildCollectionParam(
      param: Array<string>,
      collectionFormat: any,
    ): string | Array<string>;

    /**
     *added by infosys team, to generate requestTarget with pathParam
     */
    buildRequestTarget(path: string, pathParams: any, queryParams: any): string;

    /**
     * Builds full URL by appending the given path to the base URL and replacing path parameter place-holders with parameter values.
     * NOTE: query parameters are not handled here.
     * @param {String} path The path to append to the base URL.
     * @param {Object} pathParams The parameter values to append.
     * @returns {String} The encoded path with parameter values substituted.
     */
    buildUrl(path: string, pathParams: any): string;

    /**
     * Invokes the REST service using the supplied settings and parameters.
     * @param {String} path The base URL to invoke.
     * @param {String} httpMethod The HTTP method to use.
     * @param {Object.<String, String>} pathParams A map of path parameters and their values.
     * @param {Object.<String, Object>} queryParams A map of query parameters and their values.
     * @param {Object.<String, Object>} headerParams A map of header parameters and their values.
     * @param {Object.<String, Object>} formParams A map of form parameters and their values.
     * @param {Object} bodyParam
     * @param {Array.<String>} authNames An array of authentication type names.
     * @param {Array.<String>} contentTypes An array of request MIME types.
     * @param {Array.<String>} accepts An array of acceptable response MIME types.
     * @param {(String|Array|ObjectFunction)} returnType The required type to return; can be a string for simple types or the
     * constructor for a complex type.
     * @param {module:ApiClient~callApiCallback} callback The callback function.
     * @returns {Object} The SuperAgent 	request object.
     */
    callApi(
      path: string,
      httpMethod: string,
      pathParams: Record<string, string>,
      queryParams: Record<string, unknown>,
      headerParams: Record<string, unknown>,
      formParams: Record<string, unknown> | null,
      bodyParam: Record<string, unknown> | null,
      authNames: Array<string>,
      contentTypes: Array<string>,
      accepts: Array<string>,
      returnType: string | Array<string> | Record<string, unknown>,
      callback: any,
    ): Record<string, unknown>;

    /**
     * This method is to generate headers for http and jwt authentication.
     *
     * @param {String} httpMethod
     * @param {String} requestTarget
     * @param {String} requestBody
     */
    callAuthenticationHeader(
      httpMethod: string,
      requestTarget: string,
      requestBody: string,
      headerParams: Record<string, unknown>,
    ): Record<string, unknown>;

    /**
     * Checks whether the given parameter value represents file-like content.
     * @param param The parameter to check.
     * @returns {Boolean} <code>true</code> if <code>param</code> represents a file.
     */
    isFileParam(param: any): boolean;

    /**
     * Checks whether the given content type represents JSON.<br>
     * JSON content type examples:<br>
     * <ul>
     * <li>application/json</li>
     * <li>application/json; charset=UTF8</li>
     * <li>APPLICATION/JSON</li>
     * </ul>
     * @param {String} contentType The MIME content type to check.
     * @returns {Boolean} <code>true</code> if <code>contentType</code> represents JSON, otherwise <code>false</code>.
     */
    isJsonMime(contentType: string): boolean;

    /**
     * Chooses a content type from the given array, with JSON preferred; i.e. return JSON if included, otherwise return the first.
     * @param {Array.<String>} contentTypes
     * @returns {String} The chosen content type, preferring JSON.
     */
    jsonPreferredMime(contentTypes: Array<string>): string;

    /**
     * Normalizes parameter values:
     * <ul>
     * <li>remove nils</li>
     * <li>keep files and arrays</li>
     * <li>format to string with `paramToString` for other cases</li>
     * </ul>
     * @param {Object.<String, Object>} params The parameters as object properties.
     * @returns {Object.<String, Object>} normalized parameters.
     */
    normalizeParams(params: Record<string, unknown>): Record<string, unknown>;

    /**
     * Returns a string representation for an actual parameter.
     * @param param The actual parameter.
     * @returns {String} The string representation of <code>param</code>.
     */
    paramToString(param: any): string;

    /**
     * This method will set the merchantConfig object global
     *
     * @param {Configuration} configObject merchantConfiguration properties.
     */
    setConfiguration(config: MerchantConfig): void;

    /**
     * Enumeration of collection format separator strategies.
     * @enum {String}
     * @readonly
     */
    static CollectionFormatEnum: {
      CSV: string;
      MULTI: string;
      PIPES: string;
      SSV: string;
      TSV: string;
    };

    /**
     * Constructs a new map or array model from REST data.
     * @param data {Object|Array} The REST data.
     * @param obj {Object|Array} The target object or array.
     */
    static constructFromObject(
      data: Record<string, unknown> | Array<Record<string, unknown>>,
      obj: Record<string, unknown> | Array<Record<string, unknown>>,
      itemType: any,
    ): void;
    static convertToType(
      data: string | Record<string, unknown>,
      type: string | Array<string> | Record<string, unknown>,
    ): any;

    /**
     * Parses an ISO-8601 string representation of a date value.
     * @param {String} str The date value as a string.
     * @returns {Date} The parsed date object.
     */
    static parseDate(str: string): Date;
  }
  export interface AddNegativeListRequest {
    orderInformation?: Riskv1liststypeentriesOrderInformation;
    paymentInformation?: Riskv1liststypeentriesPaymentInformation;
    clientReferenceInformation: Riskv1decisionsClientReferenceInformation;
    deviceInformation?: Riskv1liststypeentriesDeviceInformation;
    riskInformation?: Riskv1liststypeentriesRiskInformation;
    buyerInformation?: Riskv1liststypeentriesBuyerInformation;
  }
  export interface AuthReversalRequest {
    clientReferenceInformation?: Ptsv2paymentsidreversalsClientReferenceInformation;
    reversalInformation?: Ptsv2paymentsidreversalsReversalInformation;
    processingInformation?: Ptsv2paymentsidreversalsProcessingInformation;
    orderInformation?: Ptsv2paymentsidreversalsOrderInformation;
    pointOfSaleInformation?: Ptsv2paymentsidreversalsPointOfSaleInformation;
  }
  export interface CapturePaymentRequest {
    clientReferenceInformation?: Ptsv2paymentsClientReferenceInformation;
    processingInformation?: Ptsv2paymentsidcapturesProcessingInformation;
    paymentInformation?: Ptsv2paymentsidcapturesPaymentInformation;
    orderInformation?: Ptsv2paymentsidcapturesOrderInformation;
    buyerInformation?: Ptsv2paymentsidcapturesBuyerInformation;
    deviceInformation?: Ptsv2paymentsidcapturesDeviceInformation;
    merchantInformation?: Ptsv2paymentsidcapturesMerchantInformation;
    aggregatorInformation?: Ptsv2paymentsidcapturesAggregatorInformation;
    pointOfSaleInformation?: Ptsv2paymentsidcapturesPointOfSaleInformation;
    /**
     * The object containing the custom data that the merchant defines.
     */
    merchantDefinedInformation?: Array<Ptsv2paymentsMerchantDefinedInformation>;
    installmentInformation?: Ptsv2paymentsidcapturesInstallmentInformation;
    travelInformation?: Ptsv2paymentsTravelInformation;
    promotionInformation?: Ptsv2paymentsPromotionInformation;
  }
  export interface CheckPayerAuthEnrollmentRequest {
    clientReferenceInformation?: Riskv1authenticationsetupsClientReferenceInformation;
    orderInformation?: Riskv1authenticationsOrderInformation;
    paymentInformation?: Riskv1authenticationsPaymentInformation;
    processingInformation?: Riskv1authenticationsetupsProcessingInformation;
    tokenInformation?: Riskv1authenticationsetupsTokenInformation;
    buyerInformation?: Riskv1authenticationsBuyerInformation;
    deviceInformation?: Riskv1authenticationsDeviceInformation;
    merchantInformation?: Riskv1decisionsMerchantInformation;
    acquirerInformation?: Ptsv2paymentsAcquirerInformation;
    recurringPaymentInformation?: Ptsv2paymentsRecurringPaymentInformation;
    consumerAuthenticationInformation?: Riskv1decisionsConsumerAuthenticationInformation;
    riskInformation?: Riskv1authenticationsRiskInformation;
    travelInformation?: Riskv1authenticationsTravelInformation;
    merchantDefinedInformation?: Array<Riskv1decisionsMerchantDefinedInformation>;
  }
  export interface CreateAdhocReportRequest {
    /**
     * Valid CyberSource Organization Id
     */
    organizationId?: string;
    reportDefinitionName?: string;
    /**
     * List of fields which needs to get included in a report
     */
    reportFields?: Array<string>;
    /**
     * 'Format of the report'                  Valid values: - application/xml - text/csv
     */
    reportMimeType?: string;
    /**
     * Name of the report
     */
    reportName?: string;
    /**
     * Timezone of the report
     */
    timezone?: string;
    /**
     * Start time of the report
     */
    reportStartTime?: Date;
    /**
     * End time of the report
     */
    reportEndTime?: Date;
    /**
     * List of filters to apply
     */
    reportFilters?: { [key: string]: Array<string> };
    reportPreferences?: Reportingv3reportsReportPreferences;
    /**
     * Specifies the group name
     */
    groupName?: string;
  }
  export interface CreateBundledDecisionManagerCaseRequest {
    clientReferenceInformation: Riskv1decisionsClientReferenceInformation;
    processorInformation?: Riskv1decisionsProcessorInformation;
    processingInformation?: Riskv1decisionsProcessingInformation;
    paymentInformation?: Riskv1decisionsPaymentInformation;
    orderInformation: Riskv1decisionsOrderInformation;
    buyerInformation?: Riskv1decisionsBuyerInformation;
    deviceInformation?: Riskv1decisionsDeviceInformation;
    riskInformation?: Riskv1decisionsRiskInformation;
    travelInformation?: Riskv1decisionsTravelInformation;
    merchantDefinedInformation?: Array<Riskv1decisionsMerchantDefinedInformation>;
    merchantInformation?: Riskv1decisionsMerchantInformation;
    acquirerInformation?: Ptsv2paymentsAcquirerInformation;
    recurringPaymentInformation?: Ptsv2paymentsRecurringPaymentInformation;
    consumerAuthenticationInformation?: Riskv1decisionsConsumerAuthenticationInformation;
  }
  export interface CreateCreditRequest {
    clientReferenceInformation?: Ptsv2paymentsClientReferenceInformation;
    processingInformation?: Ptsv2creditsProcessingInformation;
    paymentInformation?: Ptsv2paymentsidrefundsPaymentInformation;
    orderInformation?: Ptsv2paymentsidrefundsOrderInformation;
    buyerInformation?: Ptsv2paymentsidcapturesBuyerInformation;
    deviceInformation?: Ptsv2paymentsidcapturesDeviceInformation;
    merchantInformation?: Ptsv2paymentsidrefundsMerchantInformation;
    aggregatorInformation?: Ptsv2paymentsidcapturesAggregatorInformation;
    pointOfSaleInformation?: Ptsv2paymentsPointOfSaleInformation;
    /**
     * The object containing the custom data that the merchant defines.
     */
    merchantDefinedInformation?: Array<Ptsv2paymentsMerchantDefinedInformation>;
    installmentInformation?: Ptsv2creditsInstallmentInformation;
    travelInformation?: Ptsv2paymentsTravelInformation;
    promotionInformation?: Ptsv2paymentsPromotionInformation;
  }
  export interface CreateInvoiceRequest {
    customerInformation?: Invoicingv2invoicesCustomerInformation;
    invoiceInformation?: Invoicingv2invoicesInvoiceInformation;
    orderInformation?: Invoicingv2invoicesOrderInformation;
  }
  export interface CreateP12KeysRequest {
    clientReferenceInformation?: Kmsv2keyssymClientReferenceInformation;
    keyInformation?: Array<Kmsv2keysasymKeyInformation>;
  }
  export interface CreatePaymentRequest {
    clientReferenceInformation?: Ptsv2paymentsClientReferenceInformation;
    processingInformation?: Ptsv2paymentsProcessingInformation;
    issuerInformation?: Ptsv2paymentsIssuerInformation;
    paymentInformation?: Ptsv2paymentsPaymentInformation;
    orderInformation?: Ptsv2paymentsOrderInformation;
    buyerInformation?: Ptsv2paymentsBuyerInformation;
    recipientInformation?: Ptsv2paymentsRecipientInformation;
    deviceInformation?: Ptsv2paymentsDeviceInformation;
    merchantInformation?: Ptsv2paymentsMerchantInformation;
    aggregatorInformation?: Ptsv2paymentsAggregatorInformation;
    consumerAuthenticationInformation?: Ptsv2paymentsConsumerAuthenticationInformation;
    pointOfSaleInformation?: Ptsv2paymentsPointOfSaleInformation;
    /**
     * The object containing the custom data that the merchant defines.
     */
    merchantDefinedInformation?: Array<Ptsv2paymentsMerchantDefinedInformation>;
    installmentInformation?: Ptsv2paymentsInstallmentInformation;
    travelInformation?: Ptsv2paymentsTravelInformation;
    healthCareInformation?: Ptsv2paymentsHealthCareInformation;
    promotionInformation?: Ptsv2paymentsPromotionInformation;
    tokenInformation?: Ptsv2paymentsTokenInformation;
    riskInformation?: Ptsv2paymentsRiskInformation;
    acquirerInformation?: Ptsv2paymentsAcquirerInformation;
    recurringPaymentInformation?: Ptsv2paymentsRecurringPaymentInformation;
  }
  export interface CreateReportSubscriptionRequest {
    /**
     * Valid CyberSource organizationId
     */
    organizationId?: string;
    /**
     * Valid Report Definition Name
     */
    reportDefinitionName: string;
    reportFields: Array<string>;
    /**
     * Valid values: - application/xml - text/csv
     */
    reportMimeType: string;
    /**
     * 'The frequency for which subscription is created.' **NOTE: Do not document USER_DEFINED Frequency field in developer center** Valid Values:   - 'DAILY'   - 'WEEKLY'   - 'MONTHLY'   - 'USER_DEFINED'
     */
    reportFrequency: string;
    /**
     * If the reportFrequency is User-defined, reportInterval should be in **ISO 8601 time format** Please refer the following link to know more about ISO 8601 format.[Rfc Time Format](https://en.wikipedia.org/wiki/ISO_8601#Durations)  **Example time format for 2 hours and 30 Mins:**   - PT2H30M **NOTE: Do not document reportInterval field in developer center**
     */
    reportInterval?: string;
    reportName: string;
    timezone: string;
    /**
     * The hour at which the report generation should start. It should be in hhmm format.
     */
    startTime: string;
    /**
     * This is the start day if the frequency is WEEKLY or MONTHLY. The value varies from 1-7 for WEEKLY and 1-31 for MONTHLY. For WEEKLY 1 means Sunday and 7 means Saturday. By default the value is 1.
     */
    startDay?: number;
    /**
     * List of filters to apply
     */
    reportFilters?: { [key: string]: Array<string> };
    reportPreferences?: Reportingv3reportsReportPreferences;
    /**
     * Valid GroupName
     */
    groupName?: string;
  }
  export interface CreateSearchRequest {
    /**
     * Indicates whether or not you want to save this search request for future use. The options are:  * `true` * `false` (default value)  If set to `true`, this field returns `searchID` in the response. You can use this value to retrieve the details of the saved search.
     */
    save?: boolean;
    /**
     * Name of this search. When `save` is set to `true`, this search is saved with this name.
     */
    name?: string;
    /**
     * Merchant’s time zone in ISO standard, using the TZ database format. For example: `America/Chicago`
     */
    timezone?: string;
    /**
     * String that contains the filters and variables for which you want to search. For information about supported field-filters and operators, see the [Query Filters]( https://developer.cybersource.com/api/developer-guides/dita-txn-search-details-rest-api-dev-guide-102718/txn_search_api/creating_txn_search_request.html) section of the Transaction Search Developer Guide.
     */
    query?: string;
    /**
     * Controls the starting point within the collection of results, which defaults to 0. The first item in the collection is retrieved by setting a zero offset.  For example, if you have a collection of 15 items to be retrieved from a resource and you specify limit=5, you can retrieve the entire set of results in 3 successive requests by varying the offset value like this:  `offset=0` `offset=5` `offset=10`  **Note:** If an offset larger than the number of results is provided, this will result in no embedded object being returned.
     */
    offset?: number;
    /**
     * Controls the maximum number of items that may be returned for a single request. The default is 20, the maximum is 2000.
     */
    limit?: number;
    /**
     * A comma separated list of the following form:  `submitTimeUtc:desc`
     */
    sort?: string;
  }
  export interface CreateSharedSecretKeysRequest {
    clientReferenceInformation?: Kmsv2keyssymClientReferenceInformation;
    keyInformation?: Array<Kmsv2keyssymKeyInformation>;
  }
  export interface DeleteBulkP12KeysRequest {
    clientReferenceInformation?: Kmsv2keyssymClientReferenceInformation;
    keyInformation?: Array<Kmsv2keyssymdeletesKeyInformation>;
  }
  export interface DeleteBulkSymmetricKeysRequest {
    clientReferenceInformation?: Kmsv2keyssymClientReferenceInformation;
    keyInformation?: Array<Kmsv2keyssymdeletesKeyInformation>;
  }
  export interface Flexv1tokensCardInfo {
    /**
     * Encrypted or plain text card number. If the encryption type of “None” was used in the Generate Key request, this value can be set to the plaintext card number/Personal Account Number (PAN). If the encryption type of RsaOaep256 was used in the Generate Key request, this value needs to be the RSA OAEP 256 encrypted card number. The card number should be encrypted on the cardholders’ device. The [WebCrypto API] (https://github.com/CyberSource/cybersource-flex-samples/blob/master/java/spring-boot/src/main/resources/public/flex.js) can be used with the JWK obtained in the Generate Key request.
     */
    cardNumber: string;
    /**
     * Two digit expiration month
     */
    cardExpirationMonth?: string;
    /**
     * Four digit expiration year
     */
    cardExpirationYear?: string;
    /**
     * Card Type. This field is required. Refer to the CyberSource Credit Card Services documentation for supported card types.
     */
    cardType: string;
  }
  export interface FraudMarkingActionRequest {
    riskInformation: Riskv1decisionsidmarkingRiskInformation;
  }
  export interface GenerateCaptureContextRequest {
    /**
     * The merchant origin domain (e.g. https://example.com) used to initiate microform Integration. Required to comply with CORS and CSP standards.
     */
    encryptionType?: string;
    targetOrigins?: Array<string>;
    allowedCardNetworks?: Array<string>;
    clientVersion?: string;
  }
  export interface GeneratePublicKeyRequest {
    /**
     * How the card number should be encrypted in the subsequent Tokenize Card request. Possible values are RsaOaep256 or None (if using this value the card number must be in plain text when included in the Tokenize Card request). The Tokenize Card request uses a secure connection (TLS 1.2+) regardless of what encryption type is specified.
     */
    encryptionType: string;
    /**
     * The merchant origin (e.g. https://example.com) used to integrate with Flex API. Required to comply with CORS and CSP standards.
     */
    targetOrigin?: string;
  }
  export interface IncrementAuthRequest {
    clientReferenceInformation?: Ptsv2paymentsidClientReferenceInformation;
    processingInformation?: Ptsv2paymentsidProcessingInformation;
    orderInformation?: Ptsv2paymentsidOrderInformation;
    merchantInformation?: Ptsv2paymentsidMerchantInformation;
    travelInformation?: Ptsv2paymentsidTravelInformation;
  }
  export interface InlineResponse400 {
    errors?: Array<InlineResponse400Errors>;
  }
  /**
   * Error Bean
   */
  export interface InlineResponse4001 {
    /**
     * Error code
     */
    code: string;
    /**
     * Error message
     */
    message: string;
    /**
     * Localization Key Name
     */
    localizationKey?: string;
    /**
     * Correlation Id
     */
    correlationId?: string;
    /**
     * Error Detail
     */
    detail?: string;
    /**
     * Error fields List
     */
    fields?: Array<InlineResponse4001Fields>;
  }
  /**
   * Provide validation failed input field details
   */
  export interface InlineResponse4001Fields {
    /**
     * Path of the failed property
     */
    path?: string;
    /**
     * Error description about validation failed field
     */
    message?: string;
    /**
     * Localized Key Name
     */
    localizationKey?: string;
  }
  export interface InlineResponse4002 {
    /**
     * Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ` **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The `T` separates the date and the time. The `Z` indicates UTC.  Returned by authorization service.  #### PIN debit Time when the PIN debit credit, PIN debit purchase or PIN debit reversal was requested.  Returned by PIN debit credit, PIN debit purchase or PIN debit reversal.
     */
    submitTimeUtc?: string;
    /**
     * The status of the submitted transaction.  Possible values:  - INVALID_REQUEST
     */
    status?: string;
    /**
     * The reason of the status.  Possible values:  - MISSING_FIELD  - INVALID_DATA
     */
    reason?: string;
    /**
     * The detail message related to the status and reason listed above.
     */
    message?: string;
  }
  export interface InlineResponse400Details {
    /**
     * The name of the field that caused the error.
     */
    name?: string;
    /**
     * The location of the field that caused the error.
     */
    location?: string;
  }
  export interface InlineResponse400Errors {
    /**
     * The type of error.
     */
    type?: string;
    /**
     * The detailed message related to the type stated above.
     */
    message?: string;
    details?: Array<InlineResponse400Details>;
  }
  export interface InlineResponseDefault {
    responseStatus?: InlineResponseDefaultResponseStatus;
    links?: InlineResponseDefaultLinks;
  }
  export interface InlineResponseDefaultLinks {
    next?: Array<InlineResponseDefaultLinksNext>;
    documentation?: Array<InlineResponseDefaultLinksNext>;
    self?: InlineResponseDefaultLinksNext;
  }
  export interface InlineResponseDefaultLinksNext {
    /**
     * URI of the linked resource.
     */
    href?: string;
    /**
     * Label of the linked resource.
     */
    title?: string;
    /**
     * HTTP method of the linked resource.
     */
    method?: string;
  }
  export interface InlineResponseDefaultResponseStatus {
    /**
     * HTTP Status code.
     */
    status?: number;
    /**
     * Error Reason Code.
     */
    reason?: string;
    /**
     * Error Message.
     */
    message?: string;
    /**
     * API correlation ID.
     */
    correlationId?: string;
    details?: Array<InlineResponseDefaultResponseStatusDetails>;
  }
  export interface InlineResponseDefaultResponseStatusDetails {
    /**
     * Field name referred to for validation issues.
     */
    location?: string;
    /**
     * Description or code of any error response.
     */
    message?: string;
  }
  export interface InvoiceSettingsRequest {
    invoiceSettingsInformation?: InvoicingV2InvoiceSettingsGet200ResponseInvoiceSettingsInformation;
  }
  export interface InvoicingV2InvoiceSettingsGet200Response {
    /**
     * Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ` **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The `T` separates the date and the time. The `Z` indicates UTC.  Returned by authorization service.  #### PIN debit Time when the PIN debit credit, PIN debit purchase or PIN debit reversal was requested.  Returned by PIN debit credit, PIN debit purchase or PIN debit reversal.
     */
    submitTimeUtc?: string;
    invoiceSettingsInformation?: InvoicingV2InvoiceSettingsGet200ResponseInvoiceSettingsInformation;
  }
  export interface InvoicingV2InvoiceSettingsGet200ResponseInvoiceSettingsInformation {
    /**
     * The image file, which must be encoded in Base64 format. Supported file formats are `png`, `jpg`, and `gif`. The image file size restriction is 1 MB.
     */
    merchantLogo?: string;
    /**
     * The merchant's display name shown on the invoice.
     */
    merchantDisplayName?: string;
    /**
     * The content of the email message that we send to your customers.
     */
    customEmailMessage?: string;
    /**
     * Whether you would like us to send an auto-generated reminder email to your invoice recipients. Currently, this reminder email is sent five days before the invoice is due and one day after it is past due.
     */
    enableReminders?: boolean;
    headerStyle?: InvoicingV2InvoiceSettingsGet200ResponseInvoiceSettingsInformationHeaderStyle;
    /**
     * The language of the email that we send to your customers. Possible values are `zh-CN`, `zh-TW`, `en-US`, `fr-FR`, `de-DE`, `ja-JP`, `pt-BR`, `ru-RU` and `es-419`.
     */
    deliveryLanguage?: string;
    /**
     * Currency used for the order. Use the three-character [ISO Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf)  #### Used by **Authorization** Required field.  **Authorization Reversal** For an authorization reversal (`reversalInformation`) or a capture (`processingOptions.capture` is set to `true`), you must use the same currency that you used in your payment authorization request.  #### PIN Debit Currency for the amount you requested for the PIN debit purchase. This value is returned for partial authorizations. The issuing bank can approve a partial amount if the balance on the debit card is less than the requested transaction amount. For the possible values, see the [ISO Standard Currency Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/currencies.pdf). Returned by PIN debit purchase.  For PIN debit reversal requests, you must use the same currency that was used for the PIN debit purchase or PIN debit credit that you are reversing. For the possible values, see the [ISO Standard Currency Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/currencies.pdf).  Required field for PIN Debit purchase and PIN Debit credit requests. Optional field for PIN Debit reversal requests.  #### GPX This field is optional for reversing an authorization or credit.  #### DCC for First Data Your local currency. For details, see the `currency` field description in [Dynamic Currency Conversion For First Data Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/DCC_FirstData_SCMP/DCC_FirstData_SCMP_API.pdf).  #### Tax Calculation Required for international tax and value added tax only. Optional for U.S. and Canadian taxes. Your local currency.
     */
    defaultCurrencyCode?: string;
  }
  export interface InvoicingV2InvoiceSettingsGet200ResponseInvoiceSettingsInformationHeaderStyle {
    /**
     * The invoice font color. The format is a valid hexadecimal code prefixed with `#`, such as `#000000` for black.
     */
    fontColor?: string;
    /**
     * The invoice background color. The format is a valid hexadecimal code prefixed with `#`, such as `#ffffff` for white.
     */
    backgroundColor?: string;
  }
  export interface InvoicingV2InvoicesAllGet200Response {
    links?: InvoicingV2InvoicesAllGet200ResponseLinks;
    /**
     * Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ` **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The `T` separates the date and the time. The `Z` indicates UTC.  Returned by authorization service.  #### PIN debit Time when the PIN debit credit, PIN debit purchase or PIN debit reversal was requested.  Returned by PIN debit credit, PIN debit purchase or PIN debit reversal.
     */
    submitTimeUtc?: string;
    totalInvoices?: number;
    invoices?: Array<InvoicingV2InvoicesAllGet200ResponseInvoices>;
  }
  export interface InvoicingV2InvoicesAllGet200ResponseCustomerInformation {
    /**
     * Payer name for the invoice.
     */
    name?: string;
  }
  export interface InvoicingV2InvoicesAllGet200ResponseInvoiceInformation {
    /**
     * The invoice due date. This field is required for creating an invoice. Format: `YYYY-MM-DD`, where `YYYY` = year, `MM` = month, and `DD` = day
     */
    dueDate?: string;
  }
  /**
   * A list of invoices.
   */
  export interface InvoicingV2InvoicesAllGet200ResponseInvoices {
    links?: InvoicingV2InvoicesAllGet200ResponseLinks1;
    /**
     * An unique identification number to identify the submitted request. It is also appended to the endpoint of the resource.  On incremental authorizations, this value with be the same as the identification number returned in the original authorization response.  #### PIN debit Returned for all PIN debit services.
     */
    id?: string;
    /**
     * The status of the invoice.  Possible values: - DRAFT - CREATED - SENT - PARTIAL - PAID - CANCELED
     */
    status?: string;
    customerInformation?: InvoicingV2InvoicesAllGet200ResponseCustomerInformation;
    invoiceInformation?: InvoicingV2InvoicesAllGet200ResponseInvoiceInformation;
    orderInformation?: InvoicingV2InvoicesAllGet200ResponseOrderInformation;
  }
  export interface InvoicingV2InvoicesAllGet200ResponseLinks {
    self?: PtsV2PaymentsPost201ResponseLinksSelf;
    next?: PtsV2PaymentsPost201ResponseLinksSelf;
    previous?: PtsV2PaymentsPost201ResponseLinksSelf;
  }
  export interface InvoicingV2InvoicesAllGet200ResponseLinks1 {
    self?: PtsV2PaymentsPost201ResponseLinksSelf;
    update?: PtsV2PaymentsPost201ResponseLinksSelf;
    deliver?: PtsV2PaymentsPost201ResponseLinksSelf;
    cancel?: PtsV2PaymentsPost201ResponseLinksSelf;
  }
  export interface InvoicingV2InvoicesAllGet200ResponseOrderInformation {
    amountDetails?: InvoicingV2InvoicesAllGet200ResponseOrderInformationAmountDetails;
  }
  /**
   * Contains all of the amount-related fields for a list of invoices.
   */
  export interface InvoicingV2InvoicesAllGet200ResponseOrderInformationAmountDetails {
    /**
     * Grand total for the order. This value cannot be negative. You can include a decimal point (.), but no other special characters. CyberSource truncates the amount to the correct number of decimal places.  **Note** For CTV, FDCCompass, Paymentech processors, the maximum length for this field is 12.  **Important** Some processors have specific requirements and limitations, such as maximum amounts and maximum field lengths. For details, see: - \"Authorization Information for Specific Processors\" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/). - \"Capture Information for Specific Processors\" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/). - \"Credit Information for Specific Processors\" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/).  If your processor supports zero amount authorizations, you can set this field to 0 for the authorization to check if the card is lost or stolen. For details, see \"Zero Amount Authorizations,\" \"Credit Information for Specific Processors\" in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  #### Card Present Required to include either this field or `orderInformation.lineItems[].unitPrice` for the order.  #### Invoicing Required for creating a new invoice.  #### PIN Debit Amount you requested for the PIN debit purchase. This value is returned for partial authorizations. The issuing bank can approve a partial amount if the balance on the debit card is less than the requested transaction amount.  Required field for PIN Debit purchase and PIN Debit credit requests. Optional field for PIN Debit reversal requests.  #### GPX This field is optional for reversing an authorization or credit; however, for all other processors, these fields are required.  #### DCC with a Third-Party Provider Set this field to the converted amount that was returned by the DCC provider. You must include either this field or the 1st line item in the order and the specific line-order amount in your request. For details, see `grand_total_amount` field description in [Dynamic Currency Conversion For First Data Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/DCC_FirstData_SCMP/DCC_FirstData_SCMP_API.pdf).  #### FDMS South If you accept IDR or CLP currencies, see the entry for FDMS South in \"Authorization Information for Specific Processors\" of the [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  #### DCC for First Data Not used.
     */
    totalAmount?: string;
    /**
     * Currency used for the order. Use the three-character [ISO Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf)  #### Used by **Authorization** Required field.  **Authorization Reversal** For an authorization reversal (`reversalInformation`) or a capture (`processingOptions.capture` is set to `true`), you must use the same currency that you used in your payment authorization request.  #### PIN Debit Currency for the amount you requested for the PIN debit purchase. This value is returned for partial authorizations. The issuing bank can approve a partial amount if the balance on the debit card is less than the requested transaction amount. For the possible values, see the [ISO Standard Currency Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/currencies.pdf). Returned by PIN debit purchase.  For PIN debit reversal requests, you must use the same currency that was used for the PIN debit purchase or PIN debit credit that you are reversing. For the possible values, see the [ISO Standard Currency Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/currencies.pdf).  Required field for PIN Debit purchase and PIN Debit credit requests. Optional field for PIN Debit reversal requests.  #### GPX This field is optional for reversing an authorization or credit.  #### DCC for First Data Your local currency. For details, see the `currency` field description in [Dynamic Currency Conversion For First Data Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/DCC_FirstData_SCMP/DCC_FirstData_SCMP_API.pdf).  #### Tax Calculation Required for international tax and value added tax only. Optional for U.S. and Canadian taxes. Your local currency.
     */
    currency?: string;
  }
  export interface InvoicingV2InvoicesAllGet400Response {
    /**
     * Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ` **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The `T` separates the date and the time. The `Z` indicates UTC.  Returned by authorization service.  #### PIN debit Time when the PIN debit credit, PIN debit purchase or PIN debit reversal was requested.  Returned by PIN debit credit, PIN debit purchase or PIN debit reversal.
     */
    submitTimeUtc?: string;
    /**
     * The status of the invoice.  Possible values:   - BADREQUEST
     */
    status?: string;
    /**
     * The reason of the status.  Possible values:  - MISSING_FIELD  - INVALID_DATA  - DUPLICATE_REQUEST  - INVALID_MERCHANT_CONFIGURATION  - PROCESSOR_UNAVAILABLE
     */
    reason?: string;
    /**
     * The detail message related to the status and reason listed above.
     */
    message?: string;
    details?: Array<PtsV2PaymentsPost201ResponseErrorInformationDetails>;
  }
  export interface InvoicingV2InvoicesAllGet404Response {
    /**
     * Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ` **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The `T` separates the date and the time. The `Z` indicates UTC.  Returned by authorization service.  #### PIN debit Time when the PIN debit credit, PIN debit purchase or PIN debit reversal was requested.  Returned by PIN debit credit, PIN debit purchase or PIN debit reversal.
     */
    submitTimeUtc?: string;
    /**
     * The status of the invoice.  Possible values:  - NOTFOUND
     */
    status?: string;
    /**
     * The reason of the status.  Possible values:  - MISSING_FIELD  - INVALID_DATA  - DUPLICATE_REQUEST  - INVALID_MERCHANT_CONFIGURATION  - PROCESSOR_UNAVAILABLE
     */
    reason?: string;
    /**
     * The detail message related to the status and reason listed above.
     */
    message?: string;
    details?: Array<PtsV2PaymentsPost201ResponseErrorInformationDetails>;
  }
  export interface InvoicingV2InvoicesAllGet502Response {
    /**
     * Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ` **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The `T` separates the date and the time. The `Z` indicates UTC.  Returned by authorization service.  #### PIN debit Time when the PIN debit credit, PIN debit purchase or PIN debit reversal was requested.  Returned by PIN debit credit, PIN debit purchase or PIN debit reversal.
     */
    submitTimeUtc?: string;
    /**
     * The status of the submitted transaction.  Possible values:  - SERVER_ERROR
     */
    status?: string;
    /**
     * The reason of the status.  Possible values:  - SYSTEM_ERROR  - SERVER_TIMEOUT  - SERVICE_TIMEOUT
     */
    reason?: string;
    /**
     * The detail message related to the status and reason listed above.
     */
    message?: string;
  }
  export interface InvoicingV2InvoicesGet200Response {
    links?: InvoicingV2InvoicesAllGet200ResponseLinks1;
    /**
     * An unique identification number to identify the submitted request. It is also appended to the endpoint of the resource.  On incremental authorizations, this value with be the same as the identification number returned in the original authorization response.  #### PIN debit Returned for all PIN debit services.
     */
    id?: string;
    /**
     * Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ` **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The `T` separates the date and the time. The `Z` indicates UTC.  Returned by authorization service.  #### PIN debit Time when the PIN debit credit, PIN debit purchase or PIN debit reversal was requested.  Returned by PIN debit credit, PIN debit purchase or PIN debit reversal.
     */
    submitTimeUtc?: string;
    /**
     * The status of the invoice.  Possible values: - DRAFT - CREATED - SENT - PARTIAL - PAID - CANCELED
     */
    status?: string;
    customerInformation?: Invoicingv2invoicesCustomerInformation;
    invoiceInformation?: InvoicingV2InvoicesPost201ResponseInvoiceInformation;
    orderInformation?: InvoicingV2InvoicesPost201ResponseOrderInformation;
    invoiceHistory?: Array<InvoicingV2InvoicesGet200ResponseInvoiceHistory>;
  }
  export interface InvoicingV2InvoicesGet200ResponseInvoiceHistory {
    /**
     * The event triggered for the invoice.  Possible values:  - `CREATE`  - `UPDATE`  - `SEND`  - `RESEND`  - `REMINDER`  - `PAYMENT`  - `CANCEL`
     */
    event?: string;
    /**
     * The date and time when the invoice event was triggered in ISO 8601 format. Format: YYYY-MM-DDThh:mm:ssZ
     */
    date?: Date;
    transactionDetails?: InvoicingV2InvoicesGet200ResponseTransactionDetails;
  }
  /**
   * These details are only returned when the invoice event is `payment`.
   */
  export interface InvoicingV2InvoicesGet200ResponseTransactionDetails {
    /**
     * Payer auth Transaction identifier.
     */
    transactionId?: string;
    /**
     * Grand total for the order. This value cannot be negative. You can include a decimal point (.), but no other special characters. CyberSource truncates the amount to the correct number of decimal places.  **Note** For CTV, FDCCompass, Paymentech processors, the maximum length for this field is 12.  **Important** Some processors have specific requirements and limitations, such as maximum amounts and maximum field lengths. For details, see: - \"Authorization Information for Specific Processors\" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/). - \"Capture Information for Specific Processors\" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/). - \"Credit Information for Specific Processors\" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/).  If your processor supports zero amount authorizations, you can set this field to 0 for the authorization to check if the card is lost or stolen. For details, see \"Zero Amount Authorizations,\" \"Credit Information for Specific Processors\" in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  #### Card Present Required to include either this field or `orderInformation.lineItems[].unitPrice` for the order.  #### Invoicing Required for creating a new invoice.  #### PIN Debit Amount you requested for the PIN debit purchase. This value is returned for partial authorizations. The issuing bank can approve a partial amount if the balance on the debit card is less than the requested transaction amount.  Required field for PIN Debit purchase and PIN Debit credit requests. Optional field for PIN Debit reversal requests.  #### GPX This field is optional for reversing an authorization or credit; however, for all other processors, these fields are required.  #### DCC with a Third-Party Provider Set this field to the converted amount that was returned by the DCC provider. You must include either this field or the 1st line item in the order and the specific line-order amount in your request. For details, see `grand_total_amount` field description in [Dynamic Currency Conversion For First Data Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/DCC_FirstData_SCMP/DCC_FirstData_SCMP_API.pdf).  #### FDMS South If you accept IDR or CLP currencies, see the entry for FDMS South in \"Authorization Information for Specific Processors\" of the [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  #### DCC for First Data Not used.
     */
    amount?: string;
  }
  export interface InvoicingV2InvoicesPost201Response {
    links?: InvoicingV2InvoicesAllGet200ResponseLinks1;
    /**
     * An unique identification number to identify the submitted request. It is also appended to the endpoint of the resource.  On incremental authorizations, this value with be the same as the identification number returned in the original authorization response.  #### PIN debit Returned for all PIN debit services.
     */
    id?: string;
    /**
     * Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ` **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The `T` separates the date and the time. The `Z` indicates UTC.  Returned by authorization service.  #### PIN debit Time when the PIN debit credit, PIN debit purchase or PIN debit reversal was requested.  Returned by PIN debit credit, PIN debit purchase or PIN debit reversal.
     */
    submitTimeUtc?: string;
    /**
     * The status of the invoice.  Possible values: - DRAFT - CREATED - SENT - PARTIAL - PAID - CANCELED
     */
    status?: string;
    customerInformation?: Invoicingv2invoicesCustomerInformation;
    invoiceInformation?: InvoicingV2InvoicesPost201ResponseInvoiceInformation;
    orderInformation?: InvoicingV2InvoicesPost201ResponseOrderInformation;
  }
  /**
   * Contains all of the invoice-specific fields, such as the invoice number and due date.
   */
  export interface InvoicingV2InvoicesPost201ResponseInvoiceInformation {
    /**
     * Invoice Number.
     */
    invoiceNumber?: string;
    /**
     * The description included in the invoice.
     */
    description?: string;
    /**
     * The invoice due date. This field is required for creating an invoice. Format: `YYYY-MM-DD`, where `YYYY` = year, `MM` = month, and `DD` = day
     */
    dueDate?: string;
    /**
     * If set to `true`, the payer can make a partial invoice payment.
     */
    allowPartialPayments?: boolean;
    /**
     * Returns the payment link to an invoice when the invoice status is `SENT`, `CREATED`, `PARTIAL`, or `PAID`.
     */
    paymentLink?: string;
    /**
     * If set to `None`, the invoice is created, and its status is set to 'CREATED', but no email is sent.    Possible values:        - `None`   - `Email`
     */
    deliveryMode?: string;
  }
  /**
   * Contains all of the order-related fields for the invoice.
   */
  export interface InvoicingV2InvoicesPost201ResponseOrderInformation {
    amountDetails?: InvoicingV2InvoicesPost201ResponseOrderInformationAmountDetails;
    lineItems?: Array<Invoicingv2invoicesOrderInformationLineItems>;
  }
  /**
   * Contains all of the amount-related fields in the invoice.
   */
  export interface InvoicingV2InvoicesPost201ResponseOrderInformationAmountDetails {
    /**
     * Grand total for the order. This value cannot be negative. You can include a decimal point (.), but no other special characters. CyberSource truncates the amount to the correct number of decimal places.  **Note** For CTV, FDCCompass, Paymentech processors, the maximum length for this field is 12.  **Important** Some processors have specific requirements and limitations, such as maximum amounts and maximum field lengths. For details, see: - \"Authorization Information for Specific Processors\" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/). - \"Capture Information for Specific Processors\" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/). - \"Credit Information for Specific Processors\" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/).  If your processor supports zero amount authorizations, you can set this field to 0 for the authorization to check if the card is lost or stolen. For details, see \"Zero Amount Authorizations,\" \"Credit Information for Specific Processors\" in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  #### Card Present Required to include either this field or `orderInformation.lineItems[].unitPrice` for the order.  #### Invoicing Required for creating a new invoice.  #### PIN Debit Amount you requested for the PIN debit purchase. This value is returned for partial authorizations. The issuing bank can approve a partial amount if the balance on the debit card is less than the requested transaction amount.  Required field for PIN Debit purchase and PIN Debit credit requests. Optional field for PIN Debit reversal requests.  #### GPX This field is optional for reversing an authorization or credit; however, for all other processors, these fields are required.  #### DCC with a Third-Party Provider Set this field to the converted amount that was returned by the DCC provider. You must include either this field or the 1st line item in the order and the specific line-order amount in your request. For details, see `grand_total_amount` field description in [Dynamic Currency Conversion For First Data Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/DCC_FirstData_SCMP/DCC_FirstData_SCMP_API.pdf).  #### FDMS South If you accept IDR or CLP currencies, see the entry for FDMS South in \"Authorization Information for Specific Processors\" of the [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  #### DCC for First Data Not used.
     */
    totalAmount?: string;
    /**
     * Currency used for the order. Use the three-character [ISO Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf)  #### Used by **Authorization** Required field.  **Authorization Reversal** For an authorization reversal (`reversalInformation`) or a capture (`processingOptions.capture` is set to `true`), you must use the same currency that you used in your payment authorization request.  #### PIN Debit Currency for the amount you requested for the PIN debit purchase. This value is returned for partial authorizations. The issuing bank can approve a partial amount if the balance on the debit card is less than the requested transaction amount. For the possible values, see the [ISO Standard Currency Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/currencies.pdf). Returned by PIN debit purchase.  For PIN debit reversal requests, you must use the same currency that was used for the PIN debit purchase or PIN debit credit that you are reversing. For the possible values, see the [ISO Standard Currency Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/currencies.pdf).  Required field for PIN Debit purchase and PIN Debit credit requests. Optional field for PIN Debit reversal requests.  #### GPX This field is optional for reversing an authorization or credit.  #### DCC for First Data Your local currency. For details, see the `currency` field description in [Dynamic Currency Conversion For First Data Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/DCC_FirstData_SCMP/DCC_FirstData_SCMP_API.pdf).  #### Tax Calculation Required for international tax and value added tax only. Optional for U.S. and Canadian taxes. Your local currency.
     */
    currency?: string;
    /**
     * Remaining balance on the account.  Returned by authorization service.  #### PIN debit Remaining balance on the prepaid card.  Returned by PIN debit purchase.
     */
    balanceAmount?: string;
    /**
     * Total discount amount applied to the order.
     */
    discountAmount?: string;
    /**
     * The total discount percentage applied to the invoice.
     */
    discountPercent?: number;
    /**
     * Sub-amount of the invoice.
     */
    subAmount?: number;
    /**
     * The minimum partial amount required to pay the invoice.
     */
    minimumPartialAmount?: number;
    taxDetails?: Invoicingv2invoicesOrderInformationAmountDetailsTaxDetails;
    freight?: Invoicingv2invoicesOrderInformationAmountDetailsFreight;
  }
  export interface InvoicingV2InvoicesPost202Response {
    /**
     * Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ` **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The `T` separates the date and the time. The `Z` indicates UTC.  Returned by authorization service.  #### PIN debit Time when the PIN debit credit, PIN debit purchase or PIN debit reversal was requested.  Returned by PIN debit credit, PIN debit purchase or PIN debit reversal.
     */
    submitTimeUtc?: string;
    /**
     * The status of the invoice.  Possible values: - DRAFT - CREATED - SENT - PARTIAL - PAID - CANCELED
     */
    status?: string;
    /**
     * The reason of the status.  Possible values: - ACCEPTED
     */
    reason?: string;
    /**
     * The detail message related to the status and reason listed above.
     */
    message?: string;
    details?: Array<PtsV2PaymentsPost201ResponseErrorInformationDetails>;
  }
  /**
   * Contains all of the customer-related fields for the invoice.
   */
  export interface Invoicingv2invoicesCustomerInformation {
    /**
     * Payer name for the invoice.
     */
    name?: string;
    /**
     * Customer's email address, including the full domain name.  #### CyberSource through VisaNet Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  For processor-specific information, see the `customer_email` request-level field description in [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)  #### Invoicing Email address for the customer for sending the invoice. If the invoice is in SENT status and email is updated, the old email customer payment link won't work and you must resend the invoice with the new payment link.  #### Chase Paymentech Solutions Optional field.  ####  Credit Mutuel-CIC Optional field.  #### OmniPay Direct Optional field.  #### SIX Optional field.  #### TSYS Acquiring Solutions Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.  #### Worldpay VAP Optional field.  #### All other processors Not used.
     */
    email?: string;
  }
  /**
   * Contains all of the invoice-specific fields, such as the invoice number and due date.
   */
  export interface Invoicingv2invoicesInvoiceInformation {
    /**
     * Invoice Number.
     */
    invoiceNumber?: string;
    /**
     * The description included in the invoice.
     */
    description?: string;
    /**
     * The invoice due date. This field is required for creating an invoice. Format: `YYYY-MM-DD`, where `YYYY` = year, `MM` = month, and `DD` = day
     */
    dueDate?: string;
    /**
     * If set to `true`, we send the invoice immediately. If set to `false`, the invoice remains in draft mode.
     */
    sendImmediately?: boolean;
    /**
     * If set to `true`, the payer can make a partial invoice payment.
     */
    allowPartialPayments?: boolean;
    /**
     * If set to `None`, the invoice is created, and its status is set to 'CREATED', but no email is sent.    Possible values:        - `None`   - `Email`
     */
    deliveryMode?: string;
  }
  /**
   * Contains all of the order-related fields for the invoice, such as the amount and line item details.
   */
  export interface Invoicingv2invoicesOrderInformation {
    amountDetails?: Invoicingv2invoicesOrderInformationAmountDetails;
    lineItems?: Array<Invoicingv2invoicesOrderInformationLineItems>;
  }
  /**
   * Contains all of the amount-related fields in the invoice.
   */
  export interface Invoicingv2invoicesOrderInformationAmountDetails {
    /**
     * Grand total for the order. This value cannot be negative. You can include a decimal point (.), but no other special characters. CyberSource truncates the amount to the correct number of decimal places.  **Note** For CTV, FDCCompass, Paymentech processors, the maximum length for this field is 12.  **Important** Some processors have specific requirements and limitations, such as maximum amounts and maximum field lengths. For details, see: - \"Authorization Information for Specific Processors\" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/). - \"Capture Information for Specific Processors\" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/). - \"Credit Information for Specific Processors\" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/).  If your processor supports zero amount authorizations, you can set this field to 0 for the authorization to check if the card is lost or stolen. For details, see \"Zero Amount Authorizations,\" \"Credit Information for Specific Processors\" in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  #### Card Present Required to include either this field or `orderInformation.lineItems[].unitPrice` for the order.  #### Invoicing Required for creating a new invoice.  #### PIN Debit Amount you requested for the PIN debit purchase. This value is returned for partial authorizations. The issuing bank can approve a partial amount if the balance on the debit card is less than the requested transaction amount.  Required field for PIN Debit purchase and PIN Debit credit requests. Optional field for PIN Debit reversal requests.  #### GPX This field is optional for reversing an authorization or credit; however, for all other processors, these fields are required.  #### DCC with a Third-Party Provider Set this field to the converted amount that was returned by the DCC provider. You must include either this field or the 1st line item in the order and the specific line-order amount in your request. For details, see `grand_total_amount` field description in [Dynamic Currency Conversion For First Data Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/DCC_FirstData_SCMP/DCC_FirstData_SCMP_API.pdf).  #### FDMS South If you accept IDR or CLP currencies, see the entry for FDMS South in \"Authorization Information for Specific Processors\" of the [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  #### DCC for First Data Not used.
     */
    totalAmount?: string;
    /**
     * Currency used for the order. Use the three-character [ISO Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf)  #### Used by **Authorization** Required field.  **Authorization Reversal** For an authorization reversal (`reversalInformation`) or a capture (`processingOptions.capture` is set to `true`), you must use the same currency that you used in your payment authorization request.  #### PIN Debit Currency for the amount you requested for the PIN debit purchase. This value is returned for partial authorizations. The issuing bank can approve a partial amount if the balance on the debit card is less than the requested transaction amount. For the possible values, see the [ISO Standard Currency Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/currencies.pdf). Returned by PIN debit purchase.  For PIN debit reversal requests, you must use the same currency that was used for the PIN debit purchase or PIN debit credit that you are reversing. For the possible values, see the [ISO Standard Currency Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/currencies.pdf).  Required field for PIN Debit purchase and PIN Debit credit requests. Optional field for PIN Debit reversal requests.  #### GPX This field is optional for reversing an authorization or credit.  #### DCC for First Data Your local currency. For details, see the `currency` field description in [Dynamic Currency Conversion For First Data Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/DCC_FirstData_SCMP/DCC_FirstData_SCMP_API.pdf).  #### Tax Calculation Required for international tax and value added tax only. Optional for U.S. and Canadian taxes. Your local currency.
     */
    currency?: string;
    /**
     * Total discount amount applied to the order.
     */
    discountAmount?: string;
    /**
     * The total discount percentage applied to the invoice.
     */
    discountPercent?: number;
    /**
     * Sub-amount of the invoice.
     */
    subAmount?: number;
    /**
     * The minimum partial amount required to pay the invoice.
     */
    minimumPartialAmount?: number;
    taxDetails?: Invoicingv2invoicesOrderInformationAmountDetailsTaxDetails;
    freight?: Invoicingv2invoicesOrderInformationAmountDetailsFreight;
  }
  /**
   * Contains all of the shipping-related fields for the invoice.
   */
  export interface Invoicingv2invoicesOrderInformationAmountDetailsFreight {
    /**
     * Total freight or shipping and handling charges for the order. When you include this field in your request, you must also include the **totalAmount** field.  For processor-specific information, see the freight_amount field in [Level II and Level III Processing Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/Level_2_3_SCMP_API/html)
     */
    amount?: string;
    /**
     * Flag that indicates whether an order is taxable. This value must be true if the sum of all _lineItems[].taxAmount_ values > 0.  If you do not include any `lineItems[].taxAmount` values in your request, CyberSource does not include `invoiceDetails.taxable` in the data it sends to the processor.  For processor-specific information, see the `tax_indicator` field in [Level II and Level III Processing Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/Level_2_3_SCMP_API/html)  Possible values:  - **true**  - **false**
     */
    taxable?: boolean;
  }
  /**
   * Contains all of the tax-related fields for the invoice.
   */
  export interface Invoicingv2invoicesOrderInformationAmountDetailsTaxDetails {
    /**
     * Indicates the type of tax data for the _taxDetails_ object.  Possible values:  - `alternate` - `local` - `national` - `vat` - `other`  For processor-specific details, see the `alternate_tax_amount`, `local_tax`, `national_tax` or `vat_tax_amount` field descriptions in [Level II and Level III Processing Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/Level_2_3_SCMP_API/html/)
     */
    type?: string;
    /**
     * Indicates the amount of tax based on the `type` field as described in the table below:  | type      | type description | | ------------- |:-------------:| | `alternate` | Total amount of alternate tax for the order. | | `local`     | Sales tax for the order. | | `national`  | National tax for the order. | | `vat`       | Total amount of value added tax (VAT) included in the order. | | `other`     | Other tax. |
     */
    amount?: string;
    /**
     * Rate of VAT or other tax for the order.  Example 0.040 (=4%)  Valid range: 0.01 to 0.99 (1% to 99%, with only whole percentage values accepted; values with additional decimal places will be truncated)  For processor-specific details, see the `alternate_tax_amount`, `vat_rate`, `vat_tax_rate`, `local_tax`, `national_tax`, `vat_tax_amount` or `other_tax#_rate` field descriptions in the [Level II and Level III Processing Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/Level_2_3_SCMP_API/html/)
     */
    rate?: string;
  }
  /**
   * List of the line items from the order, which are included in an invoice.
   */
  export interface Invoicingv2invoicesOrderInformationLineItems {
    /**
     * Product identifier code. Also known as the Stock Keeping Unit (SKU) code for the product.  For an authorization or capture transaction (`processingOptions.capture` is set to `true` or `false`), this field is required when `orderInformation.lineItems[].productCode` is not set to **default** or one of the other values that are related to shipping and/or handling.  #### Tax Calculation Optional field for U.S. and Canadian taxes. Not applicable to international and value added taxes. For an authorization or capture transaction (`processingOptions.capture` is set to `true` or `false`), this field is required when `orderInformation.lineItems[].productCode` is not `default` or one of the values related to shipping and/or handling.
     */
    productSku?: string;
    /**
     * For an authorization or capture transaction (`processingOptions.capture` is `true` or `false`), this field is required when `orderInformation.lineItems[].productCode` is not `default` or one of the other values that are related to shipping and/or handling.  #### Tax Calculation Optional field for U.S., Canadian, international tax, and value added taxes.
     */
    productName?: string;
    /**
     * Number of units for this order. Must be a non-negative integer.  The default is `1`. For an authorization or capture transaction (`processingOptions.capture` is set to `true` or `false`), this field is required when `orderInformation.lineItems[].productCode` is not `default` or one of the other values related to shipping and/or handling.  #### Tax Calculation Optional field for U.S., Canadian, international tax, and value added taxes.
     */
    quantity?: number;
    /**
     * Per-item price of the product. This value for this field cannot be negative.  You must include either this field or the request-level field `orderInformation.amountDetails.totalAmount` in your request.  You can include a decimal point (.), but you cannot include any other special characters. The value is truncated to the correct number of decimal places.  #### DCC with a Third-Party Provider Set this field to the converted amount that was returned by the DCC provider. You must include either the 1st line item in the order and this field, or the request-level field `orderInformation.amountDetails.totalAmount` in your request.  #### FDMS South If you accept IDR or CLP currencies, see the entry for FDMS South in the [Merchant Descriptors Using the SCMP API Guide.] (https://apps.cybersource.com/library/documentation/dev_guides/Merchant_Descriptors_SCMP_API/html/)  #### Tax Calculation Required field for U.S., Canadian, international and value added taxes.  #### Zero Amount Authorizations If your processor supports zero amount authorizations, you can set this field to 0 for the authorization to check if the card is lost or stolen.  #### Maximum Field Lengths For GPN and JCN Gateway: Decimal (10) All other processors: Decimal (15)
     */
    unitPrice?: string;
  }
  /**
   * Contains the updatable invoice information.
   */
  export interface Invoicingv2invoicesidInvoiceInformation {
    /**
     * The description included in the invoice.
     */
    description?: string;
    /**
     * The invoice due date. This field is required for creating an invoice. Format: `YYYY-MM-DD`, where `YYYY` = year, `MM` = month, and `DD` = day
     */
    dueDate?: string;
    /**
     * If set to `true`, the payer can make a partial invoice payment.
     */
    allowPartialPayments?: boolean;
    /**
     * If set to `None`, the invoice is created, and its status is set to 'CREATED', but no email is sent.    Possible values:        - `None`   - `Email`
     */
    deliveryMode?: string;
  }
  export interface KmsV2KeysAsymDeletesPost200Response {
    /**
     * Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ` **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The `T` separates the date and the time. The `Z` indicates UTC.  Returned by authorization service.  #### PIN debit Time when the PIN debit credit, PIN debit purchase or PIN debit reversal was requested.  Returned by PIN debit credit, PIN debit purchase or PIN debit reversal.
     */
    submitTimeUtc?: string;
    clientReferenceInformation?: Kmsv2keyssymClientReferenceInformation;
    keyInformation?: Array<KmsV2KeysAsymDeletesPost200ResponseKeyInformation>;
  }
  /**
   * key information
   */
  export interface KmsV2KeysAsymDeletesPost200ResponseKeyInformation {
    /**
     * Merchant Id
     */
    organizationId?: string;
    /**
     * Reference number is a unique identifier provided by the client along with the organization Id. This is an optional field provided solely for the client’s convenience. If client specifies value for this field in the request, it is expected to be available in the response.
     */
    referenceNumber?: string;
    /**
     * Key Serial Number
     */
    keyId?: string;
    /**
     * The status of the key.  Possible values:  - FAILED  - ACTIVE  - INACTIVE  - EXPIRED
     */
    status?: string;
    /**
     * message in case of failed key
     */
    message?: string;
    errorInformation?: KmsV2KeysSymPost201ResponseErrorInformation;
  }
  export interface KmsV2KeysAsymGet200Response {
    /**
     * Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ` **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The `T` separates the date and the time. The `Z` indicates UTC.  Returned by authorization service.  #### PIN debit Time when the PIN debit credit, PIN debit purchase or PIN debit reversal was requested.  Returned by PIN debit credit, PIN debit purchase or PIN debit reversal.
     */
    submitTimeUtc?: string;
    keyInformation?: KmsV2KeysAsymGet200ResponseKeyInformation;
  }
  /**
   * key information
   */
  export interface KmsV2KeysAsymGet200ResponseKeyInformation {
    /**
     * Merchant Id
     */
    organizationId?: string;
    /**
     * Reference number is a unique identifier provided by the client along with the organization Id. This is an optional field provided solely for the client’s convenience. If client specifies value for this field in the request, it is expected to be available in the response.
     */
    referenceNumber?: string;
    /**
     * Key Serial Number
     */
    keyId?: string;
    /**
     * The status of the key.  Possible values:  - FAILED  - ACTIVE  - INACTIVE  - EXPIRED
     */
    status?: string;
    /**
     * The expiration time in UTC. `Format: YYYY-MM-DDThh:mm:ssZ`  Example 2016-08-11T22:47:57Z equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The T separates the date and the time. The Z indicates UTC.
     */
    expirationDate?: string;
    /**
     * message in case of failed key
     */
    message?: string;
    /**
     * Key alias
     */
    alias?: string;
    errorInformation?: KmsV2KeysSymPost201ResponseErrorInformation;
  }
  export interface KmsV2KeysAsymPost201Response {
    /**
     * Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ` **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The `T` separates the date and the time. The `Z` indicates UTC.  Returned by authorization service.  #### PIN debit Time when the PIN debit credit, PIN debit purchase or PIN debit reversal was requested.  Returned by PIN debit credit, PIN debit purchase or PIN debit reversal.
     */
    submitTimeUtc?: string;
    /**
     * The status of the submitted transaction.  Possible values:  - ACCEPTED
     */
    status?: string;
    clientReferenceInformation?: Kmsv2keyssymClientReferenceInformation;
    keyInformation?: Array<KmsV2KeysAsymPost201ResponseKeyInformation>;
    certificateInformation?: Array<KmsV2KeysAsymPost201ResponseCertificateInformation>;
  }
  export interface KmsV2KeysAsymPost201ResponseCertificateInformation {
    /**
     * Key alias
     */
    alias?: string;
    /**
     * Key Serial Number
     */
    keyId?: string;
    /**
     * value of the key
     */
    key?: string;
    /**
     * The expiration time in UTC. `Format: YYYY-MM-DDThh:mm:ssZ`  Example 2016-08-11T22:47:57Z equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The T separates the date and the time. The Z indicates UTC.
     */
    expirationDate?: string;
  }
  /**
   * key information
   */
  export interface KmsV2KeysAsymPost201ResponseKeyInformation {
    /**
     * Merchant Id
     */
    organizationId?: string;
    /**
     * Reference number is a unique identifier provided by the client along with the organization Id. This is an optional field provided solely for the client’s convenience. If client specifies value for this field in the request, it is expected to be available in the response.
     */
    referenceNumber?: string;
    /**
     * Key Serial Number
     */
    keyId?: string;
    /**
     * value of the key
     */
    key?: string;
    /**
     * The status of the key.  Possible values:  - FAILED  - ACTIVE
     */
    status?: string;
    /**
     * The expiration time in UTC. `Format: YYYY-MM-DDThh:mm:ssZ`  Example 2016-08-11T22:47:57Z equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The T separates the date and the time. The Z indicates UTC.
     */
    expirationDate?: string;
    /**
     * message in case of failed key
     */
    message?: string;
    /**
     * Key alias
     */
    alias?: string;
    errorInformation?: KmsV2KeysSymPost201ResponseErrorInformation;
  }
  export interface KmsV2KeysSymDeletesPost200Response {
    /**
     * Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ` **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The `T` separates the date and the time. The `Z` indicates UTC.  Returned by authorization service.  #### PIN debit Time when the PIN debit credit, PIN debit purchase or PIN debit reversal was requested.  Returned by PIN debit credit, PIN debit purchase or PIN debit reversal.
     */
    submitTimeUtc?: string;
    /**
     * The status of the submitted transaction.  Possible values:  - ACCEPTED
     */
    status?: string;
    clientReferenceInformation?: Kmsv2keyssymClientReferenceInformation;
    keyInformation?: Array<KmsV2KeysSymDeletesPost200ResponseKeyInformation>;
  }
  /**
   * key information
   */
  export interface KmsV2KeysSymDeletesPost200ResponseKeyInformation {
    /**
     * Merchant Id
     */
    organizationId?: string;
    /**
     * Key serial number
     */
    keyId?: string;
    /**
     * The status of the key.  Possible values:  - FAILED  - ACTIVE  - INACTIVE  - EXPIRED
     */
    status?: string;
    /**
     * message in case of failed key
     */
    message?: string;
    errorInformation?: KmsV2KeysSymPost201ResponseErrorInformation;
  }
  export interface KmsV2KeysSymGet200Response {
    /**
     * Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ` **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The `T` separates the date and the time. The `Z` indicates UTC.  Returned by authorization service.  #### PIN debit Time when the PIN debit credit, PIN debit purchase or PIN debit reversal was requested.  Returned by PIN debit credit, PIN debit purchase or PIN debit reversal.
     */
    submitTimeUtc?: string;
    /**
     * The status of the submitted transaction.  Possible values:  - ACCEPTED
     */
    status?: string;
    keyInformation?: KmsV2KeysSymGet200ResponseKeyInformation;
  }
  /**
   * key information
   */
  export interface KmsV2KeysSymGet200ResponseKeyInformation {
    /**
     * Merchant Id
     */
    organizationId?: string;
    /**
     * Key serial number
     */
    keyId?: string;
    /**
     * The status of the key.  Possible values:  - FAILED  - ACTIVE  - INACTIVE  - EXPIRED
     */
    status?: string;
    /**
     * The expiration time in UTC.
     */
    expirationDate?: string;
    /**
     * message in case of failed key
     */
    message?: string;
    errorInformation?: KmsV2KeysSymPost201ResponseErrorInformation;
  }
  export interface KmsV2KeysSymPost201Response {
    /**
     * Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ` **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The `T` separates the date and the time. The `Z` indicates UTC.  Returned by authorization service.  #### PIN debit Time when the PIN debit credit, PIN debit purchase or PIN debit reversal was requested.  Returned by PIN debit credit, PIN debit purchase or PIN debit reversal.
     */
    submitTimeUtc?: string;
    /**
     * The status of the submitted transaction.  Possible values:  - ACCEPTED
     */
    status?: string;
    clientReferenceInformation?: Kmsv2keyssymClientReferenceInformation;
    keyInformation?: Array<KmsV2KeysSymPost201ResponseKeyInformation>;
  }
  export interface KmsV2KeysSymPost201ResponseErrorInformation {
    /**
     * The reason of the status.  Possible values:  - MISSING_FIELD  - INVALID_DATA
     */
    reason?: string;
    details?: Array<PtsV2PaymentsPost201ResponseErrorInformationDetails>;
  }
  /**
   * key information
   */
  export interface KmsV2KeysSymPost201ResponseKeyInformation {
    /**
     * Merchant Id
     */
    organizationId?: string;
    /**
     * Reference number is a unique identifier provided by the client along with the organization Id. This is an optional field provided solely for the client’s convenience. If client specifies value for this field in the request, it is expected to be available in the response.
     */
    referenceNumber?: string;
    /**
     * Key Serial Number
     */
    keyId?: string;
    /**
     * value of the key
     */
    key?: string;
    /**
     * The status of the key.  Possible values:  - FAILED  - ACTIVE
     */
    status?: string;
    /**
     * The expiration time in UTC. `Format: YYYY-MM-DDThh:mm:ssZ`  Example 2016-08-11T22:47:57Z equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The T separates the date and the time. The Z indicates UTC.
     */
    expirationDate?: string;
    /**
     * message in case of failed key
     */
    message?: string;
    errorInformation?: KmsV2KeysSymPost201ResponseErrorInformation;
  }
  /**
   * key information
   */
  export interface Kmsv2keysasymKeyInformation {
    /**
     * Merchant Id
     */
    organizationId: string;
    /**
     * Reference number is a unique identifier provided by the client along with the organization Id. This is an optional field provided solely for the client’s convenience. If client specifies value for this field in the request, it is expected to be available in the response.
     */
    referenceNumber?: string;
    /**
     * Certificate Signing Request(csr), one needs to use the contents of the csr created for the same organizationId. Please extract string from '\\n' and '-----BEGIN CERTIFICATE REQUEST-----','-----END CERTIFICATE REQUEST-----'
     */
    cert: string;
  }
  export interface Kmsv2keyssymClientReferenceInformation {
    /**
     * Client-generated order reference or tracking number. CyberSource recommends that you send a unique value.
     */
    code?: string;
    /**
     * Comments
     */
    comments?: string;
    partner?: Vasv2taxClientReferenceInformationPartner;
  }
  /**
   * key information
   */
  export interface Kmsv2keyssymKeyInformation {
    /**
     * Merchant Id
     */
    organizationId: string;
    /**
     * Reference number is a unique identifier provided by the client along with the organization Id. This is an optional field provided solely for the client’s convenience. If client specifies value for this field in the request, it is expected to be available in the response.
     */
    referenceNumber?: string;
  }
  /**
   * key information
   */
  export interface Kmsv2keyssymdeletesKeyInformation {
    /**
     * Merchant Id
     */
    organizationId: string;
    /**
     * Reference number is a unique identifier provided by the client along with the organization Id. This is an optional field provided solely for the client’s convenience. If client specifies value for this field in the request, it is expected to be available in the response.
     */
    referenceNumber?: string;
    /**
     * Key Serial Number
     */
    keyId: string;
  }
  export interface MitReversalRequest {
    clientReferenceInformation?: Ptsv2paymentsClientReferenceInformation;
    reversalInformation?: Ptsv2paymentsidreversalsReversalInformation;
    processingInformation?: Ptsv2paymentsidreversalsProcessingInformation;
    orderInformation?: Ptsv2paymentsidreversalsOrderInformation;
    pointOfSaleInformation?: Ptsv2paymentsidreversalsPointOfSaleInformation;
  }
  export interface MitVoidRequest {
    clientReferenceInformation?: Ptsv2paymentsClientReferenceInformation;
    paymentInformation?: Ptsv2paymentsidvoidsPaymentInformation;
  }
  export interface OctCreatePaymentRequest {
    clientReferenceInformation?: Ptsv2payoutsClientReferenceInformation;
    orderInformation?: Ptsv2payoutsOrderInformation;
    merchantInformation?: Ptsv2payoutsMerchantInformation;
    recipientInformation?: Ptsv2payoutsRecipientInformation;
    senderInformation?: Ptsv2payoutsSenderInformation;
    processingInformation?: Ptsv2payoutsProcessingInformation;
    paymentInformation?: Ptsv2payoutsPaymentInformation;
  }
  export interface PatchCustomerPaymentInstrumentRequest {
    links?: Tmsv2customersEmbeddedDefaultPaymentInstrumentLinks;
    /**
     * The id of the Payment Instrument Token.
     */
    id?: string;
    /**
     * The type of token.  Valid values: - paymentInstrument
     */
    object?: string;
    /**
     * Issuers state for the card number. Valid values: - ACTIVE - CLOSED : The account has been closed.
     */
    state?: string;
    bankAccount?: Tmsv2customersEmbeddedDefaultPaymentInstrumentBankAccount;
    card?: Tmsv2customersEmbeddedDefaultPaymentInstrumentCard;
    buyerInformation?: Tmsv2customersEmbeddedDefaultPaymentInstrumentBuyerInformation;
    billTo?: Tmsv2customersEmbeddedDefaultPaymentInstrumentBillTo;
    processingInformation?: Tmsv2customersEmbeddedDefaultPaymentInstrumentProcessingInformation;
    merchantInformation?: Tmsv2customersEmbeddedDefaultPaymentInstrumentMerchantInformation;
    instrumentIdentifier?: Tmsv2customersEmbeddedDefaultPaymentInstrumentInstrumentIdentifier;
    metadata?: Tmsv2customersEmbeddedDefaultPaymentInstrumentMetadata;
    embedded?: Tmsv2customersEmbeddedDefaultPaymentInstrumentEmbedded;
  }
  export interface PatchCustomerRequest {
    links?: Tmsv2customersLinks;
    /**
     * The id of the Customer Token.
     */
    id?: string;
    objectInformation?: Tmsv2customersObjectInformation;
    buyerInformation?: Tmsv2customersBuyerInformation;
    clientReferenceInformation?: Tmsv2customersClientReferenceInformation;
    /**
     * Object containing the custom data that the merchant defines.
     */
    merchantDefinedInformation?: Array<Tmsv2customersMerchantDefinedInformation>;
    defaultPaymentInstrument?: Tmsv2customersDefaultPaymentInstrument;
    defaultShippingAddress?: Tmsv2customersDefaultShippingAddress;
    metadata?: Tmsv2customersMetadata;
    embedded?: Tmsv2customersEmbedded;
  }
  export interface PatchCustomerShippingAddressRequest {
    links?: Tmsv2customersEmbeddedDefaultShippingAddressLinks;
    /**
     * The id of the Shipping Address Token.
     */
    id?: string;
    shipTo?: Tmsv2customersEmbeddedDefaultShippingAddressShipTo;
    metadata?: Tmsv2customersEmbeddedDefaultShippingAddressMetadata;
  }
  export interface PatchInstrumentIdentifierRequest {
    links?: Tmsv2customersEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierLinks;
    /**
     * The id of the Instrument Identifier Token.
     */
    id?: string;
    /**
     * The type of token.  Valid values: - instrumentIdentifier
     */
    object?: string;
    /**
     * Issuers state for the card number. Valid values: - ACTIVE - CLOSED : The account has been closed.
     */
    state?: string;
    /**
     * The type of Instrument Identifier. Valid values: - enrollable card
     */
    type?: string;
    card?: Tmsv2customersEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierCard;
    bankAccount?: Tmsv2customersEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierBankAccount;
    tokenizedCard?: Tmsv2customersEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierTokenizedCard;
    issuer?: Tmsv2customersEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierIssuer;
    processingInformation?: Tmsv2customersEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierProcessingInformation;
    billTo?: Tmsv2customersEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierBillTo;
    metadata?: Tmsv2customersEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierMetadata;
  }
  export interface PatchPaymentInstrumentRequest {
    links?: Tmsv2customersEmbeddedDefaultPaymentInstrumentLinks;
    /**
     * The id of the Payment Instrument Token.
     */
    id?: string;
    /**
     * The type of token.  Valid values: - paymentInstrument
     */
    object?: string;
    /**
     * Issuers state for the card number. Valid values: - ACTIVE - CLOSED : The account has been closed.
     */
    state?: string;
    bankAccount?: Tmsv2customersEmbeddedDefaultPaymentInstrumentBankAccount;
    card?: Tmsv2customersEmbeddedDefaultPaymentInstrumentCard;
    buyerInformation?: Tmsv2customersEmbeddedDefaultPaymentInstrumentBuyerInformation;
    billTo?: Tmsv2customersEmbeddedDefaultPaymentInstrumentBillTo;
    processingInformation?: Tmsv2customersEmbeddedDefaultPaymentInstrumentProcessingInformation;
    merchantInformation?: Tmsv2customersEmbeddedDefaultPaymentInstrumentMerchantInformation;
    instrumentIdentifier?: Tmsv2customersEmbeddedDefaultPaymentInstrumentInstrumentIdentifier;
    metadata?: Tmsv2customersEmbeddedDefaultPaymentInstrumentMetadata;
    embedded?: Tmsv2customersEmbeddedDefaultPaymentInstrumentEmbedded;
  }
  export interface PayerAuthSetupRequest {
    clientReferenceInformation?: Riskv1authenticationsetupsClientReferenceInformation;
    paymentInformation?: Riskv1authenticationsetupsPaymentInformation;
    processingInformation?: Riskv1authenticationsetupsProcessingInformation;
    tokenInformation?: Riskv1authenticationsetupsTokenInformation;
  }
  export interface PaymentInstrumentListForCustomer {
    links?: PaymentInstrumentListForCustomerLinks;
    /**
     * The offset parameter supplied in the request.
     */
    offset?: number;
    /**
     * The limit parameter supplied in the request.
     */
    limit?: number;
    /**
     * The number of Payment Instruments returned in the array.
     */
    count?: number;
    /**
     * The total number of Payment Instruments associated with the Customer or Instrument Identifier.
     */
    total?: number;
    embedded?: PaymentInstrumentListForCustomerEmbedded;
  }
  /**
   * Payment Instrument Resources.
   */
  export interface PaymentInstrumentListForCustomerEmbedded {
    paymentInstruments?: Array<Tmsv2customersEmbeddedDefaultPaymentInstrument>;
  }
  export interface PaymentInstrumentListForCustomerLinks {
    self?: PaymentInstrumentListForCustomerLinksSelf;
    first?: PaymentInstrumentListForCustomerLinksFirst;
    prev?: PaymentInstrumentListForCustomerLinksPrev;
    next?: PaymentInstrumentListForCustomerLinksNext;
    last?: PaymentInstrumentListForCustomerLinksLast;
  }
  export interface PaymentInstrumentListForCustomerLinksFirst {
    /**
     * Link to the first page.
     */
    href?: string;
  }
  export interface PaymentInstrumentListForCustomerLinksLast {
    /**
     * Link to the last page.
     */
    href?: string;
  }
  export interface PaymentInstrumentListForCustomerLinksNext {
    /**
     * Link to the next page.
     */
    href?: string;
  }
  export interface PaymentInstrumentListForCustomerLinksPrev {
    /**
     * Link to the previous page.
     */
    href?: string;
  }
  export interface PaymentInstrumentListForCustomerLinksSelf {
    /**
     * Link to the current page.
     */
    href?: string;
  }
  export interface PaymentInstrumentListForInstrumentIdentifier {
    links?: PaymentInstrumentListForCustomerLinks;
    /**
     * The offset parameter supplied in the request.
     */
    offset?: number;
    /**
     * The limit parameter supplied in the request.
     */
    limit?: number;
    /**
     * The number of Payment Instruments returned in the array.
     */
    count?: number;
    /**
     * The total number of Payment Instruments associated with the Customer or Instrument Identifier.
     */
    total?: number;
    embedded?: PaymentInstrumentListForInstrumentIdentifierEmbedded;
  }
  /**
   * Payment Instrument Resources.
   */
  export interface PaymentInstrumentListForInstrumentIdentifierEmbedded {
    paymentInstruments?: Array<PaymentInstrumentListForInstrumentIdentifierEmbeddedPaymentInstruments>;
  }
  /**
   * Additional resources for the Payment Instrument token.
   */
  export interface PaymentInstrumentListForInstrumentIdentifierEmbeddedEmbedded {
    instrumentIdentifier?: PatchInstrumentIdentifierRequest;
  }
  export interface PaymentInstrumentListForInstrumentIdentifierEmbeddedPaymentInstruments {
    links?: Tmsv2customersEmbeddedDefaultPaymentInstrumentLinks;
    /**
     * The id of the Payment Instrument Token.
     */
    id?: string;
    /**
     * The type of token.  Valid values: - paymentInstrument
     */
    object?: string;
    /**
     * Issuers state for the card number. Valid values: - ACTIVE - CLOSED : The account has been closed.
     */
    state?: string;
    bankAccount?: Tmsv2customersEmbeddedDefaultPaymentInstrumentBankAccount;
    card?: Tmsv2customersEmbeddedDefaultPaymentInstrumentCard;
    buyerInformation?: Tmsv2customersEmbeddedDefaultPaymentInstrumentBuyerInformation;
    billTo?: Tmsv2customersEmbeddedDefaultPaymentInstrumentBillTo;
    processingInformation?: Tmsv2customersEmbeddedDefaultPaymentInstrumentProcessingInformation;
    merchantInformation?: Tmsv2customersEmbeddedDefaultPaymentInstrumentMerchantInformation;
    instrumentIdentifier?: Tmsv2customersEmbeddedDefaultPaymentInstrumentInstrumentIdentifier;
    metadata?: Tmsv2customersEmbeddedDefaultPaymentInstrumentMetadata;
    embedded?: PaymentInstrumentListForInstrumentIdentifierEmbeddedEmbedded;
  }
  export interface PostCustomerPaymentInstrumentRequest {
    links?: Tmsv2customersEmbeddedDefaultPaymentInstrumentLinks;
    /**
     * The id of the Payment Instrument Token.
     */
    id?: string;
    /**
     * The type of token.  Valid values: - paymentInstrument
     */
    object?: string;
    /**
     * Issuers state for the card number. Valid values: - ACTIVE - CLOSED : The account has been closed.
     */
    state?: string;
    bankAccount?: Tmsv2customersEmbeddedDefaultPaymentInstrumentBankAccount;
    card?: Tmsv2customersEmbeddedDefaultPaymentInstrumentCard;
    buyerInformation?: Tmsv2customersEmbeddedDefaultPaymentInstrumentBuyerInformation;
    billTo?: Tmsv2customersEmbeddedDefaultPaymentInstrumentBillTo;
    processingInformation?: Tmsv2customersEmbeddedDefaultPaymentInstrumentProcessingInformation;
    merchantInformation?: Tmsv2customersEmbeddedDefaultPaymentInstrumentMerchantInformation;
    instrumentIdentifier?: Tmsv2customersEmbeddedDefaultPaymentInstrumentInstrumentIdentifier;
    metadata?: Tmsv2customersEmbeddedDefaultPaymentInstrumentMetadata;
    embedded?: Tmsv2customersEmbeddedDefaultPaymentInstrumentEmbedded;
  }
  export interface PostCustomerRequest {
    links?: Tmsv2customersLinks;
    /**
     * The id of the Customer Token.
     */
    id?: string;
    objectInformation?: Tmsv2customersObjectInformation;
    buyerInformation?: Tmsv2customersBuyerInformation;
    clientReferenceInformation?: Tmsv2customersClientReferenceInformation;
    /**
     * Object containing the custom data that the merchant defines.
     */
    merchantDefinedInformation?: Array<Tmsv2customersMerchantDefinedInformation>;
    defaultPaymentInstrument?: Tmsv2customersDefaultPaymentInstrument;
    defaultShippingAddress?: Tmsv2customersDefaultShippingAddress;
    metadata?: Tmsv2customersMetadata;
    embedded?: Tmsv2customersEmbedded;
  }
  export interface PostCustomerShippingAddressRequest {
    links?: Tmsv2customersEmbeddedDefaultShippingAddressLinks;
    /**
     * The id of the Shipping Address Token.
     */
    id?: string;
    shipTo?: Tmsv2customersEmbeddedDefaultShippingAddressShipTo;
    metadata?: Tmsv2customersEmbeddedDefaultShippingAddressMetadata;
  }
  export interface PostInstrumentIdentifierRequest {
    links?: Tmsv2customersEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierLinks;
    /**
     * The id of the Instrument Identifier Token.
     */
    id?: string;
    /**
     * The type of token.  Valid values: - instrumentIdentifier
     */
    object?: string;
    /**
     * Issuers state for the card number. Valid values: - ACTIVE - CLOSED : The account has been closed.
     */
    state?: string;
    /**
     * The type of Instrument Identifier. Valid values: - enrollable card
     */
    type?: string;
    card?: Tmsv2customersEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierCard;
    bankAccount?: Tmsv2customersEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierBankAccount;
    tokenizedCard?: Tmsv2customersEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierTokenizedCard;
    issuer?: Tmsv2customersEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierIssuer;
    processingInformation?: Tmsv2customersEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierProcessingInformation;
    billTo?: Tmsv2customersEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierBillTo;
    metadata?: Tmsv2customersEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierMetadata;
  }
  export interface PostPaymentInstrumentRequest {
    links?: Tmsv2customersEmbeddedDefaultPaymentInstrumentLinks;
    /**
     * The id of the Payment Instrument Token.
     */
    id?: string;
    /**
     * The type of token.  Valid values: - paymentInstrument
     */
    object?: string;
    /**
     * Issuers state for the card number. Valid values: - ACTIVE - CLOSED : The account has been closed.
     */
    state?: string;
    bankAccount?: Tmsv2customersEmbeddedDefaultPaymentInstrumentBankAccount;
    card?: Tmsv2customersEmbeddedDefaultPaymentInstrumentCard;
    buyerInformation?: Tmsv2customersEmbeddedDefaultPaymentInstrumentBuyerInformation;
    billTo?: Tmsv2customersEmbeddedDefaultPaymentInstrumentBillTo;
    processingInformation?: Tmsv2customersEmbeddedDefaultPaymentInstrumentProcessingInformation;
    merchantInformation?: Tmsv2customersEmbeddedDefaultPaymentInstrumentMerchantInformation;
    instrumentIdentifier?: Tmsv2customersEmbeddedDefaultPaymentInstrumentInstrumentIdentifier;
    metadata?: Tmsv2customersEmbeddedDefaultPaymentInstrumentMetadata;
    embedded?: Tmsv2customersEmbeddedDefaultPaymentInstrumentEmbedded;
  }
  export interface PredefinedSubscriptionRequestBean {
    /**
     * Valid Report Definition Name
     */
    reportDefinitionName: string;
    /**
     * The subscription type for which report definition is required. Valid values are CLASSIC and STANDARD. Valid Values:   - CLASSIC   - STANDARD
     */
    subscriptionType: string;
    reportName?: string;
    /**
     * Report Format             Valid Values:   - application/xml   - text/csv
     */
    reportMimeType?: string;
    /**
     * 'The frequency for which subscription is created. For Standard we can have DAILY, WEEKLY and MONTHLY. But for Classic we will have only DAILY.' **NOTE: Do not document USER_DEFINED Frequency field in developer center** Valid Values: - 'DAILY' - 'WEEKLY' - 'MONTHLY' - 'USER_DEFINED'
     */
    reportFrequency?: string;
    /**
     * If the reportFrequency is User-defined, reportInterval should be in **ISO 8601 time format** Please refer the following link to know more about ISO 8601 format.[Rfc Time Format](https://en.wikipedia.org/wiki/ISO_8601#Durations)  **Example time format for 2 hours and 30 Mins:**   - PT2H30M **NOTE: Do not document reportInterval field in developer center**
     */
    reportInterval?: string;
    /**
     * By Default the timezone for Standard subscription is PST. And for Classic subscription it will be GMT. If user provides any other time zone apart from PST for Standard subscription api should error out.
     */
    timezone?: string;
    /**
     * The hour at which the report generation should start. It should be in hhmm format. By Default it will be 0000. The format is 24 hours format.
     */
    startTime?: string;
    /**
     * This is the start day if the frequency is WEEKLY or MONTHLY. The value varies from 1-7 for WEEKLY and 1-31 for MONTHLY. For WEEKLY 1 means Sunday and 7 means Saturday. By default the value is 1.
     */
    startDay?: number;
    /**
     * The status for subscription which is either created or updated. By default it is ACTIVE. Valid Values:   - ACTIVE   - INACTIVE
     */
    subscriptionStatus?: string;
  }
  export interface PtsV1TransactionBatchesGet200Response {
    transactionBatches?: Array<PtsV1TransactionBatchesGet200ResponseTransactionBatches>;
    links?: PtsV1TransactionBatchesGet200ResponseLinks;
    /**
     * Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ` **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The `T` separates the date and the time. The `Z` indicates UTC.  Returned by authorization service.  #### PIN debit Time when the PIN debit credit, PIN debit purchase or PIN debit reversal was requested.  Returned by PIN debit credit, PIN debit purchase or PIN debit reversal.
     */
    submitTimeUtc?: string;
  }
  export interface PtsV1TransactionBatchesGet200ResponseLinks {
    self?: PtsV1TransactionBatchesGet200ResponseLinksSelf;
  }
  export interface PtsV1TransactionBatchesGet200ResponseLinksSelf {
    href?: string;
    method?: string;
  }
  export interface PtsV1TransactionBatchesGet200ResponseTransactionBatches {
    /**
     * Unique identifier assigned to the batch file.
     */
    id?: string;
    /**
     * Date when the batch template was update.
     */
    uploadDate?: string;
    /**
     * The date when the batch template processing completed.
     */
    completionDate?: string;
    /**
     * Number of transactions in the transaction.
     */
    transactionCount?: number;
    /**
     * Number of transactions accepted.
     */
    acceptedTransactionCount?: number;
    /**
     * Number of transactions rejected.
     */
    rejectedTransactionCount?: string;
    /**
     * The status of you batch template processing.
     */
    status?: string;
  }
  export interface PtsV1TransactionBatchesGet400Response {
    errorInformation?: PtsV1TransactionBatchesGet400ResponseErrorInformation;
    /**
     * Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ` **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The `T` separates the date and the time. The `Z` indicates UTC.  Returned by authorization service.  #### PIN debit Time when the PIN debit credit, PIN debit purchase or PIN debit reversal was requested.  Returned by PIN debit credit, PIN debit purchase or PIN debit reversal.
     */
    submitTimeUtc?: string;
  }
  export interface PtsV1TransactionBatchesGet400ResponseErrorInformation {
    reason?: string;
    message?: string;
    details?: Array<PtsV1TransactionBatchesGet400ResponseErrorInformationDetails>;
  }
  export interface PtsV1TransactionBatchesGet400ResponseErrorInformationDetails {
    /**
     * This is the flattened JSON object field name/path that is either missing or invalid.
     */
    field?: string;
    /**
     * The detailed message related to the status and reason listed above.
     */
    message?: string;
  }
  export interface PtsV1TransactionBatchesGet500Response {
    errorInformation?: PtsV1TransactionBatchesGet500ResponseErrorInformation;
    /**
     * Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ` **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The `T` separates the date and the time. The `Z` indicates UTC.  Returned by authorization service.  #### PIN debit Time when the PIN debit credit, PIN debit purchase or PIN debit reversal was requested.  Returned by PIN debit credit, PIN debit purchase or PIN debit reversal.
     */
    submitTimeUtc?: string;
  }
  export interface PtsV1TransactionBatchesGet500ResponseErrorInformation {
    /**
     * The reason of status
     */
    reason?: string;
    /**
     * The detailed message related to the status and reason listed above.
     */
    message?: string;
  }
  export interface PtsV1TransactionBatchesIdGet200Response {
    /**
     * Unique identifier assigned to the batch file.
     */
    id?: string;
    /**
     * Date when the batch template was update.
     */
    uploadDate?: string;
    /**
     * The date when the batch template processing completed.
     */
    completionDate?: string;
    /**
     * Number of transactions in the transaction.
     */
    transactionCount?: number;
    /**
     * Number of transactions accepted.
     */
    acceptedTransactionCount?: number;
    /**
     * Number of transactions rejected.
     */
    rejectedTransactionCount?: string;
    /**
     * The status of you batch template processing.
     */
    status?: string;
    links?: PtsV1TransactionBatchesIdGet200ResponseLinks;
  }
  export interface PtsV1TransactionBatchesIdGet200ResponseLinks {
    transactions?: Array<PtsV1TransactionBatchesIdGet200ResponseLinksTransactions>;
  }
  export interface PtsV1TransactionBatchesIdGet200ResponseLinksTransactions {
    /**
     * Self link for this request
     */
    href?: string;
    method?: string;
  }
  export interface PtsV2CreditsPost201Response {
    links?: PtsV2PaymentsRefundPost201ResponseLinks;
    /**
     * An unique identification number to identify the submitted request. It is also appended to the endpoint of the resource.  On incremental authorizations, this value with be the same as the identification number returned in the original authorization response.  #### PIN debit Returned for all PIN debit services.
     */
    id?: string;
    /**
     * Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ` **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The `T` separates the date and the time. The `Z` indicates UTC.  Returned by authorization service.  #### PIN debit Time when the PIN debit credit, PIN debit purchase or PIN debit reversal was requested.  Returned by PIN debit credit, PIN debit purchase or PIN debit reversal.
     */
    submitTimeUtc?: string;
    /**
     * The status of the submitted transaction.  Possible values:  - PENDING  - COMPLETED (as in the case of PIN Debit Full Financial Credit)
     */
    status?: string;
    /**
     * Reference number for the transaction. This value is not returned for all processors.  Returned by authorization service.  ##### PIN debit Returned by PIN debit credit, PIN debit purchase, and PIN debit reversal.  #### Atos Positive string (6)  #### All other processors String (60)
     */
    reconciliationId?: string;
    clientReferenceInformation?: PtsV2PaymentsPost201ResponseClientReferenceInformation;
    creditAmountDetails?: PtsV2CreditsPost201ResponseCreditAmountDetails;
    processingInformation?: PtsV2CreditsPost201ResponseProcessingInformation;
    processorInformation?: PtsV2PaymentsRefundPost201ResponseProcessorInformation;
    paymentInformation?: PtsV2CreditsPost201ResponsePaymentInformation;
    orderInformation?: PtsV2PaymentsRefundPost201ResponseOrderInformation;
    pointOfSaleInformation?: PtsV2PaymentsCapturesPost201ResponsePointOfSaleInformation;
  }
  export interface PtsV2CreditsPost201ResponseCreditAmountDetails {
    /**
     * Amount that was credited to the cardholder’s account.  Returned by PIN debit credit.
     */
    creditAmount?: string;
    /**
     * Currency used for the order. Use the three-character [ISO Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf)  #### Used by **Authorization** Required field.  **Authorization Reversal** For an authorization reversal (`reversalInformation`) or a capture (`processingOptions.capture` is set to `true`), you must use the same currency that you used in your payment authorization request.  #### PIN Debit Currency for the amount you requested for the PIN debit purchase. This value is returned for partial authorizations. The issuing bank can approve a partial amount if the balance on the debit card is less than the requested transaction amount. For the possible values, see the [ISO Standard Currency Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/currencies.pdf). Returned by PIN debit purchase.  For PIN debit reversal requests, you must use the same currency that was used for the PIN debit purchase or PIN debit credit that you are reversing. For the possible values, see the [ISO Standard Currency Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/currencies.pdf).  Required field for PIN Debit purchase and PIN Debit credit requests. Optional field for PIN Debit reversal requests.  #### GPX This field is optional for reversing an authorization or credit.  #### DCC for First Data Your local currency. For details, see the `currency` field description in [Dynamic Currency Conversion For First Data Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/DCC_FirstData_SCMP/DCC_FirstData_SCMP_API.pdf).  #### Tax Calculation Required for international tax and value added tax only. Optional for U.S. and Canadian taxes. Your local currency.
     */
    currency?: string;
  }
  export interface PtsV2CreditsPost201ResponsePaymentInformation {
    bank?: PtsV2PaymentsPost201ResponsePaymentInformationBank;
    customer?: Ptsv2paymentsPaymentInformationCustomer;
    paymentInstrument?: Ptsv2paymentsPaymentInformationPaymentInstrument;
    instrumentIdentifier?: PtsV2PaymentsPost201ResponsePaymentInformationInstrumentIdentifier;
    shippingAddress?: Ptsv2paymentsPaymentInformationShippingAddress;
  }
  export interface PtsV2CreditsPost201ResponseProcessingInformation {
    bankTransferOptions?: PtsV2CreditsPost201ResponseProcessingInformationBankTransferOptions;
    /**
     * The possible values for the reply field are: - `true` : the airline data was included in the request to the processor. - `false` : the airline data was not included in the request to the processor.  Returned by authorization, capture, or credit services.
     */
    enhancedDataEnabled?: boolean;
  }
  export interface PtsV2CreditsPost201ResponseProcessingInformationBankTransferOptions {
    /**
     * Method used for settlement.  Possible values: - `A`: Automated Clearing House (default for credits and for transactions using Canadian dollars) - `F`: Facsimile draft (U.S. dollars only) - `B`: Best possible (U.S. dollars only) (default if the field has not already been configured for your merchant ID)  For details, see `ecp_settlement_method` field description for credit cars and `ecp_debit_settlement_method` for debit cards in the [Electronic Check Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/EChecks_SCMP_API/html/)
     */
    settlementMethod?: string;
  }
  export interface PtsV2IncrementalAuthorizationPatch201Response {
    links?: PtsV2IncrementalAuthorizationPatch201ResponseLinks;
    /**
     * An unique identification number to identify the submitted request. It is also appended to the endpoint of the resource.  On incremental authorizations, this value with be the same as the identification number returned in the original authorization response.  #### PIN debit Returned for all PIN debit services.
     */
    id?: string;
    /**
     * Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ` **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The `T` separates the date and the time. The `Z` indicates UTC.  Returned by authorization service.  #### PIN debit Time when the PIN debit credit, PIN debit purchase or PIN debit reversal was requested.  Returned by PIN debit credit, PIN debit purchase or PIN debit reversal.
     */
    submitTimeUtc?: string;
    /**
     * The status of the submitted transaction.  Possible values:  - AUTHORIZED  - AUTHORIZED_PENDING_REVIEW  - DECLINED
     */
    status?: string;
    /**
     * Reference number for the transaction. This value is not returned for all processors.  Returned by authorization service.  ##### PIN debit Returned by PIN debit credit, PIN debit purchase, and PIN debit reversal.  #### Atos Positive string (6)  #### All other processors String (60)
     */
    reconciliationId?: string;
    errorInformation?: PtsV2IncrementalAuthorizationPatch201ResponseErrorInformation;
    clientReferenceInformation?: PtsV2IncrementalAuthorizationPatch201ResponseClientReferenceInformation;
    processorInformation?: PtsV2IncrementalAuthorizationPatch201ResponseProcessorInformation;
    paymentInformation?: PtsV2IncrementalAuthorizationPatch201ResponsePaymentInformation;
    orderInformation?: PtsV2IncrementalAuthorizationPatch201ResponseOrderInformation;
  }
  export interface PtsV2IncrementalAuthorizationPatch201ResponseClientReferenceInformation {
    /**
     * Merchant-generated order reference or tracking number. It is recommended that you send a unique value for each transaction so that you can perform meaningful searches for the transaction.  #### Used by **Authorization** Required field.  #### PIN Debit Requests for PIN debit reversals need to use the same merchant reference number that was used in the transaction that is being reversed.  Required field for all PIN Debit requests (purchase, credit, and reversal).  #### FDC Nashville Global Certain circumstances can cause the processor to truncate this value to 15 or 17 characters for Level II and Level III processing, which can cause a discrepancy between the value you submit and the value included in some processor reports.
     */
    code?: string;
  }
  export interface PtsV2IncrementalAuthorizationPatch201ResponseErrorInformation {
    /**
     * The reason of the status.  Possible values:   - AVS_FAILED   - CONTACT_PROCESSOR   - EXPIRED_CARD   - PROCESSOR_DECLINED   - INSUFFICIENT_FUND   - STOLEN_LOST_CARD   - ISSUER_UNAVAILABLE   - UNAUTHORIZED_CARD   - CVN_NOT_MATCH   - EXCEEDS_CREDIT_LIMIT   - INVALID_CVN   - BLACKLISTED_CUSTOMER   - SUSPENDED_ACCOUNT   - PAYMENT_REFUSED   - CV_FAILED   - INVALID_ACCOUNT   - GENERAL_DECLINE   - INVALID_MERCHANT_CONFIGURATION   - DECISION_PROFILE_REJECT   - SCORE_EXCEEDS_THRESHOLD   - PENDING_AUTHENTICATION
     */
    reason?: string;
    /**
     * The detail message related to the status and reason listed above.
     */
    message?: string;
    details?: Array<PtsV2PaymentsPost201ResponseErrorInformationDetails>;
  }
  export interface PtsV2IncrementalAuthorizationPatch201ResponseLinks {
    self?: PtsV2PaymentsPost201ResponseLinksSelf;
  }
  export interface PtsV2IncrementalAuthorizationPatch201ResponseOrderInformation {
    amountDetails?: PtsV2PaymentsPost201ResponseOrderInformationAmountDetails;
  }
  export interface PtsV2IncrementalAuthorizationPatch201ResponsePaymentInformation {
    accountFeatures?: PtsV2IncrementalAuthorizationPatch201ResponsePaymentInformationAccountFeatures;
  }
  export interface PtsV2IncrementalAuthorizationPatch201ResponsePaymentInformationAccountFeatures {
    /**
     * #### GPX Mastercard product ID associated with the primary account number (PAN). Returned by authorization service.  #### CyberSource through VisaNet Visa or Mastercard product ID that is associated with the primary account number (PAN). For descriptions of the Visa product IDs, see the Product ID table on the [Visa Request & Response Codes web page.](https://developer.visa.com/guides/request_response_codes)  Data Length: String (3)  #### GPN Visa or Mastercard product ID that is associated with the primary account number (PAN). For descriptions of the Visa product IDs, see the Product ID table on the [Visa Request & Response Codes web page.](https://developer.visa.com/guides/request_response_codes)  Data Length: String (3)  #### Worldpay VAP **Important** Before using this field on Worldpay VAP, you must contact CyberSource Customer Support to have your account configured for this feature.  Type of card used in the transaction. The only possible value is: - `PREPAID`: Prepaid Card  Data Length: String (7)  #### RBS WorldPay Atlanta Type of card used in the transaction. Possible values: - `B`: Business Card - `O`: Noncommercial Card - `R`: Corporate Card - `S`: Purchase Card - `Blank`: Purchase card not supported  Data Length: String (1)
     */
    category?: string;
  }
  export interface PtsV2IncrementalAuthorizationPatch201ResponseProcessorInformation {
    /**
     * Authorization code. Returned only when the processor returns this value.  The length of this value depends on your processor.  Returned by authorization service.  #### PIN debit Authorization code that is returned by the processor.  Returned by PIN debit credit.  #### Elavon Encrypted Account Number Program The returned value is OFFLINE.  #### TSYS Acquiring Solutions The returned value for a successful zero amount authorization is 000000.
     */
    approvalCode?: string;
    /**
     * Network transaction identifier (TID). You can use this value to identify a specific transaction when you are discussing the transaction with your processor. Not all processors provide this value.  Returned by the authorization service.  #### PIN debit Transaction identifier generated by the processor.  Returned by PIN debit credit.  #### GPX Processor transaction ID.  #### Cielo For Cielo, this value is the non-sequential unit (NSU) and is supported for all transactions. The value is generated by Cielo or the issuing bank.  #### Comercio Latino For Comercio Latino, this value is the proof of sale or non-sequential unit (NSU) number generated by the acquirers Cielo and Rede, or the issuing bank.  #### CyberSource through VisaNet and GPN For details about this value for CyberSource through VisaNet and GPN, see \"Network Transaction Identifiers\" in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  #### Moneris This value identifies the transaction on a host system. It contains the following information: - Terminal used to process the transaction - Shift during which the transaction took place - Batch number - Transaction number within the batch You must store this value. If you give the customer a receipt, display this value on the receipt.  **Example** For the value 66012345001069003: - Terminal ID = 66012345 - Shift number = 001 - Batch number = 069 - Transaction number = 003
     */
    transactionId?: string;
    /**
     * For most processors, this is the error message sent directly from the bank. Returned only when the processor returns this value.  **Important** Do not use this field to evaluate the result of the authorization.  #### PIN debit Response value that is returned by the processor or bank. **Important** Do not use this field to evaluate the results of the transaction request.  Returned by PIN debit credit, PIN debit purchase, and PIN debit reversal.  #### AIBMS If this value is `08`, you can accept the transaction if the customer provides you with identification.  #### Atos This value is the response code sent from Atos and it might also include the response code from the bank. Format: `aa,bb` with the two values separated by a comma and where: - `aa` is the two-digit error message from Atos. - `bb` is the optional two-digit error message from the bank.  #### Comercio Latino This value is the status code and the error or response code received from the processor separated by a colon. Format: [status code]:E[error code] or [status code]:R[response code] Example `2:R06`  #### JCN Gateway Processor-defined detail error code. The associated response category code is in the `processorInformation.responseCategoryCode` field. String (3)
     */
    responseCode?: string;
    /**
     * This field is returned only for **American Express Direct** and **CyberSource through VisaNet**. Returned by authorization and incremental authorization services.  #### American Express Direct  System trace audit number (STAN). This value identifies the transaction and is useful when investigating a chargeback dispute.  #### CyberSource through VisaNet  System trace number that must be printed on the customer’s receipt.
     */
    systemTraceAuditNumber?: string;
    /**
     * This field might contain information about a decline. This field is supported only for **CyberSource through VisaNet**.
     */
    responseDetails?: string;
    merchantAdvice?: PtsV2PaymentsPost201ResponseProcessorInformationMerchantAdvice;
  }
  export interface PtsV2IncrementalAuthorizationPatch400Response {
    /**
     * Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ` **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The `T` separates the date and the time. The `Z` indicates UTC.  Returned by authorization service.  #### PIN debit Time when the PIN debit credit, PIN debit purchase or PIN debit reversal was requested.  Returned by PIN debit credit, PIN debit purchase or PIN debit reversal.
     */
    submitTimeUtc?: string;
    /**
     * The status of the submitted transaction.  Possible values:  - INVALID_REQUEST
     */
    status?: string;
    /**
     * The reason of the status.  Possible values:  - MISSING_FIELD  - INVALID_DATA  - DUPLICATE_REQUEST  - INVALID_CARD  - CARD_TYPE_NOT_ACCEPTED  - INVALID_MERCHANT_CONFIGURATION  - PROCESSOR_UNAVAILABLE  - INVALID_PAYMENT_ID
     */
    reason?: string;
    /**
     * The detail message related to the status and reason listed above.
     */
    message?: string;
    details?: Array<PtsV2PaymentsPost201ResponseErrorInformationDetails>;
  }
  export interface PtsV2PaymentsCapturesPost201Response {
    links?: PtsV2PaymentsCapturesPost201ResponseLinks;
    /**
     * An unique identification number to identify the submitted request. It is also appended to the endpoint of the resource.  On incremental authorizations, this value with be the same as the identification number returned in the original authorization response.  #### PIN debit Returned for all PIN debit services.
     */
    id?: string;
    /**
     * Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ` **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The `T` separates the date and the time. The `Z` indicates UTC.  Returned by authorization service.  #### PIN debit Time when the PIN debit credit, PIN debit purchase or PIN debit reversal was requested.  Returned by PIN debit credit, PIN debit purchase or PIN debit reversal.
     */
    submitTimeUtc?: string;
    /**
     * The status of the submitted transaction.  Possible values:  - PENDING
     */
    status?: string;
    /**
     * Reference number for the transaction. This value is not returned for all processors.  Returned by authorization service.  ##### PIN debit Returned by PIN debit credit, PIN debit purchase, and PIN debit reversal.  #### Atos Positive string (6)  #### All other processors String (60)
     */
    reconciliationId?: string;
    clientReferenceInformation?: PtsV2PaymentsPost201ResponseClientReferenceInformation;
    processorInformation?: PtsV2PaymentsCapturesPost201ResponseProcessorInformation;
    orderInformation?: PtsV2PaymentsCapturesPost201ResponseOrderInformation;
    pointOfSaleInformation?: PtsV2PaymentsCapturesPost201ResponsePointOfSaleInformation;
    processingInformation?: PtsV2PaymentsCapturesPost201ResponseProcessingInformation;
  }
  export interface PtsV2PaymentsCapturesPost201ResponseLinks {
    self?: PtsV2PaymentsPost201ResponseLinksSelf;
    _void?: PtsV2PaymentsPost201ResponseLinksSelf;
    refund?: PtsV2PaymentsPost201ResponseLinksSelf;
  }
  export interface PtsV2PaymentsCapturesPost201ResponseOrderInformation {
    amountDetails?: PtsV2PaymentsCapturesPost201ResponseOrderInformationAmountDetails;
    invoiceDetails?: PtsV2PaymentsCapturesPost201ResponseOrderInformationInvoiceDetails;
  }
  export interface PtsV2PaymentsCapturesPost201ResponseOrderInformationAmountDetails {
    /**
     * Amount you requested for the capture.
     */
    totalAmount?: string;
    /**
     * Currency used for the order. Use the three-character [ISO Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf)  #### Used by **Authorization** Required field.  **Authorization Reversal** For an authorization reversal (`reversalInformation`) or a capture (`processingOptions.capture` is set to `true`), you must use the same currency that you used in your payment authorization request.  #### PIN Debit Currency for the amount you requested for the PIN debit purchase. This value is returned for partial authorizations. The issuing bank can approve a partial amount if the balance on the debit card is less than the requested transaction amount. For the possible values, see the [ISO Standard Currency Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/currencies.pdf). Returned by PIN debit purchase.  For PIN debit reversal requests, you must use the same currency that was used for the PIN debit purchase or PIN debit credit that you are reversing. For the possible values, see the [ISO Standard Currency Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/currencies.pdf).  Required field for PIN Debit purchase and PIN Debit credit requests. Optional field for PIN Debit reversal requests.  #### GPX This field is optional for reversing an authorization or credit.  #### DCC for First Data Your local currency. For details, see the `currency` field description in [Dynamic Currency Conversion For First Data Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/DCC_FirstData_SCMP/DCC_FirstData_SCMP_API.pdf).  #### Tax Calculation Required for international tax and value added tax only. Optional for U.S. and Canadian taxes. Your local currency.
     */
    currency?: string;
  }
  export interface PtsV2PaymentsCapturesPost201ResponseOrderInformationInvoiceDetails {
    /**
     * Indicates whether CyberSource sent the Level III information to the processor. The possible values are:  If your account is not enabled for Level III data or if you did not include the purchasing level field in your request, CyberSource does not include the Level III data in the request sent to the processor.  Possible values: - **true** - **false**
     */
    level3TransmissionStatus?: boolean;
  }
  export interface PtsV2PaymentsCapturesPost201ResponsePointOfSaleInformation {
    /**
     * Identifier for the terminal at your retail location. You can define this value yourself, but consult the processor for requirements.  #### CyberSource through VisaNet A list of all possible values is stored in your CyberSource account. If terminal ID validation is enabled for your CyberSource account, the value you send for this field is validated against the list each time you include the field in a request. To enable or disable terminal ID validation, contact CyberSource Customer Support.  When you do not include this field in a request, CyberSource uses the default value that is defined in your CyberSource account.  #### FDC Nashville Global To have your account configured to support this field, contact CyberSource Customer Support. This value must be a value that FDC Nashville Global issued to you.  #### For Payouts This field is applicable for CyberSource through VisaNet.  #### GPX Identifier for the terminal at your retail location. A list of all possible values is stored in your account. If terminal ID validation is enabled for your account, the value you send for this field is validated against the list each time you include the field in a request. To enable or disable terminal ID validation, contact customer support.  When you do not include this field in a request, the default value that is defined in your account is used.  Optional for authorizations.  #### Used by **Authorization** Optional for the following processors. When you do not include this field in a request, the default value that is defined in your account is used.   - American Express Direct   - Credit Mutuel-CIC   - FDC Nashville Global   - SIX - Chase Paymentech Solutions: Optional field. If you include this field in your request, you must also include `pointOfSaleInformation.catLevel`. - FDMS Nashville: The default value that is defined in your account is used. - GPX - OmniPay Direct: Optional field.  For the following processors, this field is not used. - GPN - JCN Gateway - RBS WorldPay Atlanta - TSYS Acquiring Solutions - Worldpay VAP  #### Card Present reply Terminal identifier assigned by the acquirer. This value must be printed on the receipt.
     */
    terminalId?: string;
  }
  export interface PtsV2PaymentsCapturesPost201ResponseProcessingInformation {
    /**
     * The possible values for the reply field are: - `true` : the airline data was included in the request to the processor. - `false` : the airline data was not included in the request to the processor.  Returned by authorization, capture, or credit services.
     */
    enhancedDataEnabled?: boolean;
  }
  export interface PtsV2PaymentsCapturesPost201ResponseProcessorInformation {
    /**
     * Processor transaction ID.  This value identifies the transaction on a host system. This value is supported only for Moneris. It contains this information:   - Terminal used to process the transaction  - Shift during which the transaction took place  - Batch number  - Transaction number within the batch  You must store this value. If you give the customer a receipt, display this value on the receipt.  Example For the value 66012345001069003:   - Terminal ID = 66012345  - Shift number = 001  - Batch number = 069  - Transaction number = 003
     */
    transactionId?: string;
  }
  export interface PtsV2PaymentsCapturesPost400Response {
    /**
     * Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ` **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The `T` separates the date and the time. The `Z` indicates UTC.  Returned by authorization service.  #### PIN debit Time when the PIN debit credit, PIN debit purchase or PIN debit reversal was requested.  Returned by PIN debit credit, PIN debit purchase or PIN debit reversal.
     */
    submitTimeUtc?: string;
    /**
     * The status of the submitted transaction.  Possible values:  - INVALID_REQUEST
     */
    status?: string;
    /**
     * The reason of the status.  Possible values:  - MISSING_FIELD  - INVALID_DATA  - DUPLICATE_REQUEST  - INVALID_MERCHANT_CONFIGURATION  - EXCEEDS_AUTH_AMOUNT  - AUTH_ALREADY_REVERSED  - TRANSACTION_ALREADY_SETTLED  - INVALID_AMOUNT  - MISSING_AUTH  - TRANSACTION_ALREADY_REVERSED_OR_SETTLED
     */
    reason?: string;
    /**
     * The detail message related to the status and reason listed above.
     */
    message?: string;
    details?: Array<PtsV2PaymentsPost201ResponseErrorInformationDetails>;
  }
  export interface PtsV2PaymentsPost201Response {
    links?: PtsV2PaymentsPost201ResponseLinks;
    /**
     * An unique identification number to identify the submitted request. It is also appended to the endpoint of the resource.  On incremental authorizations, this value with be the same as the identification number returned in the original authorization response.  #### PIN debit Returned for all PIN debit services.
     */
    id?: string;
    /**
     * Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ` **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The `T` separates the date and the time. The `Z` indicates UTC.  Returned by authorization service.  #### PIN debit Time when the PIN debit credit, PIN debit purchase or PIN debit reversal was requested.  Returned by PIN debit credit, PIN debit purchase or PIN debit reversal.
     */
    submitTimeUtc?: string;
    /**
     * The status of the submitted transaction.  Possible values:  - AUTHORIZED  - PARTIAL_AUTHORIZED  - AUTHORIZED_PENDING_REVIEW  - AUTHORIZED_RISK_DECLINED  - PENDING_AUTHENTICATION  - PENDING_REVIEW  - DECLINED  - INVALID_REQUEST
     */
    status?: string;
    /**
     * Reference number for the transaction. This value is not returned for all processors.  Returned by authorization service.  ##### PIN debit Returned by PIN debit credit, PIN debit purchase, and PIN debit reversal.  #### Atos Positive string (6)  #### All other processors String (60)
     */
    reconciliationId?: string;
    errorInformation?: PtsV2PaymentsPost201ResponseErrorInformation;
    clientReferenceInformation?: PtsV2PaymentsPost201ResponseClientReferenceInformation;
    processingInformation?: PtsV2PaymentsPost201ResponseProcessingInformation;
    processorInformation?: PtsV2PaymentsPost201ResponseProcessorInformation;
    issuerInformation?: PtsV2PaymentsPost201ResponseIssuerInformation;
    paymentInformation?: PtsV2PaymentsPost201ResponsePaymentInformation;
    orderInformation?: PtsV2PaymentsPost201ResponseOrderInformation;
    pointOfSaleInformation?: PtsV2PaymentsPost201ResponsePointOfSaleInformation;
    installmentInformation?: PtsV2PaymentsPost201ResponseInstallmentInformation;
    tokenInformation?: PtsV2PaymentsPost201ResponseTokenInformation;
    riskInformation?: PtsV2PaymentsPost201ResponseRiskInformation;
    consumerAuthenticationInformation?: PtsV2PaymentsPost201ResponseConsumerAuthenticationInformation;
    httpCode?: number;
  }
  export interface PtsV2PaymentsPost201ResponseClientReferenceInformation {
    /**
     * Merchant-generated order reference or tracking number. It is recommended that you send a unique value for each transaction so that you can perform meaningful searches for the transaction.  #### Used by **Authorization** Required field.  #### PIN Debit Requests for PIN debit reversals need to use the same merchant reference number that was used in the transaction that is being reversed.  Required field for all PIN Debit requests (purchase, credit, and reversal).  #### FDC Nashville Global Certain circumstances can cause the processor to truncate this value to 15 or 17 characters for Level II and Level III processing, which can cause a discrepancy between the value you submit and the value included in some processor reports.
     */
    code?: string;
    /**
     * Date and time at your physical location.  Format: `YYYYMMDDhhmmss`, where YYYY = year, MM = month, DD = day, hh = hour, mm = minutes ss = seconds  #### PIN Debit Optional field for PIN Debit purchase and credit requests.
     */
    submitLocalDateTime?: string;
    /**
     * Merchant ID that was used to create the subscription or customer profile for which the service was requested.  If your CyberSource account is enabled for Recurring Billing, this field is returned only if you are using subscription sharing and if your merchant ID is in the same merchant ID pool as the owner merchant ID.  If your CyberSource account is enabled for Payment Tokenization, this field is returned only if you are using profile sharing and if your merchant ID is in the same merchant ID pool as the owner merchant ID.
     */
    ownerMerchantId?: string;
  }
  export interface PtsV2PaymentsPost201ResponseConsumerAuthenticationInformation {
    accessToken?: string;
    /**
     * Identifies the UI Type the ACS will use to complete the challenge. **NOTE**: Only available for App transactions using the Cardinal Mobile SDK.
     */
    acsRenderingType?: string;
    /**
     * Unique transaction identifier assigned by the ACS to identify a single transaction.
     */
    acsTransactionId?: string;
    /**
     * URL for the card-issuing bank’s authentication form that you receive when the card is enrolled. The value can be very large.
     */
    acsUrl?: string;
    /**
     * Indicates what displays to the customer during the authentication process. This field can contain one of these values: - `ADS`: (Card not enrolled) customer prompted to activate the card during the checkout process. - `ATTEMPTS`: (Attempts processing) Processing briefly displays before the checkout process is completed. - `ENROLLED`: (Card enrolled) the card issuer’s authentication window displays. - `UNKNOWN`: Card enrollment status cannot be determined. - `NOREDIRECT`: (Card not enrolled, authentication unavailable, or error occurred) nothing displays to the customer.  The following values can be returned if you are using rules-based payer authentication. - `RIBA`: The card-issuing bank supports risk-based authentication, but whether the cardholder is likely to be challenged cannot be determined. - `RIBA_PASS`: The card-issuing bank supports risk-based authentication and it is likely that the cardholder will not be challenged to provide credentials, also known as _silent authentication_.  For details about possible values, see `pa_enroll_authentication_path` field description and \"Rules-Based Payer Authentication\" in [CyberSource Payer Authentication Using the SCMP API.] (https://apps.cybersource.com/library/documentation/dev_guides/Payer_Authentication_SCMP_API/html/)
     */
    authenticationPath?: string;
    /**
     * The Base64 encoded JSON Payload of CB specific Authorization Values returned in the challenge Flow
     */
    authorizationPayload?: string;
    /**
     * Payer authentication transaction identifier passed to link the check enrollment and validate authentication messages.
     */
    authenticationTransactionId?: string;
    /**
     * Text provided by the ACS/Issuer to Cardholder during a Frictionless or Decoupled transaction.The Issuer can provide information to Cardholder. For example, “Additional authentication is needed for this transaction, please contact (Issuer Name) at xxx-xxx-xxxx.”. The Issuing Bank can optionally support this value.
     */
    cardholderMessage?: string;
    /**
     * Unique identifier generated by the card-issuing bank for Visa, American Express, JCB, Diners Club, and Discover transactions after the customer is authenticated. The value is in base64. When you request the card authorization service, CyberSource automatically converts the value, not the field name, to the format required by your payment processor.
     */
    cavv?: string;
    /**
     * Field that is returned only when the CAVV is generated, which occurs when paresStatus contains the values Y (successful authentication) or A (attempted authentication). If you use the ATOS processor, send the value of this field in the `cavv_algorithm` request field of the authorization service. This field contains one of these values: - `2`: Visa, American Express, JCB, Diners Club, and Discover - `3`: Mastercard
     */
    cavvAlgorithm?: string;
    /**
     * An indicator as to why the transaction was canceled. Possible Values:  - `01`: Cardholder selected Cancel. - `02`: Reserved for future EMVCo use (values invalid until defined by EMVCo). - `03`: Transaction Timed Out—Decoupled Authentication - `04`: Transaction timed out at ACS—other timeouts - `05`: Transaction Timed out at ACS - First CReq not received by ACS - `06`: Transaction Error - `07`: Unknown - `08`: Transaction Timed Out at SDK
     */
    challengeCancelCode?: string;
    /**
     * Indicates whether a challenge is required in order to complete authentication. **Note** Regional mandates might determine that a challenge is required.  Possible values: - `Y`: Challenge required - `N`: Challenge not required **Note**  Used by the Hybrid integration.
     */
    challengeRequired?: string;
    /**
     * Indicates whether the 3DS Requestor requests the ACS to utilize Decoupled Authentication and agrees to utilize Decoupled Authentication if the ACS confirms its use.  Possible Values:  Y - Decoupled Authentication is supported and preferred if challenge is necessary  N - Do not use Decoupled Authentication  **Default Value**: N
     */
    decoupledAuthenticationIndicator?: string;
    /**
     * The directory server error code indicating a problem with this transaction.
     */
    directoryServerErrorCode?: string;
    /**
     * Directory server text and additional detail about the error for this transaction.
     */
    directoryServerErrorDescription?: string;
    /**
     * Commerce indicator for cards not enrolled. This field contains one of these values: - `internet`: Card not enrolled, or card type not supported by payer authentication. No liability shift. - `js_attempted`: Card not enrolled, but attempt to authenticate is recorded. Liability shift. - `js_failure`: J/Secure directory service is not available. No liability shift. - `spa`: Mastercard card not enrolled in the SecureCode program. No liability shift. - `vbv_attempted`: Card not enrolled, but attempt to authenticate is recorded. Liability shift. - `vbv_failure`: For payment processor Barclays, Streamline, AIBMS, or FDC Germany, you receive this result if Visa’s directory service is not available. No liability shift.
     */
    ecommerceIndicator?: string;
    /**
     * Note This field applies only to non-U.S-issued cards.  For enroll, Numeric electronic commerce indicator (ECI) returned only for Visa, American Express, JCB, Diners Club, and Discover transactions when the card is not enrolled. For more information, see \"Interpreting the Reply,\" page 22.  If you are not using the CyberSource payment services, you must send this value to your payment processor in the subsequent request for card authorization. This field contains one of these values: - `06`: The card can be enrolled. Liability shift. - `07`: The card cannot be enrolled. No liability shift.  For validate, Numeric electronic commerce indicator (ECI) returned only for Visa, American Express, JCB, Diners Club, and Discover transactions. The field is absent when authentication fails. You must send this value to your payment processor in the subsequent request for card authorization. This field contains one of these values: - `05`: Successful authentication - `06`: Authentication attempted - `07`: Failed authentication (No response from the merchant because of a problem.)
     */
    eci?: string;
    /**
     * ECI value that can be returned for Visa, Mastercard, American Express, JCB, Diners Club, and Discover. The field is absent when authentication fails. If your payment processor is Streamline, you must the value of this field instead of the value of `eci` or `ucafCollectionIndicator`.  This field can contain one of these values: - `01`: Authentication attempted (Mastercard) - `02`: Successful authentication (Mastercard) - `05`: Successful authentication (Visa, American Express, JCB, Diners Club, and Discover) - `06`: Authentication attempted (Visa, American Express, JCB, Diners Club, and Discover)
     */
    eciRaw?: string;
    /**
     * This field describes the type of 3DS transaction flow that took place.  It can be one of three possible flows; CH - Challenge FR - Frictionless FD - Frictionless with delegation, (challenge not generated by the issuer but by the scheme on behalf of the issuer).
     */
    effectiveAuthenticationType?: string;
    ivr?: PtsV2PaymentsPost201ResponseConsumerAuthenticationInformationIvr;
    /**
     * The global score calculated by the CB scoring platform and returned to merchants.
     */
    networkScore?: string;
    /**
     * Payer authentication request (PAReq) message that you need to forward to the ACS. The value can be very large. The value is in base64.
     */
    pareq?: string;
    /**
     * Raw result of the authentication check. If you are configured for Asia, Middle East, and Africa Gateway Processing, you need to send the value of this field in your authorization request. This field can contain one of these values: - `A`: Proof of authentication attempt was generated. - `N`: Customer failed or canceled authentication. Transaction denied. - `U`: Authentication not completed regardless of the reason. - `Y`: Customer was successfully authenticated.
     */
    paresStatus?: string;
    /**
     * Date and time of the enrollment check combined with the VEReq and VERes elements. If you ever need to show proof of enrollment checking, you may need to parse the string for the information required by the payment card company. The value can be very large. For details about possible values, see the `pa_enroll_proofxml` field description in [CyberSource Payer Authentication Using the SCMP API.] (https://apps.cybersource.com/library/documentation/dev_guides/Payer_Authentication_SCMP_API/html/) - For cards issued in the U.S. or Canada, Visa may require this data for specific merchant category codes. - For cards not issued in the U.S. or Canada, your bank may require this data as proof of enrollment checking for any payer authentication transaction that you re-present because of a chargeback.
     */
    proofXml?: string;
    /**
     * Encrypted version of the card number used in the payer authentication request message.
     */
    proxyPan?: string;
    /**
     * SDK unique transaction identifier that is generated on each new transaction.
     */
    sdkTransactionId?: string;
    /**
     * Provides additional information as to why the PAResStatus has a specific value.
     */
    signedParesStatusReason?: string;
    /**
     * This field contains the 3D Secure version that was used to process the transaction. For example, 1.0.2 or 2.0.0.
     */
    specificationVersion?: string;
    /**
     * The fully qualified URL that the merchant uses to post a form to the cardholder in order to complete the Consumer Authentication transaction for the Cardinal Cruise API integration.
     */
    stepUpUrl?: string;
    /**
     * Unique transaction identifier assigned by the 3DS Server to identify a single transaction.
     */
    threeDSServerTransactionId?: string;
    /**
     * AAV is a unique identifier generated by the card-issuing bank for Mastercard Identity Check transactions after the customer is authenticated. The value is in base64. Include the data in the card authorization request.
     */
    ucafAuthenticationData?: string;
    /**
     * For enroll, Returned only for Mastercard transactions. Indicates that authentication is not required because the customer is not enrolled. Add the value of this field to the authorization field ucaf_collection_indicator. This field can contain these values: 0, 1.  For validate, Numeric electronic commerce indicator (ECI) returned only for Mastercard Identity Check transactions. The field is absent when authentication fails. You must send this value to your payment processor in the request for card authorization. This field contain one of these values: - `0`: Authentication data not collected, and customer authentication was not completed. - `1`: Authentication data not collected because customer authentication was not completed. - `2`: Authentication data collected because customer completed authentication.
     */
    ucafCollectionIndicator?: string;
    /**
     * Result of the enrollment check. This field can contain one of these values: - `Y`: Card enrolled or can be enrolled; you must authenticate. Liability shift. - `N`: Card not enrolled; proceed with authorization. Liability shift. - `U`: Unable to authenticate regardless of the reason. No liability shift.  **Note** This field only applies to the Asia, Middle East, and Africa Gateway. If you are configured for this processor, you must send the value of this field in your authorization request.  The following value can be returned if you are using rules-based Payer Authentication: - `B`: Indicates that authentication was bypassed.  For details, see `pa_enroll_veres_enrolled` field description in [CyberSource Payer Authentication Using the SCMP API.] (https://apps.cybersource.com/library/documentation/dev_guides/Payer_Authentication_SCMP_API/html/)
     */
    veresEnrolled?: string;
    /**
     * This data element will be populated by the system setting Whitelist Status. Possible Values: 01 - 3DS/ Server/ 02 – DS/03 - ACS
     */
    whiteListStatusSource?: string;
    /**
     * Transaction identifier generated by CyberSource for successful enrollment or validation checks. Use this value, which is in base64, to match an outgoing PAReq with an incoming PARes. CyberSource forwards the XID with the card authorization service to these payment processors in these cases: - Barclays - Streamline (when the **ecommerceIndicator**`=spa`)
     */
    xid?: string;
    /**
     * The Directory Server Transaction ID is generated by the Mastercard Directory Server during the authentication transaction and passed back to the merchant with the authentication results. For Cybersource Through Visanet Gateway: The value for this field corresponds to the following data in the TC 33 capture file3: Record: CP01 TCR7, Position: 114-149, Field: MC AVV Verification—Directory Server Transaction ID
     */
    directoryServerTransactionId?: string;
    /**
     * Raw authentication data that comes from the cardissuing bank. Primary authentication field that indicates if authentication was successful and if liability shift occurred. You should examine first the result of this field. This field contains one of these values: - `-1`: Invalid PARes. - `0`: Successful validation. - `1`: Cardholder is not participating, but the attempt to authenticate was recorded. - `6`: Issuer unable to perform authentication. - `9`: Cardholder did not complete authentication.
     */
    authenticationResult?: string;
    /**
     * Message that explains the authenticationResult reply field.
     */
    authenticationStatusMsg?: string;
    /**
     * Indicator used to differentiate Internet transactions from other types. The authentication failed if this field is not returned. For Visa, if your payment processor is Streamline, Barclays, AIBMS, or FDC Germany, you receive the value vbv_failure instead of internet when eci is 07. The value of this field is passed automatically to the authorization service if you request the services together. This field contains one of these values: - `aesk`: American Express SafeKey authentication verified successfully. - `aesk_attempted`: Card not enrolled in American Express SafeKey, but the attempt to authenticate was recorded. - `dipb`: Discover ProtectBuy authentication verified successfully. - `dipb_attempted`: Card not enrolled in Discover ProtectBuy, but the attempt to authenticate was recorded. - `internet`: Authentication was not verified successfully. - `js`: J/Secure authentication verified successfully. - `js_attempted`: Card not enrolled in J/Secure, but the attempt to authenticate was recorded. - `moto`: Mail or telephone order. - `pb_attempted`: Card not enrolled in Diners Club ProtectBuy, but the attempt to authenticate was recorded. - `recurring`: Recurring transaction. - `spa`: Mastercard Identity Check authentication verified successfully. - `spa_failure`: Mastercard Identity Check failed authentication. - `vbv`: Visa Secure authentication verified successfully. - `vbv_attempted`: Card not enrolled in Visa Secure, but the attempt to authenticate was recorded. - `vbv_failure`: Visa Secure authentication unavailable.
     */
    indicator?: string;
    /**
     * Indicates the number of authentication cycles attempted by the cardholder and is tracked by the Issuing Banks ACS.Example: if customer gets the challenge window and enter in their one time password and hit submit then that interaction counter should just be 1. When customer gets the challenge window and the bank asks if they want to have the one time password  sent to their phone or their email and they have to choose before going to the next screen to enter in their one time password then this interaction count would be 2. One for the selection of how they want the one time password delivered and another with them actually entering in the one time password and hitting the submit button.
     */
    interactionCounter?: string;
    /**
     * Enables the communication of trusted beneficiary/whitelist status between the ACS, the DS and the 3DS Requestor.  Possible Values:  Y - 3DS Requestor is whitelisted by cardholder  N - 3DS Requestor is not whitelisted by cardholder
     */
    whiteListStatus?: string;
  }
  export interface PtsV2PaymentsPost201ResponseConsumerAuthenticationInformationIvr {
    /**
     * Flag to indicate if a valid IVR transaction was detected.
     */
    enabledMessage?: boolean;
    /**
     * Encryption key to be used in the event the ACS requires encryption of the credential field.
     */
    encryptionKey?: string;
    /**
     * Flag to indicate if the ACS requires the credential to be encrypted.
     */
    encryptionMandatory?: boolean;
    /**
     * An indicator from the ACS to inform the type of encryption that should be used in the event the ACS requires encryption of the credential field.
     */
    encryptionType?: string;
    /**
     * An ACS Provided label that can be presented to the Consumer. Recommended use with an application.
     */
    label?: string;
    /**
     * An ACS provided string that can be presented to the Consumer. Recommended use with an application.
     */
    prompt?: string;
    /**
     * An ACS provided message that can provide additional information or details.
     */
    statusMessage?: string;
  }
  export interface PtsV2PaymentsPost201ResponseErrorInformation {
    /**
     * The reason of the status.  Possible values:  - AVS_FAILED  - CONTACT_PROCESSOR  - EXPIRED_CARD  - PROCESSOR_DECLINED  - INSUFFICIENT_FUND  - STOLEN_LOST_CARD  - ISSUER_UNAVAILABLE  - UNAUTHORIZED_CARD  - CVN_NOT_MATCH  - EXCEEDS_CREDIT_LIMIT  - INVALID_CVN  - DECLINED_CHECK  - BLACKLISTED_CUSTOMER  - SUSPENDED_ACCOUNT  - PAYMENT_REFUSED  - CV_FAILED  - INVALID_ACCOUNT  - GENERAL_DECLINE  - INVALID_MERCHANT_CONFIGURATION  - DECISION_PROFILE_REJECT  - SCORE_EXCEEDS_THRESHOLD  - PENDING_AUTHENTICATION  - ACH_VERIFICATION_FAILED  - DECISION_PROFILE_REVIEW  - CONSUMER_AUTHENTICATION_REQUIRED  - CONSUMER_AUTHENTICATION_FAILED
     */
    reason?: string;
    /**
     * The detail message related to the status and reason listed above.
     */
    message?: string;
    details?: Array<PtsV2PaymentsPost201ResponseErrorInformationDetails>;
  }
  export interface PtsV2PaymentsPost201ResponseErrorInformationDetails {
    /**
     * This is the flattened JSON object field name/path that is either missing or invalid.
     */
    field?: string;
    /**
     * Possible reasons for the error.  Possible values:  - MISSING_FIELD  - INVALID_DATA
     */
    reason?: string;
  }
  export interface PtsV2PaymentsPost201ResponseInstallmentInformation {
    /**
     * Additional costs charged by the issuer to fund the installment payments.  This field is included in the authorization reply for the Crediario eligibility request when the issuer approves the cardholder's request for Crediario installment payments in Brazil.  For details, see \"Installment Payments on CyberSource through VisaNet\" in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  This field is supported only for Crediario installment payments in Brazil on **CyberSource through VisaNet**.  The value for this field corresponds to the following data in the TC 33 capture file1: - Record: CP01 TCR9 - Position: 128-139 - Field: Total Other Costs
     */
    additionalCosts?: string;
    /**
     * Additional costs divided by the amount funded.  For example: - A value of 1.0 specifies 1%. - A value of 4.0 specifies 4%.  This field is included in the authorization reply for the Crediario eligibility request when the issuer approves the cardholder's request for Crediario installment payments in Brazil.  For details, see \"Installment Payments on CyberSource through VisaNet\" in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  This field is supported only for Crediario installment payments in Brazil on **CyberSource through VisaNet**.  The value for this field corresponds to the following data in the TC 33 capture file1: - Record: CP01 TCR9 - Position: 140-143 - Field: Percent of Total Other Costs
     */
    additionalCostsPercentage?: string;
    /**
     * Amount for the current installment payment.  This field is supported only for CyberSource through VisaNet.  For details, see `installment_amount` field description in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
     */
    amount?: string;
    /**
     * Amount funded.  This field is included in the authorization reply for the Crediario eligibility request when the issuer approves the cardholder's request for Crediario installment payments in Brazil.  For details, see \"Installment Payments on CyberSource through VisaNet\" in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  This field is supported only for Crediario installment payments in Brazil on **CyberSource through VisaNet**.  The value for this field corresponds to the following data in the TC 33 capture file1: - Record: CP01 TCR9 - Position: 48-59 - Field: Total Amount Funded
     */
    amountFunded?: string;
    /**
     * Amount requested divided by the amount funded.  For example: - A value of 90.0 specifies 90%. - A value of 93.7 specifies 93.7%.  This field is included in the authorization reply for the Crediario eligibility request when the issuer approves the cardholder's request for Crediario installment payments in Brazil.  For details, see \"Installment Payments on CyberSource through VisaNet\" in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  This field is supported only for Crediario installment payments in Brazil on **CyberSource through VisaNet**.  The value for this field corresponds to the following data in the TC 33 capture file1: - Record: CP01 TCR9 - Position: 60-63 - Field: Percent of Amount Requested
     */
    amountRequestedPercentage?: string;
    /**
     * Annual cost of financing the installment payments.  This field is included in the authorization reply for the Crediario eligibility request when the issuer approves the cardholder's request for Crediario installment payments in Brazil.  For details, see \"Installment Payments on CyberSource through VisaNet\" in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  This field is supported only for Crediario installment payments in Brazil on **CyberSource through VisaNet**.  The value for this field corresponds to the following data in the TC 33 capture file1: - Record: CP01 TCR9 - Position: 158-164 - Field: Annual Total Cost of Financing
     */
    annualFinancingCost?: string;
    /**
     * Annual interest rate.  For example: - A value of 1.0 specifies 1%. - A value of 4.0 specifies 4%.  This field is included in the authorization reply for the Crediario eligibility request when the issuer approves the cardholder's request for Crediario installment payments in Brazil.  For details, see \"Installment Payments on CyberSource through VisaNet\" in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  This field is supported only for Crediario installment payments in Brazil on **CyberSource through VisaNet**.  The value for this field corresponds to the following data in the TC 33 capture file1: - Record: CP01 TCR9 - Position: 151-157 - Field: Annual Interest Rate
     */
    annualInterestRate?: string;
    /**
     * Expenses charged by the issuer to fund the installment payments.  This field is included in the authorization reply for the Crediario eligibility request when the issuer approves the cardholder's request for Crediario installment payments in Brazil.  For details, see \"Installment Payments on CyberSource through VisaNet\" in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  This field is supported only for Crediario installment payments in Brazil on **CyberSource through VisaNet**.  The value for this field corresponds to the following data in the TC 33 capture file1: - Record: CP01 TCR9 - Position: 64-75 - Field: Total Expenses
     */
    expenses?: string;
    /**
     * Expenses divided by the amount funded.  For example: - A value of 1.0 specifies 1%. - A value of 4.0 specifies 4%.  This field is included in the authorization reply for the Crediario eligibility request when the issuer approves the cardholder's request for Crediario installment payments in Brazil.  For details, see \"Installment Payments on CyberSource through VisaNet\" in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  This field is supported only for Crediario installment payments in Brazil on **CyberSource through VisaNet**.  The value for this field corresponds to the following data in the TC 33 capture file1: - Record: CP01 TCR9 - Position: 76-79 - Field: Percent of Total Expenses
     */
    expensesPercentage?: string;
    /**
     * Fees charged by the issuer to fund the installment payments.  This field is included in the authorization reply for the Crediario eligibility request when the issuer approves the cardholder's request for Crediario installment payments in Brazil.  For details, see \"Installment Payments on CyberSource through VisaNet\" in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  This field is supported only for Crediario installment payments in Brazil on **CyberSource through VisaNet**.  The value for this field corresponds to the following data in the TC 33 capture file1: - Record: CP01 TCR9 - Position: 80-91 - Field: Total Fees
     */
    fees?: string;
    /**
     * Fees divided by the amount funded.  For example: - A value of 1.0 specifies 1%. - A value of 4.0 specifies 4%.  This field is included in the authorization reply for the Crediario eligibility request when the issuer approves the cardholder's request for Crediario installment payments in Brazil.  For details, see \"Installment Payments on CyberSource through VisaNet\" in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  This field is supported only for Crediario installment payments in Brazil on CyberSource through VisaNet.  The value for this field corresponds to the following data in the TC 33 capture file1: - Record: CP01 TCR9 - Position: 92-95 - Field: Percent of Total Fees
     */
    feesPercentage?: string;
    /**
     * Frequency of the installment payments. When you do not include this field in a request for a Crediario installment payment, CyberSource sends a space character to the processor.  For details, see `installment_frequency` field description in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  This field is supported only for CyberSource through VisaNet. Possible values: - `B`: Biweekly - `M`: Monthly - `W`: Weekly  For Crediario installment payments, the value for this field corresponds to the following data in the TC 33 capture file5: - Record: CP01 TCR9 - Position: 41 - Field: Installment Frequency  For details, see \"Installment Payments\" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
     */
    frequency?: string;
    /**
     * Insurance charged by the issuer to fund the installment payments.  This field is included in the authorization reply for the Crediario eligibility request when the issuer approves the cardholder's request for Crediario installment payments in Brazil.  For details, see \"Installment Payments on CyberSource through VisaNet\" in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  This field is supported only for Crediario installment payments in Brazil on **CyberSource through VisaNet**.  The value for this field corresponds to the following data in the TC 33 capture file1: - Record: CP01 TCR9 - Position: 112-123 - Field: Total Insurance
     */
    insurance?: string;
    /**
     * Insurance costs divided by the amount funded.  For example: - A value of 1.0 specifies 1%. - A value of 4.0 specifies 4%.  This field is included in the authorization reply for the Crediario eligibility request when the issuer approves the cardholder's request for Crediario installment payments in Brazil.  For details, see \"Installment Payments on CyberSource through VisaNet\" in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  This field is supported only for Crediario installment payments in Brazil on **CyberSource through VisaNet**.  The value for this field corresponds to the following data in the TC 33 capture file1: - Record: CP01 TCR9 - Position: 124-127 - Field: Percent Of Total Insurance
     */
    insurancePercentage?: string;
    /**
     * Invoice information that you want to provide to the issuer. This value is similar to a tracking number and is the same for all installment payments for one purchase.  This field is supported only for installment payments with Mastercard on CyberSource through VisaNet in Brazil.  For details, see \"Installment Payments on CyberSource through VisaNet\" in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  The value for this field corresponds to the following data in the TC 33 capture file5: - Record: CP07 TCR4 - Position: 51-70 - Field: Purchase Identification
     */
    invoiceData?: string;
    /**
     * Monthly interest rate.  For example: - A value of 1.0 specifies 1%. - A value of 4.0 specifies 4%.  This field is included in the authorization reply for the Crediario eligibility request when the issuer approves the cardholder's request for Crediario installment payments in Brazil.  For details, see \"Installment Payments on CyberSource through VisaNet\" in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  This field is supported only for Crediario installment payments in Brazil on **CyberSource through VisaNet**.  The value for this field corresponds to the following data in the TC 33 capture file1: - Record: CP01 TCR9 - Position: 144-150 - Field: Monthly Interest Rate
     */
    monthlyInterestRate?: string;
    /**
     * #### American Express Direct, Cielo, and CyberSource Latin American Processing Flag that indicates the type of funding for the installment plan associated with the payment.  Possible values: - `1`: Merchant-funded installment plan - `2`: Issuer-funded installment plan If you do not include this field in the request, CyberSource uses the value in your CyberSource account.  To change the value in your CyberSource account, contact CyberSource Customer Service. For details, see `installment_plan_type` field description in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  #### CyberSource through VisaNet and American Express Defined code that indicates the type of installment plan for this transaction.  Contact American Express for: - Information about the kinds of installment plans that American Express provides - Values for this field  For installment payments with American Express in Brazil, the value for this field corresponds to the following data in the TC 33 capture file*: - Record: CP07 TCR3 - Position: 5-6 - Field: Plan Type  * The TC 33 Capture file contains information about the purchases and refunds that a merchant submits to CyberSource. CyberSource through VisaNet creates the TC 33 Capture file at the end of the day and sends it to the merchant’s acquirer, who uses this information to facilitate end-of-day clearing processing with payment card companies.  #### CyberSource through VisaNet with Visa or Mastercard Flag indicating the type of funding for the installment plan associated with the payment. Possible values: - 1 or 01: Merchant-funded installment plan - 2 or 02: Issuer-funded installment plan - 43: Crediario installment plan—only with Visa in Brazil For details, see \"Installment Payments on CyberSource through VisaNet\" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  For installment payments with Visa in Brazil, the value for this field corresponds to the following data in the TC 33 capture file5: - Record: CP07 TCR1 - Position: 5-6 - Field: Installment Type  For all other kinds of installment payments, the value for this field corresponds to the following data in the TC 33 capture file5: - Record: CP01 TCR5 - Position: 39-40 - Field: Installment Plan Type (Issuer or Merchant)
     */
    planType?: string;
    /**
     * Installment number when making payments in installments. Used along with `totalCount` to track which payment is being processed.  For example, the second of 5 payments would be passed to CyberSource as `sequence` = 2 and `totalCount` = 5.  For details, see \"Installment Payments\" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  #### Chase Paymentech Solutions and FDC Compass This field is optional because this value is required in the merchant descriptors. For details, see \"Chase Paymentech Solutions Merchant Descriptors\" and \"FDC Compass Merchant Descriptors\" in the [Merchant Descriptors Using the SCMP API] (https://apps.cybersource.com/library/documentation/dev_guides/Merchant_Descriptors_SCMP_API/html/)  #### CyberSource through VisaNet When you do not include this field in a request for a Crediario installment payment, CyberSource sends a value of 0 to the processor.  For Crediario installment payments, the value for this field corresponds to the following data in the TC 33 capture file*: - Record: CP01 TCR9 - Position: 38-40 - Field: Installment Payment Number  * The TC 33 Capture file contains information about the purchases and refunds that a merchant submits to CyberSource. CyberSource through VisaNet creates the TC 33 Capture file at the end of the day and sends it to the merchant’s acquirer, who uses this information to facilitate end-of-day clearing processing with payment card companies.
     */
    sequence?: number;
    /**
     * Taxes collected by the issuer to fund the installment payments.  This field is included in the authorization reply for the Crediario eligibility request when the issuer approves the cardholder's request for Crediario installment payments in Brazil.  For details, see \"Installment Payments on CyberSource through VisaNet\" in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  This field is supported only for Crediario installment payments in Brazil on **CyberSource through VisaNet**.  The value for this field corresponds to the following data in the TC 33 capture file1: - Record: CP01 TCR9 - Position: 96-107 - Field: Total Taxes
     */
    taxes?: string;
    /**
     * Taxes divided by the amount funded.  For example: - A value of 1.0 specifies 1%. - A value of 4.0 specifies 4%.  This field is included in the authorization reply for the Crediario eligibility request when the issuer approves the cardholder's request for Crediario installment payments in Brazil.  For details, see \"Installment Payments on CyberSource through VisaNet\" in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  This field is supported only for Crediario installment payments in Brazil on **CyberSource through VisaNet**.  The value for this field corresponds to the following data in the TC 33 capture file1: - Record: CP01 TCR9 - Position: 108-111 - Field: Percent of Total Taxes
     */
    taxesPercentage?: string;
    /**
     * Total amount of the loan that is being paid in installments. This field is supported only for CyberSource through VisaNet.  For details, see \"Installment Payments\" in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
     */
    totalAmount?: string;
    /**
     * Total number of installments when making payments in installments.  For details, see \"Installment Payments\" in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  #### Chase Paymentech Solutions and FDC Compass This field is optional because this value is required in the merchant descriptors.  For details, see \"Chase Paymentech Solutions Merchant Descriptors\" and \"FDC Compass Merchant Descriptors\" in the [Merchant Descriptors Using the SCMP API.] (https://apps.cybersource.com/library/documentation/dev_guides/Merchant_Descriptors_SCMP_API/html/)  #### American Express Direct, Cielo, and Comercio Latino This value is the total number of installments you approved.  #### CyberSource Latin American Processing in Brazil This value is the total number of installments that you approved. The default is 1.  #### All Other Processors This value is used along with _sequence_ to track which payment is being processed.  For example, the second of 5 payments would be passed to CyberSource as _sequence_ = 2 and _totalCount_ = 5.  #### CyberSource through VisaNet For Crediario installment payments, the value for this field corresponds to the following data in the TC 33 capture file*: - Record: CP01 TCR9 - Position: 23-25 - Field: Number of Installments  For installment payments with American Express in Brazil, the value for this field corresponds to the following data in the TC 33 capture file*: - Record: CP07 TCR3 - Position: 7-8 - Field: Number of Installments  For installment payments with Visa in Brazil, the value for this field corresponds to the following data in the TC 33 capture file*: - Record: CP07 TCR1 - Position: 7-8 - Field: Number of Installments  For all other kinds of installment payments, the value for this field corresponds to the following data in the TC 33 capture file*: - Record: CP01 TCR5 - Position: 20-22 - Field: Installment Total Count  **Note** The TC 33 Capture file contains information about the purchases and refunds that a merchant submits to CyberSource. CyberSource through VisaNet creates the TC 33 Capture file at the end of the day and sends it to the merchant’s acquirer, who uses this information to facilitate end-of-day clearing processing with payment card companies.
     */
    totalCount?: number;
    /**
     * \"Minimum number of installments offered by the issuer for this purchase. The issuer provides this value when the first installment payment is successful. This field is supported for installment payments with Mastercard on CyberSource through VisaNet in all countries except Brazil, Croatia, Georgia, and Greece. The value for this field corresponds to the following data in the TC 33 capture file: - Record: CP01 TCR5 - Position: 75-76 - Field: Mastercard Minimum Number Of Installments
     */
    minimumTotalCount?: string;
    /**
     * Maximum number of installments offered by the issuer for this purchase. The issuer provides this value when the first installment payment is successful. This field is supported for installment payments with Mastercard on CyberSource through VisaNet in all countries except Brazil, Croatia, Georgia, and Greece. The value for this field corresponds to the following data in the TC 33 capture file1: - Record: CP01 TCR5 - Position: 77-78 - Field: Mastercard Maximum Number Of Installments
     */
    maximumTotalCount?: string;
    /**
     * Amount of the first installment payment. The issuer provides this value when the first installment payment is successful. This field is supported for Mastercard installment payments on CyberSource through VisaNet in all countries except Brazil,Croatia, Georgia, and Greece. The value for this field corresponds to the following data in the TC 33 capture file: - Record: CP01 TCR5 - Position: 23-34 - Field: Amount of Each Installment
     */
    firstInstallmentAmount?: string;
    /**
     * Date of the first installment payment. Format: YYMMDD. When you do not include this field, CyberSource sends a string of six zeros (000000) to the processor. For details, see \"Installment Payments on CyberSource through VisaNet\" in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  This field is supported only for Crediario installment payments in Brazil on CyberSource through VisaNet.  The value for this field corresponds to the following data in the TC 33 capture file: - Record: CP01 TCR9 - Position: 42-47 - Field: Date of First Installment
     */
    firstInstallmentDate?: string;
  }
  export interface PtsV2PaymentsPost201ResponseIssuerInformation {
    /**
     * Country in which the card was issued. This information enables you to determine whether the card was issued domestically or internationally. Use the two-character [ISO Standard Country Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/countries_alpha_list.pdf).  This field is supported for Visa, Mastercard, Discover, Diners Club, JCB, and Maestro (International) on Chase Paymentech Solutions.  For details, see `auth_card_issuer_country` field description in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
     */
    country?: string;
    /**
     * Data defined by the issuer.  The value for this reply field will probably be the same as the value that you submitted in the authorization request, but it is possible for the processor, issuer, or acquirer to modify the value.  This field is supported only for Visa transactions on **CyberSource through VisaNet**.  For details, see `issuer_additional_data` field description in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
     */
    discretionaryData?: string;
    /**
     * Data defined by the issuer.  This national use field contains two subfields for information unique to the processing of Visa transactions by members in Japan. This subfield contains the Katakana text to be printed on the receipt. For details, see `jpo_issuer_message` field description in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
     */
    countrySpecificDiscretionaryData?: string;
    /**
     * Additional authorization code that must be printed on the receipt when returned by the processor.  This value is generated by the processor and is returned only for a successful transaction.  This reply field is supported only for these processors: - FDC Nashville Global - SIX
     */
    responseCode?: string;
  }
  export interface PtsV2PaymentsPost201ResponseLinks {
    self?: PtsV2PaymentsPost201ResponseLinksSelf;
    reversal?: PtsV2PaymentsPost201ResponseLinksSelf;
    capture?: PtsV2PaymentsPost201ResponseLinksSelf;
    customer?: PtsV2PaymentsPost201ResponseLinksSelf;
    paymentInstrument?: PtsV2PaymentsPost201ResponseLinksSelf;
    shippingAddress?: PtsV2PaymentsPost201ResponseLinksSelf;
    instrumentIdentifier?: PtsV2PaymentsPost201ResponseLinksSelf;
  }
  export interface PtsV2PaymentsPost201ResponseLinksSelf {
    /**
     * This is the endpoint of the resource that was created by the successful request.
     */
    href?: string;
    /**
     * `method` refers to the HTTP method that you can send to the `self` endpoint to retrieve details of the resource.
     */
    method?: string;
  }
  export interface PtsV2PaymentsPost201ResponseOrderInformation {
    amountDetails?: PtsV2PaymentsPost201ResponseOrderInformationAmountDetails;
    invoiceDetails?: PtsV2PaymentsPost201ResponseOrderInformationInvoiceDetails;
  }
  export interface PtsV2PaymentsPost201ResponseOrderInformationAmountDetails {
    /**
     * Amount you requested for the payment or capture.  This value is returned for partial authorizations. This field is also returned on incremental authorizations will contain the aggregated amount from the original authorizations and all the incremental authorizations.
     */
    totalAmount?: string;
    /**
     * Amount that was authorized.  Returned by authorization service.  #### PIN debit Amount of the purchase.  Returned by PIN debit purchase.  #### FDMS South If you accept IDR or CLP currencies, see the entry for FDMS South in Merchant Descriptors Using the SCMP API.
     */
    authorizedAmount?: string;
    /**
     * Currency used for the order. Use the three-character [ISO Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf)  #### Used by **Authorization** Required field.  **Authorization Reversal** For an authorization reversal (`reversalInformation`) or a capture (`processingOptions.capture` is set to `true`), you must use the same currency that you used in your payment authorization request.  #### PIN Debit Currency for the amount you requested for the PIN debit purchase. This value is returned for partial authorizations. The issuing bank can approve a partial amount if the balance on the debit card is less than the requested transaction amount. For the possible values, see the [ISO Standard Currency Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/currencies.pdf). Returned by PIN debit purchase.  For PIN debit reversal requests, you must use the same currency that was used for the PIN debit purchase or PIN debit credit that you are reversing. For the possible values, see the [ISO Standard Currency Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/currencies.pdf).  Required field for PIN Debit purchase and PIN Debit credit requests. Optional field for PIN Debit reversal requests.  #### GPX This field is optional for reversing an authorization or credit.  #### DCC for First Data Your local currency. For details, see the `currency` field description in [Dynamic Currency Conversion For First Data Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/DCC_FirstData_SCMP/DCC_FirstData_SCMP_API.pdf).  #### Tax Calculation Required for international tax and value added tax only. Optional for U.S. and Canadian taxes. Your local currency.
     */
    currency?: string;
  }
  export interface PtsV2PaymentsPost201ResponseOrderInformationInvoiceDetails {
    /**
     * Indicates whether CyberSource sent the Level III information to the processor. The possible values are:  If your account is not enabled for Level III data or if you did not include the purchasing level field in your request, CyberSource does not include the Level III data in the request sent to the processor.  Possible values: - **true** - **false**
     */
    level3TransmissionStatus?: boolean;
    /**
     * Transaction identifier that is generated. You have the option of printing the sales slip number on the receipt. This field is supported only on Cybersource through Visanet and JCN gateway.  Optional field.  #### Card Present processing message If you included this field in the request, the returned value is the value that you sent in the request. If you did not include this field in the request, the system generated this value for you.  The difference between this reply field and the `processorInformation.systemTraceAuditNumber` field is that the system generates the system trace audit number (STAN), and you must print the receipt number on the receipt; whereas you can generate the sales slip number, and you can choose to print the sales slip number on the receipt.
     */
    salesSlipNumber?: number;
  }
  export interface PtsV2PaymentsPost201ResponsePaymentInformation {
    card?: PtsV2PaymentsPost201ResponsePaymentInformationCard;
    tokenizedCard?: PtsV2PaymentsPost201ResponsePaymentInformationTokenizedCard;
    accountFeatures?: PtsV2PaymentsPost201ResponsePaymentInformationAccountFeatures;
    bank?: PtsV2PaymentsPost201ResponsePaymentInformationBank;
    customer?: Ptsv2paymentsPaymentInformationCustomer;
    paymentInstrument?: Ptsv2paymentsPaymentInformationPaymentInstrument;
    instrumentIdentifier?: PtsV2PaymentsPost201ResponsePaymentInformationInstrumentIdentifier;
    shippingAddress?: Ptsv2paymentsPaymentInformationShippingAddress;
  }
  export interface PtsV2PaymentsPost201ResponsePaymentInformationAccountFeatures {
    /**
     * Type of account. This value is returned only if you requested a balance inquiry. Possible values:   - `00`: Not applicable or not specified  - `10`: Savings account  - `20`: Checking account  - `30`: Credit card account  - `40`: Universal account  #### PIN debit Type of account. This value is returned only if you requested a balance inquiry.  Possible values: - `00`: Not applicable or not specified - `10`: Savings account - `20`: Checking account - `40`: Universal account - `96`: Cash benefits account - `98`: Food stamp account  Returned by PIN debit purchase.
     */
    accountType?: string;
    /**
     * Possible values: - `N`: Nonregulated - `R`: Regulated  Returned by PIN debit credit or PIN debit purchase.  **Note** This field is returned only for CyberSource through VisaNet.
     */
    accountStatus?: string;
    /**
     * This is an array of multiple balances information an issuer can return for a given card.
     */
    balances?: Array<PtsV2PaymentsPost201ResponsePaymentInformationAccountFeaturesBalances>;
    /**
     * Remaining balance on the account.  Returned by authorization service.  #### PIN debit Remaining balance on the prepaid card.  Returned by PIN debit purchase.
     */
    balanceAmount?: string;
    /**
     * Type of amount. This value is returned only if you requested a balance inquiry. The issuer determines the value that is returned. Possible values for deposit accounts:   - `01`: Current ledger (posted) balance.  - `02`: Current available balance, which is typically the ledger balance less outstanding authorizations.  Some depository institutions also include pending deposits and the credit or overdraft line associated with the account. Possible values for credit card accounts:   - `01`: Credit amount remaining for customer (open to buy).  - `02`: Credit limit.
     */
    balanceAmountType?: string;
    /**
     * Currency of the remaining balance on the account. For the possible values, see the [ISO Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf)  Returned by authorization service.  #### PIN debit Currency of the remaining balance on the prepaid card.  Returned by PIN debit purchase.
     */
    currency?: string;
    /**
     * Sign for the remaining balance on the account. Returned only when the processor returns this value. Possible values:  Possible values: - `Positive` - `Negative`  #### PIN debit Sign for the remaining balance on the prepaid card. Returned only when the processor returns this value.  Returned by PIN debit purchase.
     */
    balanceSign?: string;
    /**
     * **Chase Paymentech Solutions**  Indicates whether a customer has high credit limits. This information enables you to market high cost items to these customers and to understand the kinds of cards that high income customers are using.  This field is supported for Visa, Mastercard, Discover, and Diners Club. Possible values:   - `Y`: Yes  - `N`: No  - `X`: Not applicable / Unknown  #### Litle  Flag that indicates that a Visa cardholder or Mastercard cardholder is in one of the affluent categories. Possible values:   - `AFFLUENT`: High income customer with high spending pattern (>100k USD annual income and >40k USD annual    card usage).  - `MASS AFFLUENT`: High income customer (>100k USD annual income).   Maximum length is 13.  #### Chase Paymentech Solutions  Maximum length is 1.
     */
    affluenceIndicator?: string;
    /**
     * #### GPX Mastercard product ID associated with the primary account number (PAN). Returned by authorization service.  #### CyberSource through VisaNet Visa or Mastercard product ID that is associated with the primary account number (PAN). For descriptions of the Visa product IDs, see the Product ID table on the [Visa Request & Response Codes web page.](https://developer.visa.com/guides/request_response_codes)  Data Length: String (3)  #### GPN Visa or Mastercard product ID that is associated with the primary account number (PAN). For descriptions of the Visa product IDs, see the Product ID table on the [Visa Request & Response Codes web page.](https://developer.visa.com/guides/request_response_codes)  Data Length: String (3)  #### Worldpay VAP **Important** Before using this field on Worldpay VAP, you must contact CyberSource Customer Support to have your account configured for this feature.  Type of card used in the transaction. The only possible value is: - `PREPAID`: Prepaid Card  Data Length: String (7)  #### RBS WorldPay Atlanta Type of card used in the transaction. Possible values: - `B`: Business Card - `O`: Noncommercial Card - `R`: Corporate Card - `S`: Purchase Card - `Blank`: Purchase card not supported  Data Length: String (1)
     */
    category?: string;
    /**
     * Indicates whether the card is a commercial card, which enables you to include Level II data in your transaction requests. This field is supported for Visa and Mastercard on **Chase Paymentech Solutions**. Possible values:   - `Y`: Yes  - `N`: No  - `X`: Not applicable / Unknown
     */
    commercial?: string;
    /**
     * Type of commercial card. This field is supported only for CyberSource through VisaNet. Possible values:   - `B`: Business card  - `R`: Corporate card  - `S`: Purchasing card  - `0`: Noncommercial card  Returned by authorization service.
     */
    group?: string;
    /**
     * Indicates whether the card is a healthcare card. This field is supported for Visa and Mastercard on **Chase Paymentech Solutions**. Possible values:   - `Y`: Yes  - `N`: No  - `X`: Not applicable / Unknown
     */
    healthCare?: string;
    /**
     * Indicates whether the card is a payroll card. This field is supported for Visa, Discover, Diners Club, and JCB on **Chase Paymentech Solutions**. Possible values:   - `Y`: Yes  - `N`: No  - `X`: Not applicable / Unknown
     */
    payroll?: string;
    /**
     * Indicates whether the card is eligible for Level III interchange fees, which enables you to include Level III data in your transaction requests. This field is supported for Visa and Mastercard on **Chase Paymentech Solutions**. Possible values:   - `Y`: Yes  - `N`: No  - `X`: Not applicable / Unknown
     */
    level3Eligible?: string;
    /**
     * Indicates whether the card is a PINless debit card. This field is supported for Visa and Mastercard on **Chase Paymentech Solutions**. Possible values:   - `Y`: Yes  - `N`: No  - `X`: Not applicable / Unknown
     */
    pinlessDebit?: string;
    /**
     * Indicates whether the card is a signature debit card.  This information enables you to alter the way an order is processed. For example, you might not want to reauthorize a transaction for a signature debit card, or you might want to perform reversals promptly for a signature debit card. This field is supported for Visa, Mastercard, and Maestro (International) on Chase Paymentech Solutions. Possible values:   - `Y`: Yes  - `N`: No  - `X`: Not applicable / Unknown
     */
    signatureDebit?: string;
    /**
     * Indicates whether the card is a prepaid card. This information enables you to determine when a gift card or prepaid card is presented for use when establishing a new recurring, installment, or deferred billing relationship.  This field is supported for Visa, Mastercard, Discover, Diners Club, and JCB on Chase Paymentech Solutions. Possible values:   - `Y`: Yes  - `N`: No  - `X`: Not applicable / Unknown
     */
    prepaid?: string;
    /**
     * Indicates whether the card is regulated according to the Durbin Amendment. If the card is regulated, the card issuer is subject to price caps and interchange rules. This field is supported for Visa, Mastercard, Discover, Diners Club, and JCB on Chase Paymentech Solutions. Possible values:   - `Y`: Yes  - `N`: No  - `X`: Not applicable / Unknown
     */
    regulated?: string;
  }
  export interface PtsV2PaymentsPost201ResponsePaymentInformationAccountFeaturesBalances {
    /**
     * Type of account.  This value is returned only if you request a balance inquiry.  Possible values:   - `00`: Not applicable or not specified  - `10`: Savings account  - `20`: Checking account  - `30`: Credit card account  - `40`: Universal account  Balance Account Types returned on EBT Debit card transactions:   - `96`: Cash Benefits Account (PIN Debit Gateway EBT only)  - `98`: Food Stamp Account (PIN Debit Gateway EBT only)
     */
    accountType?: string;
    /**
     * Remaining balance on the account. If the processor returns the sign, positive or negative, this sign is prefixed to the amount value as (+/-).
     */
    amount?: string;
    /**
     * Type of amount. This value is returned only if you request a balance inquiry. The issuer determines the value that is returned.  Possible values for deposit accounts:   - `01`: Current ledger (posted) balance.  - `02`: Current available balance, which is typically the ledger balance minus outstanding authorizations. Some  depository institutions also include pending deposits and the credit or overdraft line associated with the account.  Possible values for credit card accounts:   - `01`: Credit amount remaining for customer (open to buy).  - `02`: Credit limit.
     */
    amountType?: string;
    /**
     * Currency of the remaining balance on the account.
     */
    currency?: string;
  }
  export interface PtsV2PaymentsPost201ResponsePaymentInformationBank {
    account?: PtsV2PaymentsPost201ResponsePaymentInformationBankAccount;
    /**
     * Corrected account number from the ACH verification service.  For details, see `ecp_debit_corrected_routing_number` or `ecp_credit_corrected_routing_number` reply field descriptions in the [Electronic Check Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/EChecks_SCMP_API/html/)
     */
    correctedRoutingNumber?: string;
  }
  export interface PtsV2PaymentsPost201ResponsePaymentInformationBankAccount {
    /**
     * Corrected account number from the ACH verification service.  For details, see `ecp_debit_corrected_account_number` or `ecp_credit_corrected_account_number` field descriptions in [Electronic Check Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/EChecks_SCMP_API/html/)
     */
    correctedAccountNumber?: string;
  }
  export interface PtsV2PaymentsPost201ResponsePaymentInformationCard {
    /**
     * Last four digits of the cardholder’s account number. This field is included in the reply message when the client software that is installed on the POS terminal uses the token management service (TMS) to retrieve tokenized payment details.  You must contact customer support to have your account enabled to receive these fields in the credit reply message.  #### PIN debit This field is returned only for tokenized transactions. You can use this value on the receipt that you give to the cardholder.  Returned by PIN debit credit and PIN debit purchase.  This field is supported only by the following processors: - American Express Direct - Credit Mutuel-CIC - FDC Nashville Global - OmniPay Direct - SIX
     */
    suffix?: string;
  }
  export interface PtsV2PaymentsPost201ResponsePaymentInformationInstrumentIdentifier {
    /**
     * Unique identifier for the Instrument Identifier token used in the transaction. When you include this value in your request, many of the fields that can be supplied for an authorization or credit become optional.
     */
    id?: string;
    /**
     * Issuers state for the card number. Valid values: - ACTIVE - CLOSED : The account has been closed.
     */
    state?: string;
  }
  export interface PtsV2PaymentsPost201ResponsePaymentInformationTokenizedCard {
    /**
     * First six digits of token. CyberSource includes this field in the reply message when it decrypts the payment blob for the tokenized transaction.  For details, see `token_prefix` field description in [Google Pay Using the SCMP API.] (https://apps.cybersource.com/library/documentation/dev_guides/Google_Pay_SCMP_API/html/)
     */
    prefix?: string;
    /**
     * Last four digits of token. CyberSource includes this field in the reply message when it decrypts the payment blob for the tokenized transaction.  For details, see `token_suffix` field description in [Google Pay Using the SCMP API.] (https://apps.cybersource.com/library/documentation/dev_guides/Google_Pay_SCMP_API/html/)
     */
    suffix?: string;
    /**
     * Three-digit value that indicates the card type.  **IMPORTANT** It is strongly recommended that you include the card type field in request messages even if it is optional for your processor and card type. Omitting the card type can cause the transaction to be processed with the wrong card type.  Possible values: - `001`: Visa. For card-present transactions on all processors except SIX, the Visa Electron card type is processed the same way that the Visa debit card is processed. Use card type value `001` for Visa Electron. - `002`: Mastercard, Eurocard[^1], which is a European regional brand of Mastercard. - `003`: American Express - `004`: Discover - `005`: Diners Club - `006`: Carte Blanche[^1] - `007`: JCB[^1] - `014`: Enroute[^1] - `021`: JAL[^1] - `024`: Maestro (UK Domestic)[^1] - `031`: Delta[^1]: Use this value only for Ingenico ePayments. For other processors, use `001` for all Visa card types. - `033`: Visa Electron[^1]. Use this value only for Ingenico ePayments and SIX. For other processors, use `001` for all Visa card types. - `034`: Dankort[^1] - `036`: Cartes Bancaires[^1] - `037`: Carta Si[^1] - `039`: Encoded account number[^1] - `040`: UATP[^1] - `042`: Maestro (International)[^1] - `050`: Hipercard[^2,3] - `051`: Aura - `054`: Elo[^3] - `062`: China UnionPay  [^1]: For this card type, you must include the `paymentInformation.card.type` or `paymentInformation.tokenizedCard.type` field in your request for an authorization or a stand-alone credit. [^2]: For this card type on Cielo 3.0, you must include the `paymentInformation.card.type` or `paymentInformation.tokenizedCard.type` field in a request for an authorization or a stand-alone credit. This card type is not supported on Cielo 1.5. [^3]: For this card type on Getnet and Rede, you must include the `paymentInformation.card.type` or `paymentInformation.tokenizedCard.type` field in a request for an authorization or a stand-alone credit.  #### Used by **Authorization** Required for Carte Blanche and JCB. Optional for all other card types.  #### Card Present reply This field is included in the reply message when the client software that is installed on the POS terminal uses the token management service (TMS) to retrieve tokenized payment details. You must contact customer support to have your account enabled to receive these fields in the credit reply message.  Returned by the Credit service.  This reply field is only supported by the following processors: - American Express Direct - Credit Mutuel-CIC - FDC Nashville Global - OmniPay Direct - SIX  #### GPX This field only supports transactions from the following card types: - Visa - Mastercard - AMEX - Discover - Diners - JCB - Union Pay International
     */
    type?: string;
    /**
     * Confidence level of the tokenization. This value is assigned by the token service provider.  **Note** This field is supported only for **CyberSource through VisaNet** and **FDC Nashville Global**.  Returned by PIN debit credit or PIN debit purchase.
     */
    assuranceLevel?: string;
    /**
     * One of two possible meanings: - The two-digit month in which a token expires. - The two-digit month in which a card expires. Format: `MM` Possible values: `01` through `12`  **NOTE** The meaning of this field is dependent on the payment processor that is returning the value in an authorization reply. Please see the processor-specific details below.  #### Barclays and Streamline For Maestro (UK Domestic) and Maestro (International) cards on Barclays and Streamline, this must be a valid value (`01` through `12`) but is not required to be a valid expiration date. In other words, an expiration date that is in the past does not cause CyberSource to reject your request. However, an invalid expiration date might cause the issuer to reject your request.  #### Encoded Account Numbers For encoded account numbers (`card_type=039`), if there is no expiration date on the card, use `12`.\\ **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  #### Samsung Pay and Apple Pay Month in which the token expires. CyberSource includes this field in the reply message when it decrypts the payment blob for the tokenized transaction.  For processor-specific information, see the `customer_cc_expmo` field in [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
     */
    expirationMonth?: string;
    /**
     * One of two possible meanings: - The four-digit year in which a token expires. - The four-digit year in which a card expires. Format: `YYYY` Possible values: `1900` through `3000` Data type: Non-negative integer  **NOTE** The meaning of this field is dependent on the payment processor that is returning the value in an authorization reply. Please see the processor-specific details below.  #### Barclays and Streamline For Maestro (UK Domestic) and Maestro (International) cards on Barclays and Streamline, this must be a valid value (1900 through 3000) but is not required to be a valid expiration date. In other words, an expiration date that is in the past does not cause CyberSource to reject your request. However, an invalid expiration date might cause the issuer to reject your request.  #### Encoded Account Numbers For encoded account numbers (`card_ type=039`), if there is no expiration date on the card, use `2021`.  #### FDC Nashville Global and FDMS South You can send in 2 digits or 4 digits. When you send in 2 digits, they must be the last 2 digits of the year.  #### Samsung Pay and Apple Pay Year in which the token expires. CyberSource includes this field in the reply message when it decrypts the payment blob for the tokenized transaction.  **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  For processor-specific information, see the `customer_cc_expyr` or `token_expiration_year` field in [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
     */
    expirationYear?: string;
    /**
     * Value that identifies your business and indicates that the cardholder’s account number is tokenized. This value is assigned by the token service provider and is unique within the token service provider’s database.  **Note** This field is supported only for **CyberSource through VisaNet** and **FDC Nashville Global**.  #### PIN debit Optional field for PIN debit credit or PIN debit purchase transactions that use payment network tokens; otherwise, not used.
     */
    requestorId?: string;
  }
  export interface PtsV2PaymentsPost201ResponsePointOfSaleInformation {
    emv?: PtsV2PaymentsPost201ResponsePointOfSaleInformationEmv;
    /**
     * Point-of-sale details for the transaction. This value is returned only for **American Express Direct**. CyberSource generates this value, which consists of a series of codes that identify terminal capability, security data, and specific conditions present at the time the transaction occurred. To comply with the CAPN requirements, this value must be included in all subsequent follow-on requests, such as captures and follow-on credits.  When you perform authorizations, captures, and credits through CyberSource, CyberSource passes this value from the authorization service to the subsequent services for you. However, when you perform authorizations through CyberSource and perform subsequent services through other financial institutions, you must ensure that your requests for captures and credits include this value.  For details, see `auth_pos_data` field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
     */
    amexCapnData?: string;
    /**
     * Identifier for the terminal at your retail location. You can define this value yourself, but consult the processor for requirements.  #### CyberSource through VisaNet A list of all possible values is stored in your CyberSource account. If terminal ID validation is enabled for your CyberSource account, the value you send for this field is validated against the list each time you include the field in a request. To enable or disable terminal ID validation, contact CyberSource Customer Support.  When you do not include this field in a request, CyberSource uses the default value that is defined in your CyberSource account.  #### FDC Nashville Global To have your account configured to support this field, contact CyberSource Customer Support. This value must be a value that FDC Nashville Global issued to you.  #### For Payouts This field is applicable for CyberSource through VisaNet.  #### GPX Identifier for the terminal at your retail location. A list of all possible values is stored in your account. If terminal ID validation is enabled for your account, the value you send for this field is validated against the list each time you include the field in a request. To enable or disable terminal ID validation, contact customer support.  When you do not include this field in a request, the default value that is defined in your account is used.  Optional for authorizations.  #### Used by **Authorization** Optional for the following processors. When you do not include this field in a request, the default value that is defined in your account is used.   - American Express Direct   - Credit Mutuel-CIC   - FDC Nashville Global   - SIX - Chase Paymentech Solutions: Optional field. If you include this field in your request, you must also include `pointOfSaleInformation.catLevel`. - FDMS Nashville: The default value that is defined in your account is used. - GPX - OmniPay Direct: Optional field.  For the following processors, this field is not used. - GPN - JCN Gateway - RBS WorldPay Atlanta - TSYS Acquiring Solutions - Worldpay VAP  #### Card Present reply Terminal identifier assigned by the acquirer. This value must be printed on the receipt.
     */
    terminalId?: string;
  }
  export interface PtsV2PaymentsPost201ResponsePointOfSaleInformationEmv {
    /**
     * EMV data that is transmitted from the chip card to the issuer, and from the issuer to the chip card. The EMV data is in the tag-length-value format and includes chip card tags, terminal tags, and transaction detail tags.  For information about the individual tags, see the “Application Specification” section in the EMV 4.3 Specifications: http://emvco.com  **Note** Card present information about EMV applies only to credit card processing and PIN debit processing. All other card present information applies only to credit card processing. PIN debit processing is available only on FDC Nashville Global.  **Important** The following tags contain sensitive information and **must not** be included in this field:   - `56`: Track 1 equivalent data  - `57`: Track 2 equivalent data  - `5A`: Application PAN  - `5F20`: Cardholder name  - `5F24`: Application expiration date (This sensitivity has been relaxed for Credit Mutuel-CIC, American Express Direct, FDC Nashville Global, First Data Merchant Solutions, and SIX)  - `99`: Transaction PIN  - `9F0B`: Cardholder name (extended)  - `9F1F`: Track 1 discretionary data  - `9F20`: Track 2 discretionary data  For captures, this field is required for contact EMV transactions. Otherwise, it is optional.  For credits, this field is required for contact EMV stand-alone credits and contactless EMV stand-alone credits. Otherwise, it is optional.  **Important** For contact EMV captures, contact EMV stand-alone credits, and contactless EMV stand-alone credits, you must include the following tags in this field. For all other types of EMV transactions, the following tags are optional.   - `95`: Terminal verification results  - `9F10`: Issuer application data  - `9F26`: Application cryptogram   #### CyberSource through VisaNet - In Japan: 199 bytes - In other countries: String (252)  #### GPX This field only supports transactions from the following card types: - Visa - Mastercard - AMEX - Discover - Diners - JCB - Union Pay International  #### JCN Gateway The following tags must be included: - `4F`: Application identifier - `84`: Dedicated file name  Data length: 199 bytes  #### All other processors: String (999)  #### Used by Authorization: Optional Authorization Reversal: Optional Credit: Optional PIN Debit processing (purchase, credit and reversal): Optional
     */
    tags?: string;
    /**
     * Entity or service that provided the validation results returned in `chipValidationResult`.  Possible values:  - `02`: MasterCard on-behalf pre-validation service (The MasterCard authorization platform validated the M/Chip cryptogram before the authorization request reached the issuer.)  - `03`: MasterCard on-behalf stand-in service (The MasterCard authorization platform validated the M/Chip cryptogram because the issuer was not available.)  - `50`: Issuer  - `90`: Chip fall-back transaction downgrade process (The chip could not be read.)  This field is returned only for NFC payment network tokenization transactions with MasterCard.  **Note** No CyberSource through VisaNet acquirers support EMV at this time.
     */
    chipValidationType?: string;
    /**
     * Cryptogram validation results returned by the entity or service specified in `chipValidationType`.  Possible values: - `A`: Application cryptogram is valid, but the application transaction counter (ATC) is outside allowed range. (A large jump in ATC values may indicate data copying or other fraud.) - `C`: Chip validation was completed successfully. - `E`: Application cryptogram is valid but the ATC indicates possible replay fraud. - `F`: Format error in the chip data. - `G`: Application cryptogram is valid but is not a valid authorization request cryptogram (ARQC). - `I`: Application cryptogram is invalid. - `T`: Application cryptogram is valid but terminal verification results (TVR) or card verification results (CVR) are invalid. - `U`: Application cryptogram could not be validated because of a technical error.  This field is returned only for NFC payment network tokenization transactions with MasterCard.  **Note** No CyberSource through VisaNet acquirers support EMV at this time.
     */
    chipValidationResult?: string;
  }
  export interface PtsV2PaymentsPost201ResponseProcessingInformation {
    bankTransferOptions?: PtsV2PaymentsPost201ResponseProcessingInformationBankTransferOptions;
    /**
     * The possible values for the reply field are: - `true` : the airline data was included in the request to the processor. - `false` : the airline data was not included in the request to the processor.  Returned by authorization, capture, or credit services.
     */
    enhancedDataEnabled?: boolean;
  }
  export interface PtsV2PaymentsPost201ResponseProcessingInformationBankTransferOptions {
    /**
     * Method used for settlement.  Possible values: - `A`: Automated Clearing House (default for credits and for transactions using Canadian dollars) - `F`: Facsimile draft (U.S. dollars only) - `B`: Best possible (U.S. dollars only) (default if the field has not already been configured for your merchant ID)  For details, see `ecp_settlement_method` field description for credit cars and `ecp_debit_settlement_method` for debit cards in the [Electronic Check Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/EChecks_SCMP_API/html/)
     */
    settlementMethod?: string;
    /**
     * Level of fraud screening.  Possible values: - `1`: Validation — default if the field has not already been configured for your merchant ID - `2`: Verification  For a description of this feature and a list of supported processors, see \"Verification and Validation\" in the [Electronic Check Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/EChecks_SCMP_API/html/).
     */
    fraudScreeningLevel?: number | string;
  }
  export interface PtsV2PaymentsPost201ResponseProcessorInformation {
    /**
     * Flag that specifies the purpose of the authorization.  Possible values:  - `0`: Preauthorization  - `1`: Final authorization
     */
    authIndicator?: string;
    /**
     * Authorization code. Returned only when the processor returns this value.  The length of this value depends on your processor.  Returned by authorization service.  #### PIN debit Authorization code that is returned by the processor.  Returned by PIN debit credit.  #### Elavon Encrypted Account Number Program The returned value is OFFLINE.  #### TSYS Acquiring Solutions The returned value for a successful zero amount authorization is 000000.
     */
    approvalCode?: string;
    /**
     * Network transaction identifier (TID). You can use this value to identify a specific transaction when you are discussing the transaction with your processor. Not all processors provide this value.  Returned by the authorization service.  #### PIN debit Transaction identifier generated by the processor.  Returned by PIN debit credit.  #### GPX Processor transaction ID.  #### Cielo For Cielo, this value is the non-sequential unit (NSU) and is supported for all transactions. The value is generated by Cielo or the issuing bank.  #### Comercio Latino For Comercio Latino, this value is the proof of sale or non-sequential unit (NSU) number generated by the acquirers Cielo and Rede, or the issuing bank.  #### CyberSource through VisaNet and GPN For details about this value for CyberSource through VisaNet and GPN, see \"Network Transaction Identifiers\" in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  #### Moneris This value identifies the transaction on a host system. It contains the following information: - Terminal used to process the transaction - Shift during which the transaction took place - Batch number - Transaction number within the batch You must store this value. If you give the customer a receipt, display this value on the receipt.  **Example** For the value 66012345001069003: - Terminal ID = 66012345 - Shift number = 001 - Batch number = 069 - Transaction number = 003
     */
    transactionId?: string;
    /**
     * The description for this field is not available.
     */
    networkTransactionId?: string;
    /**
     * The description for this field is not available.
     */
    providerTransactionId?: string;
    /**
     * For most processors, this is the error message sent directly from the bank. Returned only when the processor returns this value.  **Important** Do not use this field to evaluate the result of the authorization.  #### PIN debit Response value that is returned by the processor or bank. **Important** Do not use this field to evaluate the results of the transaction request.  Returned by PIN debit credit, PIN debit purchase, and PIN debit reversal.  #### AIBMS If this value is `08`, you can accept the transaction if the customer provides you with identification.  #### Atos This value is the response code sent from Atos and it might also include the response code from the bank. Format: `aa,bb` with the two values separated by a comma and where: - `aa` is the two-digit error message from Atos. - `bb` is the optional two-digit error message from the bank.  #### Comercio Latino This value is the status code and the error or response code received from the processor separated by a colon. Format: [status code]:E[error code] or [status code]:R[response code] Example `2:R06`  #### JCN Gateway Processor-defined detail error code. The associated response category code is in the `processorInformation.responseCategoryCode` field. String (3)
     */
    responseCode?: string;
    /**
     * Used by Visa only and contains the response source/reason code that identifies the source of the response decision.
     */
    responseCodeSource?: string;
    /**
     * This field might contain information about a decline. This field is supported only for **CyberSource through VisaNet**.
     */
    responseDetails?: string;
    /**
     * Processor-defined response category code. The associated detail error code is in the `processorInformation.responseCode` or `issuerInformation.responseCode` field of the service you requested.  This field is supported only for:   - Japanese issuers  - Domestic transactions in Japan  - Comercio Latino—processor transaction ID required for troubleshooting  #### Maximum length for processors   - Comercio Latino: 36  - All other processors: 3
     */
    responseCategoryCode?: string;
    /**
     * Name of the Japanese acquirer that processed the transaction. Returned only for JCN Gateway. Please contact the CyberSource Japan Support Group for more information.
     */
    forwardedAcquirerCode?: string;
    avs?: PtsV2PaymentsPost201ResponseProcessorInformationAvs;
    cardVerification?: PtsV2PaymentsPost201ResponseProcessorInformationCardVerification;
    merchantAdvice?: PtsV2PaymentsPost201ResponseProcessorInformationMerchantAdvice;
    electronicVerificationResults?: PtsV2PaymentsPost201ResponseProcessorInformationElectronicVerificationResults;
    achVerification?: PtsV2PaymentsPost201ResponseProcessorInformationAchVerification;
    customer?: PtsV2PaymentsPost201ResponseProcessorInformationCustomer;
    consumerAuthenticationResponse?: PtsV2PaymentsPost201ResponseProcessorInformationConsumerAuthenticationResponse;
    /**
     * This field is returned only for **American Express Direct** and **CyberSource through VisaNet**. Returned by authorization and incremental authorization services.  #### American Express Direct  System trace audit number (STAN). This value identifies the transaction and is useful when investigating a chargeback dispute.  #### CyberSource through VisaNet  System trace number that must be printed on the customer’s receipt.
     */
    systemTraceAuditNumber?: string;
    /**
     * Visa-generated reference number that identifies a card-present transaction for which you provided one of the following:   - Visa primary account number (PAN)  - Visa-generated token for a PAN  This reference number serves as a link to the cardholder account and to all transactions for that account. This reply field is returned only for CyberSource through VisaNet.  **Note** On CyberSource through VisaNet, the value for this field corresponds to the following data in the TC 33 capture file: - Record: CP01 TCR8 - Position: 79-110 - Field: Payment Account Reference  The TC 33 Capture file contains information about the purchases and refunds that a merchant submits to CyberSource. CyberSource through VisaNet creates the TC 33 Capture file at the end of the day and sends it to the merchant’s acquirer, who uses this information to facilitate end-of-day clearing processing with payment networks.
     */
    paymentAccountReferenceNumber?: string;
    /**
     * Transaction integrity classification provided by Mastercard. This value specifies Mastercard’s evaluation of the transaction’s safety and security. This field is returned only for **CyberSource through VisaNet**.  For card-present transactions, possible values:   - `A1`: EMV or token in a secure, trusted environment  - `B1`: EMV or chip equivalent  - `C1`: Magnetic stripe  - `E1`: Key entered  - `U0`: Unclassified  For card-not-present transactions, possible values:   - `A2`: Digital transactions  - `B2`: Authenticated checkout  - `C2`: Transaction validation  - `D2`: Enhanced data  - `E2`: Generic messaging  - `U0`: Unclassified  For information about these values, contact Mastercard or your acquirer.  #### CyberSource through VisaNet  The value for this field corresponds to the following data in the TC 33 capture file,<sup>1</sup>: - Record: CP01 TCR6 - Position: 136-137 - Field: Mastercard Transaction Integrity Classification  <sup>1</sup> The TC 33 Capture file contains information about the purchases and refunds that a merchant submits to CyberSource. CyberSource through VisaNet creates the TC 33 Capture file at the end of the day and sends it to the merchant’s acquirer, who uses this information to facilitate end-of-day clearing processing with payment networks.
     */
    transactionIntegrityCode?: string;
    /**
     * Referral response number for a verbal authorization with FDMS Nashville when using an American Express card. Give this number to American Express when you call them for the verbal authorization.
     */
    amexVerbalAuthReferenceNumber?: string;
    /**
     * Mastercard service that was used for the transaction. Mastercard provides this value to CyberSource.  Possible value:  - 53: Mastercard card-on-file token service  #### CyberSource through VisaNet The value for this field corresponds to the following data in the TC 33 capture file: - Record: CP01 TCR6 - Position: 133-134 - Field: Mastercard Merchant on-behalf service. **Note** This field is returned only for CyberSource through VisaNet.
     */
    masterCardServiceCode?: string;
    /**
     * Result of the Mastercard card-on-file token service. Mastercard provides this value to CyberSource.  Possible values:   - `C`: Service completed successfully.  - `F`: One of the following:    - Incorrect Mastercard POS entry mode. The Mastercard POS entry mode should be 81 for an authorization or      authorization reversal.    - Incorrect Mastercard POS entry mode. The Mastercard POS entry mode should be 01 for a tokenized request.    - Token requestor ID is missing or formatted incorrectly.  - `I`: One of the following:    - Invalid token requestor ID.    - Suspended or deactivated token.    - Invalid token (not in mapping table).  - `T`: Invalid combination of token requestor ID and token.  - `U`: Expired token.  - `W`: Primary account number (PAN) listed in electronic warning bulletin.  **Note** This field is returned only for **CyberSource through VisaNet**.
     */
    masterCardServiceReplyCode?: string;
    /**
     * Type of authentication for which the transaction qualifies as determined by the Mastercard authentication service, which confirms the identity of the cardholder. Mastercard provides this value to CyberSource.  Possible values:   - `1`: Transaction qualifies for Mastercard authentication type 1.  - `2`: Transaction qualifies for Mastercard authentication type 2.  #### CyberSource through VisaNet The value for this field corresponds to the following data in the TC 33 capture file: - Record: CP01 TCR6 - Position: 132 - Field: Mastercard Member Defined service. **Note** This field is returned only for CyberSource through VisaNet.
     */
    masterCardAuthenticationType?: string;
    /**
     * Name of the Processor.
     */
    name?: string;
    routing?: PtsV2PaymentsPost201ResponseProcessorInformationRouting;
    /**
     * Identifier that was assigned to you by your acquirer. This value must be printed on the receipt.  #### Returned by Authorizations and Credits.  This reply field is only supported by merchants who have installed client software on their POS terminals and use these processors: - American Express Direct - Credit Mutuel-CIC - FDC Nashville Global - OmniPay Direct - SIX
     */
    merchantNumber?: string;
  }
  export interface PtsV2PaymentsPost201ResponseProcessorInformationAchVerification {
    /**
     * Results from the ACH verification service. For details about this service and the possible values for the results, see \"ACH Verification\" and \"Verification Codes\" in the [Electronic Check Services Using the SCMP API](https://apps.cybersource.com/library/documentation/dev_guides/EChecks_SCMP_API/html/).
     */
    resultCode?: string;
    /**
     * Raw results from the ACH verification service. For details about this service and the possible values for the raw results, see \"ACH Verification\" and \"Verification Codes\" in the [Electronic Check Services Using the SCMP API](https://apps.cybersource.com/library/documentation/dev_guides/EChecks_SCMP_API/html/).
     */
    resultCodeRaw?: string;
  }
  export interface PtsV2PaymentsPost201ResponseProcessorInformationAvs {
    /**
     * AVS result code.  Returned by authorization service.
     */
    code?: string;
    /**
     * AVS result code sent directly from the processor. Returned only when the processor returns this value. **Important** Do not use this field to evaluate the result of AVS. Use for debugging purposes only.  Returned by authorization service.
     */
    codeRaw?: string;
  }
  export interface PtsV2PaymentsPost201ResponseProcessorInformationCardVerification {
    /**
     * CVN result code.  For details, see the `auth_cv_result` reply field description in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
     */
    resultCode?: string;
    /**
     * CVN result code sent directly from the processor. Returned only when the processor returns this value.  **Important** Do not use this field to evaluate the result of card verification. Use for debugging purposes only.
     */
    resultCodeRaw?: string;
  }
  export interface PtsV2PaymentsPost201ResponseProcessorInformationConsumerAuthenticationResponse {
    /**
     * Mapped response code for Visa Secure and American Express SafeKey.
     */
    code?: string;
    /**
     * Raw response code sent directly from the processor for Visa Secure and American Express SafeKey:
     */
    codeRaw?: string;
  }
  export interface PtsV2PaymentsPost201ResponseProcessorInformationCustomer {
    /**
     * Personal identifier result. This field is supported only for Redecard in Brazil for CyberSource Latin American Processing. If you included `buyerInformation.personalIdentification[].ID` in the request, this value indicates whether or not `buyerInformation.personalIdentification[].ID` matched a value in a record on file. Returned only when the personal ID result is returned by the processor.  Possible values:   - `Y`: Match  - `N`: No match  - `K`: Not supported  - `U`: Unknown  - `Z`: No response returned **Note** CyberSource Latin American Processing is the name of a specific processing connection that CyberSource supports. In the CyberSource API documentation, CyberSource Latin American Processing does not refer to the general topic of processing in Latin America.The information in this field description is for the specific processing connection called CyberSource Latin American Processing. It is not for any other Latin American processors that CyberSource supports.
     */
    personalIdResult?: string;
  }
  export interface PtsV2PaymentsPost201ResponseProcessorInformationElectronicVerificationResults {
    /**
     * Mapped Electronic Verification response code for the customer’s name.  For details, see `auth_ev_name` field description in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
     */
    code?: string;
    /**
     * Raw Electronic Verification response code from the processor for the customer’s last name
     */
    codeRaw?: string;
    /**
     * Mapped Electronic Verification response code for the customer’s email address.  For details, see `auth_ev_email` field description in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
     */
    email?: string;
    /**
     * Raw Electronic Verification response code from the processor for the customer’s email address.
     */
    emailRaw?: string;
    /**
     * Mapped Electronic Verification response code for the customer’s phone number.  For details, see `auth_ev_phone_number` field description in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
     */
    phoneNumber?: string;
    /**
     * Raw Electronic Verification response code from the processor for the customer’s phone number.
     */
    phoneNumberRaw?: string;
    /**
     * Mapped Electronic Verification response code for the customer’s postal code.  For details, see `auth_ev_postal_code` field description in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
     */
    postalCode?: string;
    /**
     * Raw Electronic Verification response code from the processor for the customer’s postal code.
     */
    postalCodeRaw?: string;
    /**
     * Mapped Electronic Verification response code for the customer’s street address.  For details, see `auth_ev_street` field description in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
     */
    street?: string;
    /**
     * Raw Electronic Verification response code from the processor for the customer’s street address.
     */
    streetRaw?: string;
    /**
     * Mapped Electronic Verification response code for the customer’s name.
     */
    name?: string;
    /**
     * Raw Electronic Verification response code from the processor for the customer’s name.
     */
    nameRaw?: string;
  }
  export interface PtsV2PaymentsPost201ResponseProcessorInformationMerchantAdvice {
    /**
     * Reason the recurring payment transaction was declined. For some processors, this field is used only for Mastercard. For other processors, this field is used for Visa and Mastercard. And for other processors, this field is not implemented.  Possible values:   - `00`: Response not provided.  - `01`: New account information is available. Obtain the new information.  - `02`: Try again later.  - `03`: Do not try again. Obtain another type of payment from the customer.  - `04`: Problem with a token or a partial shipment indicator.  - `21`: Recurring payment cancellation service.  - `99`: An unknown value was returned from the processor.  For processor-specific information, see the `auth_merchant_advice_code` field in [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
     */
    code?: string;
    /**
     * Raw merchant advice code sent directly from the processor. This field is used only for Mastercard.  #### CyberSource through VisaNet The value for this field corresponds to the following data in the TC 33 capture file1: - Record: CP01 TCR7 - Position: 96-99 - Field: Response Data-Merchant Advice Code   For processor-specific information, see the `auth_merchant_advice_code_raw` field in [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
     */
    codeRaw?: string;
  }
  export interface PtsV2PaymentsPost201ResponseProcessorInformationRouting {
    /**
     * Indicates whether the transaction was routed on a credit network, a debit network, or the STAR signature debit network.  Possible values: - `C`: Credit network - `D`: Debit network (without signature) - `S`: STAR signature debit network  This field is supported only on FDC Nashville Global.  #### PIN debit Network that was used to route the transaction. This is the list of network codes:  | Network | Code | | --- | --- | | Accel | E | | AFFN | U | | Alaska Option | 3 | | CU24 | C | | Interlink | G | | Maestro | 8 | | NETS | P | | NYCE | F | | Pulse | H | | Shazam | 7 | | Star | M | | Visa | V |  Returned by PIN debit credit and PIN debit purchase.
     */
    network?: string;
    /**
     * Name of the network on which the transaction was routed.  This reply field is supported only on FDC Nashville Global.
     */
    networkName?: string;
    /**
     * Indicates whether you need to obtain the cardholder's signature.  Possible values: - `Y`: You need to obtain the cardholder's signature. - `N`: You do not need to obtain the cardholder's signature.  This field is supported only on FDC Nashville Global.
     */
    customerSignatureRequired?: string;
  }
  /**
   * Contains the result of risk assessment.
   */
  export interface PtsV2PaymentsPost201ResponseRiskInformation {
    profile?: PtsV2PaymentsPost201ResponseRiskInformationProfile;
    rules?: Array<PtsV2PaymentsPost201ResponseRiskInformationRules>;
    infoCodes?: PtsV2PaymentsPost201ResponseRiskInformationInfoCodes;
    velocity?: PtsV2PaymentsPost201ResponseRiskInformationVelocity;
    /**
     * You receive this field only if you subscribe to the Enhanced Case Management service. The priority level ranges from 1 (highest) to 5 (lowest); the default value is 3. If you do not assign a priority to your rules or to your profiles, the default value is given to the order.  For all possible values, see the `decision_case_priority` field description in the _Decision Manager Using the SCMP API Developer Guide_ on the [CyberSource Business Center.](https://ebc2.cybersource.com/ebc2/) Click **Decision Manager** > **Documentation** > **Guides** > _Decision Manager Using the SCMP API Developer Guide_ (PDF link).
     */
    casePriority?: number;
    /**
     * The customer's local time (`hh:mm:ss`), which is calculated from the transaction request time and the customer's billing address.  For details, see the `score_time_local` field description in the _Decision Manager Using the SCMP API Developer Guide_ on the [CyberSource Business Center.](https://ebc2.cybersource.com/ebc2/)
     */
    localTime?: string;
    score?: PtsV2PaymentsPost201ResponseRiskInformationScore;
    ipAddress?: PtsV2PaymentsPost201ResponseRiskInformationIpAddress;
    providers?: PtsV2PaymentsPost201ResponseRiskInformationProviders;
    travel?: PtsV2PaymentsPost201ResponseRiskInformationTravel;
  }
  export interface PtsV2PaymentsPost201ResponseRiskInformationInfoCodes {
    /**
     * List of information codes triggered by the order. These information codes were generated when you created the order and product velocity rules and are returned so that you can associate them with the rules.  Returned by Decision Manager service.
     */
    velocity?: Array<string>;
    /**
     * Indicates a mismatch between the customer’s billing and shipping addresses.  Returned by scoring service.
     */
    address?: Array<string>;
    /**
     * Indicates that customer information is associated with transactions that are either on the negative or the positive list.  Returned by scoring service.
     */
    customerList?: Array<string>;
    /**
     * Indicates excessive identity changes. The threshold is variable depending on the identity elements being compared. This field can contain one or more information codes, separated by carets (^).  Returned by scoring service.
     */
    identityChange?: Array<string>;
    /**
     * Indicates a problem with the customer’s email address, IP address, or billing address.  Returned by scoring service.
     */
    internet?: Array<string>;
    /**
     * Indicates a problem with the customer’s phone number.  Returned by scoring service.
     */
    phone?: Array<string>;
    /**
     * Indicates that the customer provided potentially suspicious information.  Returned by scoring service.
     */
    suspicious?: Array<string>;
    /**
     * Indicates that the customer has a high purchase frequency.  Returned by scoring service.
     */
    globalVelocity?: Array<string>;
  }
  /**
   * Contains detailed response information about the customer's IP address.
   */
  export interface PtsV2PaymentsPost201ResponseRiskInformationIpAddress {
    /**
     * Indicates whether the transaction IP address is associated with a known anonymous proxy.  For all possible values, see the `score_ip_anonymizer_status` field description in the _Decision Manager Using the SCMP API Developer Guide_ on the [CyberSource Business Center.](https://ebc2.cybersource.com/ebc2/) Click **Decision Manager** > **Documentation** > **Guides** > _Decision Manager Using the SCMP API Developer Guide_ (PDF link).
     */
    anonymizerStatus?: string;
    /**
     * Name of the city decoded from the IP address used directly or indirectly by the customer to send the order.  For all possible values, see the `score_ip_city` field description in the _Decision Manager Using the SCMP API Developer Guide_ on the [CyberSource Business Center.](https://ebc2.cybersource.com/ebc2/) Click **Decision Manager** > **Documentation** > **Guides** > _Decision Manager Using the SCMP API Developer Guide_ (PDF link).
     */
    locality?: string;
    /**
     * Name of the country decoded from the IP address used directly or indirectly by the customer to send the order.  For all possible values, see the `score_ip_country` field description in the _Decision Manager Using the SCMP API Developer Guide_ on the [CyberSource Business Center.](https://ebc2.cybersource.com/ebc2/) Click **Decision Manager** > **Documentation** > **Guides** > _Decision Manager Using the SCMP API Developer Guide_ (PDF link).
     */
    country?: string;
    /**
     * Name of the state decoded from the IP address used directly or indirectly by the customer to send the order.  For all possible values, see the `score_ip_state` field description in the _Decision Manager Using the SCMP API Developer Guide_ on the [CyberSource Business Center.](https://ebc2.cybersource.com/ebc2/) Click **Decision Manager** > **Documentation** > **Guides** > _Decision Manager Using the SCMP API Developer Guide_ (PDF link).
     */
    administrativeArea?: string;
    /**
     * Routing method decoded from the IP address used directly or indirectly by the customer to send the order.  For all possible values, see the `score_ip_routing_method` field description in the _Decision Manager Using the SCMP API Developer Guide_ on the [CyberSource Business Center.](https://ebc2.cybersource.com/ebc2/) Click **Decision Manager** > **Documentation** > **Guides** > _Decision Manager Using the SCMP API Developer Guide_ (PDF link).
     */
    routingMethod?: string;
    /**
     * Provides the name of the organization that owns the ASN. The carrier is responsible for the traffic carried on the network or set of networks designated as an Autonomous System (AS) and identified by the ASN. While there are more than 27,000 active ASNs, there are fewer carriers, because a single carrier often manages several ASNs.
     */
    carrier?: string;
    /**
     * The Registering Organization is the entity responsible for the actions and content associated with a given block of IP addresses. This is in contrast to the carrier, which is responsible for the routing of traffic for network blocks. Registering Organizations include many types of entities, including corporate, government, or educational entities, and ISPs managing the allocation and use of network blocks.
     */
    organization?: string;
  }
  export interface PtsV2PaymentsPost201ResponseRiskInformationProfile {
    /**
     * Name of the active profile chosen by the profile selector. If no profile selector exists, the default active profile is chosen.  **Note** By default, your default profile is the active profile, or the Profile Selector chooses the active profile. Use this field only if you want to specify the name of a different profile. The passed-in profile will then become the active profile.
     */
    name?: string;
    /**
     * Name of the queue where orders that are not automatically accepted are sent.
     */
    desinationQueue?: string;
    /**
     * Name of the profile selector rule that chooses the profile to use for the transaction. If no profile selector exists, the value is Default Active Profile.
     */
    selectorRule?: string;
    action?: "PAYERAUTH_INVOKE" | "PAYERAUTH_SKIP" | "PAYERAUTH_EXTERNAL";
  }
  export interface PtsV2PaymentsPost201ResponseRiskInformationProviders {
    providerName?: Array<PtsV2PaymentsPost201ResponseRiskInformationProvidersProviderName>;
  }
  /**
   * Name of the 3rd party provider, for example, Emailage.  For all possible values, see the `decision_provider_#_name` field description in the _Decision Manager Using the SCMP API Developer Guide_ on the [CyberSource Business Center.](https://ebc2.cybersource.com/ebc2/) Click **Decision Manager** > **Documentation** > **Guides** > _Decision Manager Using the SCMP API Developer Guide_ (PDF link).
   */
  export interface PtsV2PaymentsPost201ResponseRiskInformationProvidersProviderName {
    fieldName?: Array<string>;
    fieldValue?: Array<string>;
  }
  export interface PtsV2PaymentsPost201ResponseRiskInformationRules {
    /**
     * Description of the rule as it appears in the Profile Editor.
     */
    name?: string;
    /**
     * Summarizes the result for the rule according to the setting that you chose in the Profile Editor. This field can contain one of the following values: - `IGNORE` - `REVIEW` - `REJECT` - `ACCEPT`
     */
    decision?: string;
  }
  export interface PtsV2PaymentsPost201ResponseRiskInformationScore {
    factorCodes?: Array<string>;
    /**
     * Name of the score model used for the transaction. If you did not include a custom model in your request, this field contains the name of CyberSource’s default model.  For all possible values, see the `score_model_used` field description in the _Decision Manager Using the SCMP API Developer Guide_ on the [CyberSource Business Center.](https://ebc2.cybersource.com/ebc2/) Click **Decision Manager** > **Documentation** > **Guides** > _Decision Manager Using the SCMP API Developer Guide_ (PDF link).
     */
    modelUsed?: string;
    /**
     * Total score calculated for this order. The value cannot be negative.  For all possible values, see the `score_score_result` field description in the _Decision Manager Using the SCMP API Developer Guide_ on the [CyberSource Business Center.](https://ebc2.cybersource.com/ebc2/) Click **Decision Manager** > **Documentation** > **Guides** > _Decision Manager Using the SCMP API Developer Guide_ (PDF link).
     */
    result?: string;
  }
  export interface PtsV2PaymentsPost201ResponseRiskInformationTravel {
    actualFinalDestination?: PtsV2PaymentsPost201ResponseRiskInformationTravelActualFinalDestination;
    firstDeparture?: PtsV2PaymentsPost201ResponseRiskInformationTravelFirstDeparture;
    firstDestination?: PtsV2PaymentsPost201ResponseRiskInformationTravelFirstDestination;
    lastDestination?: PtsV2PaymentsPost201ResponseRiskInformationTravelLastDestination;
  }
  export interface PtsV2PaymentsPost201ResponseRiskInformationTravelActualFinalDestination {
    /**
     * Country of actual final destination on the route.
     */
    country?: string;
    /**
     * City of actual final destination on the route.
     */
    locality?: string;
    /**
     * Latitude of actual final destination on the route.
     */
    latitude?: string;
    /**
     * Longitude of actual final destination on the route.
     */
    longitude?: string;
  }
  export interface PtsV2PaymentsPost201ResponseRiskInformationTravelFirstDeparture {
    /**
     * Country of first departure on the route.
     */
    country?: string;
    /**
     * City of first departure on the route.
     */
    locality?: string;
    /**
     * Latitude of first departure on the route.
     */
    latitude?: string;
    /**
     * Longitude of first departure on the route.
     */
    longitude?: string;
  }
  export interface PtsV2PaymentsPost201ResponseRiskInformationTravelFirstDestination {
    /**
     * Country of first destination on the route.
     */
    country?: string;
    /**
     * City of first destination on the route.
     */
    locality?: string;
    /**
     * Latitude of first destination on the route.
     */
    latitude?: string;
    /**
     * Longitude of first destination on the route.
     */
    longitude?: string;
  }
  export interface PtsV2PaymentsPost201ResponseRiskInformationTravelLastDestination {
    /**
     * Country of last destination on the route.
     */
    country?: string;
    /**
     * City of last destination on the route.
     */
    locality?: string;
    /**
     * Latitude of last destination on the route.
     */
    latitude?: string;
    /**
     * Longitude of last destination on the route.
     */
    longitude?: string;
  }
  export interface PtsV2PaymentsPost201ResponseRiskInformationVelocity {
    /**
     * List of information codes triggered by the order. These information codes were generated when you created the order and product velocity rules and are returned so that you can associate them with the rules.  Returned by scoring service.
     */
    morphing?: Array<PtsV2PaymentsPost201ResponseRiskInformationVelocityMorphing>;
    address?: Array<string>;
  }
  export interface PtsV2PaymentsPost201ResponseRiskInformationVelocityMorphing {
    /**
     * Morphing count specified by the number #.  **Note** The count is not returned for the initial transaction.
     */
    count?: number;
    /**
     * Field name of the morphing element. specified by the setting that you chose in the Velocity Editor.  For all possible values, see the `decisionReply_morphingElement_#_fieldName` field description in the _Decision Manager Using the SCMP API Developer Guide_ on the [CyberSource Business Center.](https://ebc2.cybersource.com/ebc2/) Click **Decision Manager** > **Documentation** > **Guides** > _Decision Manager Using the SCMP API Developer Guide_ (PDF link).
     */
    fieldName?: string;
    /**
     * Identifier that CyberSource assigned to the velocity rule specified by the number #.  For all possible values, see the `decision_velocity_morphing_#_info_code` field description in the _Decision Manager Using the SCMP API Developer Guide_ on the [CyberSource Business Center.](https://ebc2.cybersource.com/ebc2/) Click **Decision Manager** > **Documentation** > **Guides** > _Decision Manager Using the SCMP API Developer Guide_ (PDF link).
     */
    informationCode?: string;
  }
  export interface PtsV2PaymentsPost201ResponseTokenInformation {
    /**
     * A value of true means the card number or bank account used to create an Instrument Identifier was new and did not already exist in the token vault. A value of false means the card number or bank account used to create an Instrument Identifier already existed in the token vault.
     */
    instrumentidentifierNew?: boolean;
    customer?: PtsV2PaymentsPost201ResponseTokenInformationCustomer;
    paymentInstrument?: PtsV2PaymentsPost201ResponseTokenInformationPaymentInstrument;
    shippingAddress?: PtsV2PaymentsPost201ResponseTokenInformationShippingAddress;
    instrumentIdentifier?: PtsV2PaymentsPost201ResponseTokenInformationInstrumentIdentifier;
  }
  export interface PtsV2PaymentsPost201ResponseTokenInformationCustomer {
    /**
     * Unique identifier for the Customer token that was created as part of a bundled TOKEN_CREATE action.
     */
    id?: string;
  }
  export interface PtsV2PaymentsPost201ResponseTokenInformationInstrumentIdentifier {
    /**
     * Unique identifier for the Instrument Identifier token that was created as part of a bundled TOKEN_CREATE action.
     */
    id?: string;
    /**
     * Issuers state for the card number. Valid values: - ACTIVE - CLOSED : The account has been closed.
     */
    state?: string;
  }
  export interface PtsV2PaymentsPost201ResponseTokenInformationPaymentInstrument {
    /**
     * Unique identifier for the Payment Instrument token that was created as part of a bundled TOKEN_CREATE action.
     */
    id?: string;
  }
  export interface PtsV2PaymentsPost201ResponseTokenInformationShippingAddress {
    /**
     * Unique identifier for the Customers Shipping Address token that was created as part of a bundled TOKEN_CREATE action.
     */
    id?: string;
  }
  export interface PtsV2PaymentsPost400Response {
    /**
     * Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ` **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The `T` separates the date and the time. The `Z` indicates UTC.  Returned by authorization service.  #### PIN debit Time when the PIN debit credit, PIN debit purchase or PIN debit reversal was requested.  Returned by PIN debit credit, PIN debit purchase or PIN debit reversal.
     */
    submitTimeUtc?: string;
    /**
     * The status of the submitted transaction.  Possible values:  - INVALID_REQUEST
     */
    status?: string;
    /**
     * The reason of the status.  Possible values:  - MISSING_FIELD  - INVALID_DATA  - DUPLICATE_REQUEST  - INVALID_CARD  - CARD_TYPE_NOT_ACCEPTED  - INVALID_MERCHANT_CONFIGURATION  - PROCESSOR_UNAVAILABLE  - INVALID_AMOUNT  - INVALID_CARD_TYPE  - INVALID_PAYMENT_ID  - DEBIT_CARD_USEAGE_EXCEEDD_LIMIT
     */
    reason?: string;
    /**
     * The detail message related to the status and reason listed above.
     */
    message?: string;
    details?: Array<PtsV2PaymentsPost201ResponseErrorInformationDetails>;
  }
  export interface PtsV2PaymentsPost502Response {
    /**
     * Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ` **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The `T` separates the date and the time. The `Z` indicates UTC.  Returned by authorization service.  #### PIN debit Time when the PIN debit credit, PIN debit purchase or PIN debit reversal was requested.  Returned by PIN debit credit, PIN debit purchase or PIN debit reversal.
     */
    submitTimeUtc?: string;
    /**
     * The status of the submitted transaction.  Possible values:  - SERVER_ERROR
     */
    status?: string;
    /**
     * The reason of the status.  Possible values:  - SYSTEM_ERROR  - SERVER_TIMEOUT  - SERVICE_TIMEOUT
     */
    reason?: string;
    /**
     * The detail message related to the status and reason listed above.
     */
    message?: string;
  }
  export interface PtsV2PaymentsRefundPost201Response {
    links?: PtsV2PaymentsRefundPost201ResponseLinks;
    /**
     * An unique identification number to identify the submitted request. It is also appended to the endpoint of the resource.  On incremental authorizations, this value with be the same as the identification number returned in the original authorization response.  #### PIN debit Returned for all PIN debit services.
     */
    id?: string;
    /**
     * Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ` **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The `T` separates the date and the time. The `Z` indicates UTC.  Returned by authorization service.  #### PIN debit Time when the PIN debit credit, PIN debit purchase or PIN debit reversal was requested.  Returned by PIN debit credit, PIN debit purchase or PIN debit reversal.
     */
    submitTimeUtc?: string;
    /**
     * The status of the submitted transaction.  Possible values:  - PENDING
     */
    status?: string;
    /**
     * Reference number for the transaction. This value is not returned for all processors.  Returned by authorization service.  ##### PIN debit Returned by PIN debit credit, PIN debit purchase, and PIN debit reversal.  #### Atos Positive string (6)  #### All other processors String (60)
     */
    reconciliationId?: string;
    clientReferenceInformation?: PtsV2PaymentsPost201ResponseClientReferenceInformation;
    refundAmountDetails?: PtsV2PaymentsRefundPost201ResponseRefundAmountDetails;
    processorInformation?: PtsV2PaymentsRefundPost201ResponseProcessorInformation;
    orderInformation?: PtsV2PaymentsRefundPost201ResponseOrderInformation;
    pointOfSaleInformation?: PtsV2PaymentsCapturesPost201ResponsePointOfSaleInformation;
  }
  export interface PtsV2PaymentsRefundPost201ResponseLinks {
    self?: PtsV2PaymentsPost201ResponseLinksSelf;
    _void?: PtsV2PaymentsPost201ResponseLinksSelf;
  }
  export interface PtsV2PaymentsRefundPost201ResponseOrderInformation {
    invoiceDetails?: PtsV2PaymentsCapturesPost201ResponseOrderInformationInvoiceDetails;
  }
  export interface PtsV2PaymentsRefundPost201ResponseProcessorInformation {
    /**
     * Processor transaction ID.  This value identifies the transaction on a host system. This value is supported only for Moneris. It contains this information:   - Terminal used to process the transaction  - Shift during which the transaction took place  - Batch number  - Transaction number within the batch  You must store this value. If you give the customer a receipt, display this value on the receipt.  Example For the value 66012345001069003:   - Terminal ID = 66012345  - Shift number = 001  - Batch number = 069  - Transaction number = 003
     */
    transactionId?: string;
    /**
     * Name of the Japanese acquirer that processed the transaction. Returned only for JCN Gateway. Please contact the CyberSource Japan Support Group for more information.
     */
    forwardedAcquirerCode?: string;
    /**
     * Identifier that was assigned to you by your acquirer. This value must be printed on the receipt.  #### Returned by Authorizations and Credits.  This reply field is only supported by merchants who have installed client software on their POS terminals and use these processors: - American Express Direct - Credit Mutuel-CIC - FDC Nashville Global - OmniPay Direct - SIX
     */
    merchantNumber?: string;
    /**
     * For most processors, this is the error message sent directly from the bank. Returned only when the processor returns this value.  **Important** Do not use this field to evaluate the result of the authorization.  #### PIN debit Response value that is returned by the processor or bank. **Important** Do not use this field to evaluate the results of the transaction request.  Returned by PIN debit credit, PIN debit purchase, and PIN debit reversal.  #### AIBMS If this value is `08`, you can accept the transaction if the customer provides you with identification.  #### Atos This value is the response code sent from Atos and it might also include the response code from the bank. Format: `aa,bb` with the two values separated by a comma and where: - `aa` is the two-digit error message from Atos. - `bb` is the optional two-digit error message from the bank.  #### Comercio Latino This value is the status code and the error or response code received from the processor separated by a colon. Format: [status code]:E[error code] or [status code]:R[response code] Example `2:R06`  #### JCN Gateway Processor-defined detail error code. The associated response category code is in the `processorInformation.responseCategoryCode` field. String (3)
     */
    responseCode?: string;
    achVerification?: PtsV2PaymentsPost201ResponseProcessorInformationAchVerification;
  }
  export interface PtsV2PaymentsRefundPost201ResponseRefundAmountDetails {
    /**
     * Total amount of the refund.
     */
    refundAmount?: string;
    /**
     * Currency used for the order. Use the three-character [ISO Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf)  #### Used by **Authorization** Required field.  **Authorization Reversal** For an authorization reversal (`reversalInformation`) or a capture (`processingOptions.capture` is set to `true`), you must use the same currency that you used in your payment authorization request.  #### PIN Debit Currency for the amount you requested for the PIN debit purchase. This value is returned for partial authorizations. The issuing bank can approve a partial amount if the balance on the debit card is less than the requested transaction amount. For the possible values, see the [ISO Standard Currency Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/currencies.pdf). Returned by PIN debit purchase.  For PIN debit reversal requests, you must use the same currency that was used for the PIN debit purchase or PIN debit credit that you are reversing. For the possible values, see the [ISO Standard Currency Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/currencies.pdf).  Required field for PIN Debit purchase and PIN Debit credit requests. Optional field for PIN Debit reversal requests.  #### GPX This field is optional for reversing an authorization or credit.  #### DCC for First Data Your local currency. For details, see the `currency` field description in [Dynamic Currency Conversion For First Data Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/DCC_FirstData_SCMP/DCC_FirstData_SCMP_API.pdf).  #### Tax Calculation Required for international tax and value added tax only. Optional for U.S. and Canadian taxes. Your local currency.
     */
    currency?: string;
  }
  export interface PtsV2PaymentsRefundPost400Response {
    /**
     * Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ` **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The `T` separates the date and the time. The `Z` indicates UTC.  Returned by authorization service.  #### PIN debit Time when the PIN debit credit, PIN debit purchase or PIN debit reversal was requested.  Returned by PIN debit credit, PIN debit purchase or PIN debit reversal.
     */
    submitTimeUtc?: string;
    /**
     * The status of the submitted transaction.  Possible values:  - INVALID_REQUEST
     */
    status?: string;
    /**
     * The reason of the status.  Possible values:  - MISSING_FIELD  - INVALID_DATA  - DUPLICATE_REQUEST  - INVALID_CARD  - INVALID_MERCHANT_CONFIGURATION  - INVALID_AMOUNT  - CAPTURE_ALREADY_VOIDED  - ACCOUNT_NOT_ALLOWED_CREDIT
     */
    reason?: string;
    /**
     * The detail message related to the status and reason listed above.
     */
    message?: string;
    details?: Array<PtsV2PaymentsPost201ResponseErrorInformationDetails>;
  }
  export interface PtsV2PaymentsReversalsPost201Response {
    links?: PtsV2IncrementalAuthorizationPatch201ResponseLinks;
    /**
     * An unique identification number to identify the submitted request. It is also appended to the endpoint of the resource.  On incremental authorizations, this value with be the same as the identification number returned in the original authorization response.  #### PIN debit Returned for all PIN debit services.
     */
    id?: string;
    /**
     * Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ` **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The `T` separates the date and the time. The `Z` indicates UTC.  Returned by authorization service.  #### PIN debit Time when the PIN debit credit, PIN debit purchase or PIN debit reversal was requested.  Returned by PIN debit credit, PIN debit purchase or PIN debit reversal.
     */
    submitTimeUtc?: string;
    /**
     * The status of the submitted transaction.  Possible values:  - REVERSED
     */
    status?: string;
    transactionId?: string;
    /**
     * Reference number for the transaction. This value is not returned for all processors.  Returned by authorization service.  ##### PIN debit Returned by PIN debit credit, PIN debit purchase, and PIN debit reversal.  #### Atos Positive string (6)  #### All other processors String (60)
     */
    reconciliationId?: string;
    clientReferenceInformation?: PtsV2PaymentsPost201ResponseClientReferenceInformation;
    reversalAmountDetails?: PtsV2PaymentsReversalsPost201ResponseReversalAmountDetails;
    processorInformation?: PtsV2PaymentsReversalsPost201ResponseProcessorInformation;
    issuerInformation?: PtsV2PaymentsReversalsPost201ResponseIssuerInformation;
    authorizationInformation?: PtsV2PaymentsReversalsPost201ResponseAuthorizationInformation;
    pointOfSaleInformation?: Ptsv2paymentsidreversalsPointOfSaleInformation;
  }
  export interface PtsV2PaymentsReversalsPost201ResponseAuthorizationInformation {
    /**
     * The authorization code returned by the processor.
     */
    approvalCode?: string;
    /**
     * Reply flag for the original transaction.
     */
    reasonCode?: string;
    /**
     * Flag indicating whether a full authorization reversal was successfully submitted.  Possible values: - Y: The authorization reversal was successfully submitted. - N: The authorization reversal was not successfully submitted. You must send a credit request for a refund.  This field is supported only for **FDC Nashville Global**.
     */
    reversalSubmitted?: string;
  }
  export interface PtsV2PaymentsReversalsPost201ResponseIssuerInformation {
    /**
     * Additional authorization code that must be printed on the receipt when returned by the processor.  This value is generated by the processor and is returned only for a successful transaction.  This reply field is supported only for these processors: - FDC Nashville Global - SIX
     */
    responseCode?: string;
  }
  export interface PtsV2PaymentsReversalsPost201ResponseProcessorInformation {
    /**
     * Processor transaction ID.  This value identifies the transaction on a host system. This value is supported only for Moneris. It contains this information:   - Terminal used to process the transaction  - Shift during which the transaction took place  - Batch number  - Transaction number within the batch  You must store this value. If you give the customer a receipt, display this value on the receipt.  Example For the value 66012345001069003:   - Terminal ID = 66012345  - Shift number = 001  - Batch number = 069  - Transaction number = 003
     */
    transactionId?: string;
    /**
     * For most processors, this is the error message sent directly from the bank. Returned only when the processor returns this value.  **Important** Do not use this field to evaluate the result of the authorization.  #### PIN debit Response value that is returned by the processor or bank. **Important** Do not use this field to evaluate the results of the transaction request.  Returned by PIN debit credit, PIN debit purchase, and PIN debit reversal.  #### AIBMS If this value is `08`, you can accept the transaction if the customer provides you with identification.  #### Atos This value is the response code sent from Atos and it might also include the response code from the bank. Format: `aa,bb` with the two values separated by a comma and where: - `aa` is the two-digit error message from Atos. - `bb` is the optional two-digit error message from the bank.  #### Comercio Latino This value is the status code and the error or response code received from the processor separated by a colon. Format: [status code]:E[error code] or [status code]:R[response code] Example `2:R06`  #### JCN Gateway Processor-defined detail error code. The associated response category code is in the `processorInformation.responseCategoryCode` field. String (3)
     */
    responseCode?: string;
    /**
     * Processor-defined response category code. The associated detail error code is in the `processorInformation.responseCode` or `issuerInformation.responseCode` field of the service you requested.  This field is supported only for:   - Japanese issuers  - Domestic transactions in Japan  - Comercio Latino—processor transaction ID required for troubleshooting  #### Maximum length for processors   - Comercio Latino: 36  - All other processors: 3
     */
    responseCategoryCode?: string;
    /**
     * Name of the Japanese acquirer that processed the transaction. Returned only for JCN Gateway. Please contact the CyberSource Japan Support Group for more information.
     */
    forwardedAcquirerCode?: string;
    /**
     * Mastercard service that was used for the transaction. Mastercard provides this value to CyberSource.  Possible value:  - 53: Mastercard card-on-file token service  #### CyberSource through VisaNet The value for this field corresponds to the following data in the TC 33 capture file: - Record: CP01 TCR6 - Position: 133-134 - Field: Mastercard Merchant on-behalf service. **Note** This field is returned only for CyberSource through VisaNet.
     */
    masterCardServiceCode?: string;
    /**
     * Result of the Mastercard card-on-file token service. Mastercard provides this value to CyberSource.  Possible values:   - `C`: Service completed successfully.  - `F`: One of the following:    - Incorrect Mastercard POS entry mode. The Mastercard POS entry mode should be 81 for an authorization or      authorization reversal.    - Incorrect Mastercard POS entry mode. The Mastercard POS entry mode should be 01 for a tokenized request.    - Token requestor ID is missing or formatted incorrectly.  - `I`: One of the following:    - Invalid token requestor ID.    - Suspended or deactivated token.    - Invalid token (not in mapping table).  - `T`: Invalid combination of token requestor ID and token.  - `U`: Expired token.  - `W`: Primary account number (PAN) listed in electronic warning bulletin.  **Note** This field is returned only for **CyberSource through VisaNet**.
     */
    masterCardServiceReplyCode?: string;
  }
  export interface PtsV2PaymentsReversalsPost201ResponseReversalAmountDetails {
    /**
     * Total reversed amount.  Returned by authorization reversal.
     */
    reversedAmount?: string;
    /**
     * Amount of the original transaction.  Returned by authorization reversal and void.
     */
    originalTransactionAmount?: string;
    /**
     * Currency used for the order. Use the three-character [ISO Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf)  #### Used by **Authorization** Required field.  **Authorization Reversal** For an authorization reversal (`reversalInformation`) or a capture (`processingOptions.capture` is set to `true`), you must use the same currency that you used in your payment authorization request.  #### PIN Debit Currency for the amount you requested for the PIN debit purchase. This value is returned for partial authorizations. The issuing bank can approve a partial amount if the balance on the debit card is less than the requested transaction amount. For the possible values, see the [ISO Standard Currency Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/currencies.pdf). Returned by PIN debit purchase.  For PIN debit reversal requests, you must use the same currency that was used for the PIN debit purchase or PIN debit credit that you are reversing. For the possible values, see the [ISO Standard Currency Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/currencies.pdf).  Required field for PIN Debit purchase and PIN Debit credit requests. Optional field for PIN Debit reversal requests.  #### GPX This field is optional for reversing an authorization or credit.  #### DCC for First Data Your local currency. For details, see the `currency` field description in [Dynamic Currency Conversion For First Data Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/DCC_FirstData_SCMP/DCC_FirstData_SCMP_API.pdf).  #### Tax Calculation Required for international tax and value added tax only. Optional for U.S. and Canadian taxes. Your local currency.
     */
    currency?: string;
  }
  export interface PtsV2PaymentsReversalsPost400Response {
    /**
     * Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ` **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The `T` separates the date and the time. The `Z` indicates UTC.  Returned by authorization service.  #### PIN debit Time when the PIN debit credit, PIN debit purchase or PIN debit reversal was requested.  Returned by PIN debit credit, PIN debit purchase or PIN debit reversal.
     */
    submitTimeUtc?: string;
    /**
     * The status of the submitted transaction.  Possible values:  - INVALID_REQUEST
     */
    status?: string;
    /**
     * The reason of the status.  Possible values:  - MISSING_FIELD  - INVALID_DATA  - DUPLICATE_REQUEST  - INVALID_MERCHANT_CONFIGURATION  - PROCESSOR_UNAVAILABLE  - AUTH_ALREADY_REVERSED  - TRANSACTION_ALREADY_SETTLED  - INVALID_AMOUNT  - MISSING_AUTH  - TRANSACTION_ALREADY_REVERSED_OR_SETTLED
     */
    reason?: string;
    /**
     * The detail message related to the status and reason listed above.
     */
    message?: string;
    details?: Array<PtsV2PaymentsPost201ResponseErrorInformationDetails>;
  }
  export interface PtsV2PaymentsVoidsPost201Response {
    links?: PtsV2IncrementalAuthorizationPatch201ResponseLinks;
    /**
     * An unique identification number to identify the submitted request. It is also appended to the endpoint of the resource.  On incremental authorizations, this value with be the same as the identification number returned in the original authorization response.  #### PIN debit Returned for all PIN debit services.
     */
    id?: string;
    /**
     * Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ` **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The `T` separates the date and the time. The `Z` indicates UTC.  Returned by authorization service.  #### PIN debit Time when the PIN debit credit, PIN debit purchase or PIN debit reversal was requested.  Returned by PIN debit credit, PIN debit purchase or PIN debit reversal.
     */
    submitTimeUtc?: string;
    /**
     * The status of the submitted transaction.  Possible values:  - VOIDED
     */
    status?: string;
    clientReferenceInformation?: PtsV2PaymentsPost201ResponseClientReferenceInformation;
    voidAmountDetails?: PtsV2PaymentsVoidsPost201ResponseVoidAmountDetails;
    processorInformation?: PtsV2PaymentsVoidsPost201ResponseProcessorInformation;
  }
  export interface PtsV2PaymentsVoidsPost201ResponseProcessorInformation {
    /**
     * For most processors, this is the error message sent directly from the bank. Returned only when the processor returns this value.  **Important** Do not use this field to evaluate the result of the authorization.  #### PIN debit Response value that is returned by the processor or bank. **Important** Do not use this field to evaluate the results of the transaction request.  Returned by PIN debit credit, PIN debit purchase, and PIN debit reversal.  #### AIBMS If this value is `08`, you can accept the transaction if the customer provides you with identification.  #### Atos This value is the response code sent from Atos and it might also include the response code from the bank. Format: `aa,bb` with the two values separated by a comma and where: - `aa` is the two-digit error message from Atos. - `bb` is the optional two-digit error message from the bank.  #### Comercio Latino This value is the status code and the error or response code received from the processor separated by a colon. Format: [status code]:E[error code] or [status code]:R[response code] Example `2:R06`  #### JCN Gateway Processor-defined detail error code. The associated response category code is in the `processorInformation.responseCategoryCode` field. String (3)
     */
    responseCode?: string;
  }
  export interface PtsV2PaymentsVoidsPost201ResponseVoidAmountDetails {
    /**
     * Total amount of the void.  #### PIN Debit Amount of the reversal.  Returned by PIN debit reversal.
     */
    voidAmount?: string;
    /**
     * Amount of the original transaction.
     */
    originalTransactionAmount?: string;
    /**
     * Currency used for the order. Use the three-character [ISO Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf)  #### Used by **Authorization** Required field.  **Authorization Reversal** For an authorization reversal (`reversalInformation`) or a capture (`processingOptions.capture` is set to `true`), you must use the same currency that you used in your payment authorization request.  #### PIN Debit Currency for the amount you requested for the PIN debit purchase. This value is returned for partial authorizations. The issuing bank can approve a partial amount if the balance on the debit card is less than the requested transaction amount. For the possible values, see the [ISO Standard Currency Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/currencies.pdf). Returned by PIN debit purchase.  For PIN debit reversal requests, you must use the same currency that was used for the PIN debit purchase or PIN debit credit that you are reversing. For the possible values, see the [ISO Standard Currency Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/currencies.pdf).  Required field for PIN Debit purchase and PIN Debit credit requests. Optional field for PIN Debit reversal requests.  #### GPX This field is optional for reversing an authorization or credit.  #### DCC for First Data Your local currency. For details, see the `currency` field description in [Dynamic Currency Conversion For First Data Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/DCC_FirstData_SCMP/DCC_FirstData_SCMP_API.pdf).  #### Tax Calculation Required for international tax and value added tax only. Optional for U.S. and Canadian taxes. Your local currency.
     */
    currency?: string;
  }
  export interface PtsV2PaymentsVoidsPost400Response {
    /**
     * Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ` **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The `T` separates the date and the time. The `Z` indicates UTC.  Returned by authorization service.  #### PIN debit Time when the PIN debit credit, PIN debit purchase or PIN debit reversal was requested.  Returned by PIN debit credit, PIN debit purchase or PIN debit reversal.
     */
    submitTimeUtc?: string;
    /**
     * The status of the submitted transaction.  Possible values:  - INVALID_REQUEST
     */
    status?: string;
    /**
     * The reason of the status.  Possible values:  - MISSING_FIELD  - INVALID_DATA  - DUPLICATE_REQUEST  - INVALID_MERCHANT_CONFIGURATION  - NOT_VOIDABLE
     */
    reason?: string;
    /**
     * The detail message related to the status and reason listed above.
     */
    message?: string;
    details?: Array<PtsV2PaymentsPost201ResponseErrorInformationDetails>;
  }
  export interface PtsV2PayoutsPost201Response {
    links?: PtsV2IncrementalAuthorizationPatch201ResponseLinks;
    /**
     * An unique identification number to identify the submitted request. It is also appended to the endpoint of the resource.  On incremental authorizations, this value with be the same as the identification number returned in the original authorization response.  #### PIN debit Returned for all PIN debit services.
     */
    id?: string;
    /**
     * Time of request in UTC. `Format: YYYY-MM-DDThh:mm:ssZ`  Example 2016-08-11T22:47:57Z equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The T separates the date and the time. The Z indicates UTC.
     */
    submitTimeUtc?: string;
    /**
     * The status of the submitted transaction.  Possible values:  - ACCEPTED  - DECLINED  - INVALID_REQUEST
     */
    status?: string;
    /**
     * Cybersource or merchant generated transaction reference number. This is sent to the processor and is echoed back in the response to the merchant. This is This value is used for reconciliation purposes.
     */
    reconciliationId?: string;
    errorInformation?: PtsV2PayoutsPost201ResponseErrorInformation;
    clientReferenceInformation?: PtsV2PaymentsPost201ResponseClientReferenceInformation;
    merchantInformation?: PtsV2PayoutsPost201ResponseMerchantInformation;
    orderInformation?: PtsV2PayoutsPost201ResponseOrderInformation;
    processorInformation?: PtsV2PayoutsPost201ResponseProcessorInformation;
    recipientInformation?: PtsV2PayoutsPost201ResponseRecipientInformation;
  }
  export interface PtsV2PayoutsPost201ResponseErrorInformation {
    /**
     * The reason of the status.  Possible values:  - EXPIRED_CARD  - PROCESSOR_DECLINED  - STOLEN_LOST_CARD  - UNAUTHORIZED_CARD  - CVN_NOT_MATCH  - INVALID_CVN  - BLACKLISTED_CUSTOMER  - INVALID_ACCOUNT  - GENERAL_DECLINE  - RISK_CONTROL_DECLINE  - PROCESSOR_RISK_CONTROL_DECLINE
     */
    reason?: string;
    /**
     * The detail message related to the status and reason listed above.
     */
    message?: string;
    details?: Array<PtsV2PaymentsPost201ResponseErrorInformationDetails>;
  }
  export interface PtsV2PayoutsPost201ResponseMerchantInformation {
    merchantDescriptor?: PtsV2PayoutsPost201ResponseMerchantInformationMerchantDescriptor;
  }
  export interface PtsV2PayoutsPost201ResponseMerchantInformationMerchantDescriptor {
    /**
     * Your merchant name.  **Note** For Paymentech processor using Cybersource Payouts, the maximum data length is 22.  #### PIN debit Your business name. This name is displayed on the cardholder’s statement. When you include more than one consecutive space, extra spaces are removed.  When you do not include this value in your PIN debit request, the merchant name from your account is used. **Important** This value must consist of English characters.  Optional field for PIN debit credit or PIN debit purchase requests.  #### Airline processing Your merchant name. This name is displayed on the cardholder’s statement. When you include more than one consecutive space, extra spaces are removed.  **Note** Some airline fee programs may require the original ticket number (ticket identifier) or the ancillary service description in positions 13 through 23 of this field.  **Important** This value must consist of English characters.  Required for captures and credits.
     */
    name?: string;
    /**
     * Merchant's City.  #### PIN debit City for your business location. This value might be displayed on the cardholder’s statement.  When you do not include this value in your PIN debit request, the merchant name from your account is used. **Important** This value must consist of English characters.  Optional field for PIN debit credit or PIN debit purchase requests.
     */
    locality?: string;
    /**
     * Merchant's country.  #### PIN debit Country code for your business location. Use the [ISO Standard Country Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/countries_alpha_list.pdf) This value might be displayed on the cardholder’s statement.  When you do not include this value in your PIN debit request, the merchant name from your account is used. **Important** This value must consist of English characters. **Note** If your business is located in the U.S. or Canada and you include this field in a request, you must also include `merchantInformation.merchantDescriptor.administrativeArea`.  Optional field for PIN debit credit or PIN debit purchase.
     */
    country?: string;
  }
  export interface PtsV2PayoutsPost201ResponseOrderInformation {
    amountDetails?: PtsV2PayoutsPost201ResponseOrderInformationAmountDetails;
  }
  export interface PtsV2PayoutsPost201ResponseOrderInformationAmountDetails {
    /**
     * Grand total for the order. This value cannot be negative. You can include a decimal point (.), but no other special characters. CyberSource truncates the amount to the correct number of decimal places.  **Note** For CTV, FDCCompass, Paymentech processors, the maximum length for this field is 12.  **Important** Some processors have specific requirements and limitations, such as maximum amounts and maximum field lengths. For details, see: - \"Authorization Information for Specific Processors\" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/). - \"Capture Information for Specific Processors\" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/). - \"Credit Information for Specific Processors\" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/).  If your processor supports zero amount authorizations, you can set this field to 0 for the authorization to check if the card is lost or stolen. For details, see \"Zero Amount Authorizations,\" \"Credit Information for Specific Processors\" in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  #### Card Present Required to include either this field or `orderInformation.lineItems[].unitPrice` for the order.  #### Invoicing Required for creating a new invoice.  #### PIN Debit Amount you requested for the PIN debit purchase. This value is returned for partial authorizations. The issuing bank can approve a partial amount if the balance on the debit card is less than the requested transaction amount.  Required field for PIN Debit purchase and PIN Debit credit requests. Optional field for PIN Debit reversal requests.  #### GPX This field is optional for reversing an authorization or credit; however, for all other processors, these fields are required.  #### DCC with a Third-Party Provider Set this field to the converted amount that was returned by the DCC provider. You must include either this field or the 1st line item in the order and the specific line-order amount in your request. For details, see `grand_total_amount` field description in [Dynamic Currency Conversion For First Data Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/DCC_FirstData_SCMP/DCC_FirstData_SCMP_API.pdf).  #### FDMS South If you accept IDR or CLP currencies, see the entry for FDMS South in \"Authorization Information for Specific Processors\" of the [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  #### DCC for First Data Not used.
     */
    totalAmount?: string;
    /**
     * Currency used for the order. Use the three-character [ISO Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf)  #### Used by **Authorization** Required field.  **Authorization Reversal** For an authorization reversal (`reversalInformation`) or a capture (`processingOptions.capture` is set to `true`), you must use the same currency that you used in your payment authorization request.  #### PIN Debit Currency for the amount you requested for the PIN debit purchase. This value is returned for partial authorizations. The issuing bank can approve a partial amount if the balance on the debit card is less than the requested transaction amount. For the possible values, see the [ISO Standard Currency Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/currencies.pdf). Returned by PIN debit purchase.  For PIN debit reversal requests, you must use the same currency that was used for the PIN debit purchase or PIN debit credit that you are reversing. For the possible values, see the [ISO Standard Currency Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/currencies.pdf).  Required field for PIN Debit purchase and PIN Debit credit requests. Optional field for PIN Debit reversal requests.  #### GPX This field is optional for reversing an authorization or credit.  #### DCC for First Data Your local currency. For details, see the `currency` field description in [Dynamic Currency Conversion For First Data Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/DCC_FirstData_SCMP/DCC_FirstData_SCMP_API.pdf).  #### Tax Calculation Required for international tax and value added tax only. Optional for U.S. and Canadian taxes. Your local currency.
     */
    currency?: string;
    /**
     * This is a multicurrency field. It contains the transaction amount (field 4), converted to the Currency used to bill the cardholder’s account.
     */
    settlementAmount?: string;
    /**
     * This is a multicurrency-only field. It contains a 3-digit numeric code that identifies the currency used by the issuer to bill the cardholder's account.
     */
    settlementCurrency?: string;
  }
  export interface PtsV2PayoutsPost201ResponseProcessorInformation {
    /**
     * Issuer-generated approval code for the transaction.
     */
    approvalCode?: string;
    /**
     * Transaction status from the processor.
     */
    responseCode?: string;
    /**
     * Network transaction identifier (TID). This value can be used to identify a specific transaction when you are discussing the transaction with your processor.
     */
    transactionId?: string;
    /**
     * This field is returned only for **American Express Direct** and **CyberSource through VisaNet**. Returned by authorization and incremental authorization services.  #### American Express Direct  System trace audit number (STAN). This value identifies the transaction and is useful when investigating a chargeback dispute.  #### CyberSource through VisaNet  System trace number that must be printed on the customer’s receipt.
     */
    systemTraceAuditNumber?: string;
    /**
     * Used by Visa only and contains the response source/reason code that identifies the source of the response decision.
     */
    responseCodeSource?: string;
  }
  export interface PtsV2PayoutsPost201ResponseRecipientInformation {
    card?: PtsV2PayoutsPost201ResponseRecipientInformationCard;
  }
  export interface PtsV2PayoutsPost201ResponseRecipientInformationCard {
    /**
     * This field shows the available balance in the prepaid account.  Acquirers always receive the available balance in the transaction currency.
     */
    balance?: string;
    /**
     * This is a multicurrency-only field. It contains a 3-digit numeric code that identifies the currency used by the issuer.
     */
    currency?: string;
  }
  export interface PtsV2PayoutsPost400Response {
    /**
     * Time of request in UTC. `Format: YYYY-MM-DDThh:mm:ssZ`  Example 2016-08-11T22:47:57Z equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The T separates the date and the time. The Z indicates UTC.
     */
    submitTimeUtc?: string;
    /**
     * The status of the submitted transaction.
     */
    status?: string;
    /**
     * The reason of the status.  Possible values:  - MISSING_FIELD  - INVALID_DATA  - DUPLICATE_REQUEST  - INVALID_CARD  - INVALID_MERCHANT_CONFIGURATION  - INVALID_AMOUNT  - DEBIT_CARD_USEAGE_EXCEEDD_LIMIT
     */
    reason?: string;
    /**
     * The detail message related to the status and reason listed above.
     */
    message?: string;
    details?: Array<PtsV2PaymentsPost201ResponseErrorInformationDetails>;
  }
  export interface Ptsv2creditsInstallmentInformation {
    /**
     * #### American Express Direct, Cielo, and CyberSource Latin American Processing Flag that indicates the type of funding for the installment plan associated with the payment.  Possible values: - `1`: Merchant-funded installment plan - `2`: Issuer-funded installment plan If you do not include this field in the request, CyberSource uses the value in your CyberSource account.  To change the value in your CyberSource account, contact CyberSource Customer Service. For details, see `installment_plan_type` field description in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  #### CyberSource through VisaNet and American Express Defined code that indicates the type of installment plan for this transaction.  Contact American Express for: - Information about the kinds of installment plans that American Express provides - Values for this field  For installment payments with American Express in Brazil, the value for this field corresponds to the following data in the TC 33 capture file*: - Record: CP07 TCR3 - Position: 5-6 - Field: Plan Type  * The TC 33 Capture file contains information about the purchases and refunds that a merchant submits to CyberSource. CyberSource through VisaNet creates the TC 33 Capture file at the end of the day and sends it to the merchant’s acquirer, who uses this information to facilitate end-of-day clearing processing with payment card companies.  #### CyberSource through VisaNet with Visa or Mastercard Flag indicating the type of funding for the installment plan associated with the payment. Possible values: - 1 or 01: Merchant-funded installment plan - 2 or 02: Issuer-funded installment plan - 43: Crediario installment plan—only with Visa in Brazil For details, see \"Installment Payments on CyberSource through VisaNet\" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  For installment payments with Visa in Brazil, the value for this field corresponds to the following data in the TC 33 capture file5: - Record: CP07 TCR1 - Position: 5-6 - Field: Installment Type  For all other kinds of installment payments, the value for this field corresponds to the following data in the TC 33 capture file5: - Record: CP01 TCR5 - Position: 39-40 - Field: Installment Plan Type (Issuer or Merchant)
     */
    planType?: string;
  }
  export interface Ptsv2creditsProcessingInformation {
    /**
     * Type of transaction. Some payment card companies use this information when determining discount rates.  #### Used by **Authorization** Required payer authentication transactions; otherwise, optional. **Credit** Required for standalone credits on Chase Paymentech solutions; otherwise, optional. Only `internet`, `moto`, `install`, `recurring`, and `recurring_internet` are valid values.  #### Ingenico ePayments When you omit this field for Ingenico ePayments, the processor uses the default transaction type they have on file for you instead of the default value (listed in Appendix I, \"Commerce Indicators,\" on page 441.)  #### Payer Authentication Transactions For the possible values and requirements, see \"Payer Authentication,\" page 195.  #### Other Types of Transactions See Appendix I, \"Commerce Indicators,\" on page 441.  #### Card Present You must set this field to `retail`. This field is required for a card-present transaction.
     */
    commerceIndicator?: string;
    /**
     * Value that identifies the processor/acquirer to use for the transaction. This value is supported only for **CyberSource through VisaNet**.  Contact CyberSource Customer Support to get the value for this field.
     */
    processorId?: string;
    /**
     * Type of digital payment solution for the transaction. Possible Values:   - `visacheckout`: Visa Checkout. This value is required for Visa Checkout transactions. For details, see `payment_solution` field description in [Visa Checkout Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/VCO_SCMP_API/html/)  - `001`: Apple Pay.  - `004`: Cybersource In-App Solution.  - `005`: Masterpass. This value is required for Masterpass transactions on OmniPay Direct. For details, see \"Masterpass\" in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  - `006`: Android Pay.  - `007`: Chase Pay.  - `008`: Samsung Pay.  - `012`: Google Pay.
     */
    paymentSolution?: string;
    /**
     * Please check with Cybersource customer support to see if your merchant account is configured correctly so you can include this field in your request. * For Payouts: max length for FDCCompass is String (22).
     */
    reconciliationId?: string;
    /**
     * Value that links the current authorization request to the original authorization request. Set this value to the ID that was returned in the reply message from the original authorization request.  This value is used for:  - Partial authorizations - Split shipments  For details, see `link_to_request` field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
     */
    linkId?: string;
    /**
     * Attribute that lets you define custom grouping for your processor reports. This field is supported only for **Worldpay VAP**.  For details, see `report_group` field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
     */
    reportGroup?: string;
    /**
     * Identifier for the **Visa Checkout** order. Visa Checkout provides a unique order ID for every transaction in the Visa Checkout **callID** field.
     */
    visaCheckoutId?: string;
    /**
     * Set this field to 3 to indicate that the request includes Level III data.
     */
    purchaseLevel?: string;
    /**
     * Indicates that the transaction includes industry-specific data.  Possible Values: - `airline` - `restaurant` - `lodging` - `auto_rental` - `transit` - `healthcare_medical` - `healthcare_transit` - `transit`  #### Card Present, Airlines and Auto Rental You must set this field to `airline` in order for airline data to be sent to the processor. For example, if this field is not set to `airline` or is not included in the request, no airline data is sent to the processor.  You must set this field to `restaurant` in order for restaurant data to be sent to the processor. When this field is not set to `restaurant` or is not included in the request, no restaurant data is sent to the processor.  You must set this field to `auto_rental` in order for auto rental data to be sent to the processor. For example, if this field is not set to `auto_rental` or is not included in the request, no auto rental data is sent to the processor.  Restaurant data is supported only on CyberSource through VisaNet.
     */
    industryDataType?: string;
    /**
     * This field carries the wallet type in authorization requests and credit requests. Possible value are: - `101`: Masterpass remote payment. The customer created the wallet by manually interacting with a customer-controlled device such as a computer, tablet, or phone. This value is supported only for Masterpass transactions on Chase Paymentech Solutions and CyberSource through VisaNet. - `102`: Masterpass remote near field communication (NFC) payment. The customer created the wallet by tapping a PayPass card or customer-controlled device at a contactless card reader. This value is supported only for card-present Masterpass transactions on CyberSource through VisaNet. - `103`: Masterpass Apple Pay payment. The payment was made with a combination of Masterpass and Apple Pay. This value is supported only for Masterpass Apple Pay transactions on CyberSource through VisaNet. - `216`: Masterpass Google Pay payment. The payment was made with a combination of Masterpass and Google Pay. This value is supported only for Masterpass Google Pay transactions on CyberSource through VisaNet. - `217`: Masterpass Samsung Pay payment. The payment was made with a combination of Masterpass and Samsung Pay. This value is supported only for Masterpass Samsung Pay transactions on CyberSource through VisaNet. - `SDW`: Staged digital wallet. An issuer or operator created the wallet. This value is supported only for Masterpass transactions on Chase Paymentech Solutions. - `VCIND`: Visa Checkout payment. This value is supported only on CyberSource through VisaNet, FDC Compass, FDC Nashville Global, FDI Australia, and TSYS Acquiring Solutions. See Getting Started with Visa Checkout. For Visa Checkout transactions, the way CyberSource processes the value for this field depends on the processor. See the Visa Checkout section below. For all other values, this field is a passthrough; therefore, CyberSource does not verify the value or modify it in any way before sending it to the processor. Masterpass (101, 102, 103, 216, and 217): The Masterpass platform generates the wallet type value and passes it to you along with the customer’s checkout information.  Visa Checkout: This field is optional for Visa Checkout authorizations on FDI Australia. For all other processors, this field is required for Visa Checkout authorizations. For Visa Checkout transactions on the following processors, CyberSource sends the value that the processor expects for this field:FDC Compass,FDC Nashville Global,FDI Australia,TSYS Acquiring Solutions For all other processors, this field is a passthrough; therefore, CyberSource does not verify the value or modify it in any way before sending it to the processor. For incremental authorizations, this field is supported only for Mastercard and the supported values are 101 and 102. Payment card companies can introduce new values without notice. Your order management system should be able to process new values without problems.  CyberSource through VisaNet When the value for this field is 101, 102, 103, 216, or 217, it corresponds to the following data in the TC 33 capture file5: Record: CP01 TCR6, Position: 88-90,  Field: Mastercard Wallet Identifier. When the value for this field is VCIND, it corresponds to the following data in the TC 33 capture file5: Record: CP01 TCR8, Position: 72-76, Field: Agent Unique ID.
     */
    walletType?: string;
    /**
     * Supplementary domestic transaction information provided by the acquirer for National Net Settlement Service (NNSS) transactions. NNSS is a settlement service that Visa provides. For transactions on CyberSource through VisaNet in countries that subscribe to NNSS: VisaNet clears transactions; VisaNet transfers funds to the acquirer after deducting processing fees and interchange fees. VisaNet settles transactions in the local pricing currency through a local financial institution. This field is supported only on CyberSource through VisaNet for domestic data in Colombia
     */
    nationalNetDomesticData?: string;
    /**
     * On PIN Debit Gateways: This U.S.-only field is optionally used by  participants (merchants and acquirers) to specify the network access priority. VisaNet checks to determine if there are issuer routing preferences for any of the networks specified by the sharing group code. If an issuer preference exists for one of the specified debit networks, VisaNet makes a routing selection based on the issuer’s preference. If an issuer preference exists for more than one of the specified debit networks, or if no issuer preference exists, VisaNet makes a selection based on the acquirer’s routing priorities.  #### PIN debit Priority order of the networks through which he transaction will be routed. Set this value to a series of one-character network codes in your preferred order. This is a list of the network codes:  | Network | Code | | --- | --- | | Accel | E | | AFFN | U | | Alaska Option | 3 | | CU24 | C | | Interlink | G | | Maestro | 8 | | NETS | P | | NYCE | F | | Pulse | H | | Shazam | 7 | | Star | M | | Visa | V |  For example, if the Star network is your first preference and Pulse is your second preference, set this field to a value of `MH`.  When you do not include this value in your PIN debit request, the list of network codes from your account is used. **Note** This field is supported only for businesses located in the U.S.  Optional field for PIN debit credit or PIN debit purchase.
     */
    networkRoutingOrder?: string;
    recurringOptions?: Ptsv2paymentsidrefundsProcessingInformationRecurringOptions;
    bankTransferOptions?: Ptsv2creditsProcessingInformationBankTransferOptions;
    purchaseOptions?: Ptsv2creditsProcessingInformationPurchaseOptions;
    electronicBenefitsTransfer?: Ptsv2creditsProcessingInformationElectronicBenefitsTransfer;
    loanOptions?: Ptsv2paymentsProcessingInformationLoanOptions;
    japanPaymentOptions?: Ptsv2creditsProcessingInformationJapanPaymentOptions;
  }
  export interface Ptsv2creditsProcessingInformationBankTransferOptions {
    /**
     * Payment related information.  This information is included on the customer’s statement.
     */
    customerMemo?: string;
    /**
     * Specifies the authorization method for the transaction.  #### TeleCheck Accepts only the following values: - `ARC`: account receivable conversion - `CCD`: corporate cash disbursement - `POP`: point of purchase conversion - `PPD`: prearranged payment and deposit entry - `TEL`: telephone-initiated entry - `WEB`: internet-initiated entry  For details, see `ecp_sec_code` field description in the [Electronic Check Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/EChecks_SCMP_API/html/)
     */
    secCode?: string;
    /**
     * City in which the terminal is located. If more than four alphanumeric characters are submitted, the transaction will be declined.  You cannot include any special characters.
     */
    terminalCity?: string;
    /**
     * State in which the terminal is located. If more than two alphanumeric characters are submitted, the transaction will be declined.  You cannot include any special characters.
     */
    terminalState?: string;
    /**
     * Effective date for the transaction. The effective date must be within 45 days of the current day. If you do not include this value, CyberSource sets the effective date to the next business day.  Format: `MMDDYYYY`  Supported only for the CyberSource ACH Service.
     */
    effectiveDate?: string;
    /**
     * Identifier for a partial payment or partial credit.  The value for each debit request or credit request must be unique within the scope of the order. For details, see `partial_payment_id` field description in the [Electronic Check Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/EChecks_SCMP_API/html/)
     */
    partialPaymentId?: string;
    /**
     * Method used for settlement.  Possible values: - `A`: Automated Clearing House (default for credits and for transactions using Canadian dollars) - `F`: Facsimile draft (U.S. dollars only) - `B`: Best possible (U.S. dollars only) (default if the field has not already been configured for your merchant ID)  For details, see `ecp_settlement_method` field description for credit cars and `ecp_debit_settlement_method` for debit cards in the [Electronic Check Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/EChecks_SCMP_API/html/)
     */
    settlementMethod?: string;
    fraudScreeningLevel?: number | string;
  }
  export interface Ptsv2creditsProcessingInformationElectronicBenefitsTransfer {
    /**
     * Flag that specifies the category for the EBT transaction.  Possible values: - `CASH`: Cash benefits, which can be used to purchase any item at a participating retailer, as well as to obtain cash-back or make a cash withdrawal from a participating ATM. - `FOOD`: Food stamp benefits, which can be used only to purchase food items authorized by the USDA SNAP program.  #### PIN debit Required field for EBT transactions that use PIN debit credit or PIN debit purchase; otherwise, not used.
     */
    category?: string;
  }
  export interface Ptsv2creditsProcessingInformationJapanPaymentOptions {
    /**
     * This value is a 2-digit code indicating the payment method. Use Payment Method Code value that applies to the tranasction. - 10 (One-time payment) - 21, 22, 23, 24  (Bonus(one-time)payment) - 61 (Installment payment) - 31, 32, 33, 34  (Integrated (Bonus + Installment)payment) - 80 (Revolving payment)
     */
    paymentMethod?: string;
    /**
     * Number of Installments.
     */
    installments?: string;
  }
  export interface Ptsv2creditsProcessingInformationPurchaseOptions {
    /**
     * Flag that indicates whether this transaction is an EBT transaction. Possible values: - `true` - `false`  #### PIN debit Required field for EBT and EBT voucher transactions that use PIN debit credit or PIN debit purchase; otherwise, not used.
     */
    isElectronicBenefitsTransfer?: boolean;
  }
  export interface Ptsv2paymentsAcquirerInformation {
    /**
     * Acquirer bank ID number that  corresponds to a certificate that Cybersource already has.This ID has this format. 4XXXXX for Visa and 5XXXXX for Mastercard.
     */
    acquirerBin?: string;
    /**
     * Issuers need to be aware of the Acquirer's Country Code when the Acquirer country differs from the Merchant country and the Acquirer is in the EEA (European Economic Area).
     */
    country?: string;
    /**
     * Registered password for the Visa directory server.
     */
    password?: string;
    /**
     * Username for the visa directory server that is created when your acquirer sets up your account. This ID might be the same as your merchant ID. the username can be 15 or 23 characters.
     */
    merchantId?: string;
  }
  export interface Ptsv2paymentsAggregatorInformation {
    /**
     * Value that identifies you as a payment aggregator. Get this value from the processor.  #### CyberSource through VisaNet The value for this field corresponds to the following data in the TC 33 capture file5: - Record: CP01 TCR6 - Position: 95-105 - Field: MasterCard Payment Facilitator ID  **FDC Compass**\\ This value must consist of uppercase characters.  For processor-specific information, see the `aggregator_id` field in [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
     */
    aggregatorId?: string;
    /**
     * Your payment aggregator business name.  **American Express Direct**\\ The maximum length of the aggregator name depends on the length of the sub-merchant name. The combined length for both values must not exceed 36 characters.\\  #### CyberSource through VisaNet With American Express, the maximum length of the aggregator name depends on the length of the sub-merchant name. The combined length for both values must not exceed 36 characters. The value for this field does not map to the TC 33 capture file5.  **FDC Compass**\\ This value must consist of uppercase characters.  For processor-specific information, see the aggregator_name field in [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
     */
    name?: string;
    subMerchant?: Ptsv2paymentsAggregatorInformationSubMerchant;
  }
  export interface Ptsv2paymentsAggregatorInformationSubMerchant {
    /**
     * Unique identifier assigned by the payment card company to the sub-merchant.
     */
    cardAcceptorId?: string;
    /**
     * The ID you assigned to your sub-merchant. CyberSource through VisaNet: For American Express transaction, the value for this field corresponds to the following data in the TC 33 capture file: - Record: CP01 TCRB - Position: 65-84 - Field: American Express Seller ID For  Mastercard transactions, the value for this field corresponds to the following data in the TC 33 capture file: - Record: CP01 TCR6 - Position: 117-131 - Field: Mastercard Sub-Merchant ID FDC Compass: This value must consist of uppercase characters.  American Express Direct: String (20) CyberSource through VisaNet with American Express: String (20) CyberSource through VisaNet with Mastercard: String (15) FDC Compass: String (20) FDC Nashville Global: String (14)
     */
    id?: string;
    /**
     * Sub-merchant’s business name.  #### American Express Direct The maximum length of the sub-merchant name depends on the length of the aggregator name. The combined length for both values must not exceed 36 characters.  #### CyberSource through VisaNet With American Express, the maximum length of the sub-merchant name depends on the length of the aggregator name. The combined length for both values must not exceed 36 characters. The value for this field does not map to the TC 33 capture file5.  #### FDC Compass This value must consist of uppercase characters.  #### FDC Nashville Global With Mastercard, the maximum length of the sub-merchant name depends on the length of the aggregator name: - If aggregator name length is 1 through 3, maximum sub-merchant name length is 21. - If aggregator name length is 4 through 7, maximum sub-merchant name length is 17. - If aggregator name length is 8 through 12, maximum sub-merchant name length is 12.
     */
    name?: string;
    /**
     * First line of the sub-merchant’s street address.  For processor-specific details, see `submerchant_street` field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  #### CyberSource through VisaNet The value for this field does not map to the TC 33 capture file5.  #### FDC Compass This value must consist of uppercase characters.
     */
    address1?: string;
    /**
     * Sub-merchant’s city.  For processor-specific details, see `submerchant_city` request field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  #### CyberSource through VisaNet The value for this field does not map to the TC 33 capture file5.  #### FDC Compass This value must consist of uppercase characters.
     */
    locality?: string;
    /**
     * Sub-merchant’s state or province.  For possible values and also aggregator support, see `submerchant_state` request field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  #### CyberSource through VisaNet The value for this field does not map to the TC 33 capture file5.  #### FDC Compass This value must consist of uppercase characters.
     */
    administrativeArea?: string;
    /**
     * Sub-merchant’s region.  **Example**\\ `NE` indicates that the sub-merchant is in the northeast region.  For processor-specific details, see `submerchant_region` request field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
     */
    region?: string;
    /**
     * Partial postal code for the sub-merchant’s address.  For processor-specific details, see `submerchant_postal_code` request field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  #### CyberSource through VisaNet The value for this field does not map to the TC 33 capture file5.  #### FDC Compass This value must consist of uppercase characters.
     */
    postalCode?: string;
    /**
     * Sub-merchant’s country. Use the [ISO Standard Country Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/countries_alpha_list.pdf).  #### CyberSource through VisaNet The value for this field does not map to the TC 33 capture file.  #### FDC Compass This value must consist of uppercase characters.  For details, see the `submerchant_country` request-level field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
     */
    country?: string;
    /**
     * Sub-merchant’s email address.  **Maximum length for processors**   - American Express Direct: 40  - CyberSource through VisaNet: 40  - FDC Compass: 40  - FDC Nashville Global: 19  #### CyberSource through VisaNet With American Express, the value for this field corresponds to the following data in the TC 33 capture file: - Record: CP01 TCRB - Position: 25-64 - Field: American Express Seller E-mail Address  **Note** The TC 33 Capture file contains information about the purchases and refunds that a merchant submits to CyberSource. CyberSource through VisaNet creates the TC 33 Capture file at the end of the day and sends it to the merchant’s acquirer, who uses this information to facilitate end-of-day clearing processing with payment card companies.
     */
    email?: string;
    /**
     * Sub-merchant’s telephone number.  **Maximum length for procesors**   - American Express Direct: 20  - CyberSource through VisaNet: 20  - FDC Compass: 13  - FDC Nashville Global: 10  #### CyberSource through VisaNet With American Express, the value for this field corresponds to the following data in the TC 33 capture file5: - Record: CP01 TCRB - Position: 5-24 - Field: American Express Seller Telephone Number  **FDC Compass**\\ This value must consist of uppercase characters. Use one of these recommended formats:\\ `NNN-NNN-NNNN`\\ `NNN-AAAAAAA`
     */
    phoneNumber?: string;
  }
  export interface Ptsv2paymentsBuyerInformation {
    /**
     * Your identifier for the customer.  When a subscription or customer profile is being created, the maximum length for this field for most processors is 30. Otherwise, the maximum length is 100.  #### Comercio Latino For recurring payments in Mexico, the value is the customer’s contract number. Note Before you request the authorization, you must inform the issuer of the customer contract numbers that will be used for recurring transactions.  #### Worldpay VAP For a follow-on credit with Worldpay VAP, CyberSource checks the following locations, in the order given, for a customer account ID value and uses the first value it finds: 1. `customer_account_id` value in the follow-on credit request 2. Customer account ID value that was used for the capture that is being credited 3. Customer account ID value that was used for the original authorization If a customer account ID value cannot be found in any of these locations, then no value is used.  For processor-specific information, see the `customer_account_id` field description in [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
     */
    merchantCustomerId?: string;
    dateOfBirth?: string;
    /**
     * Customer’s government-assigned tax identification number.  #### Tax Calculation Optional for international and value added taxes only. Not applicable to U.S. and Canadian taxes.  For processor-specific information, see the purchaser_vat_registration_number field in [Level II and Level III Processing Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/Level_2_3_SCMP_API/html)
     */
    vatRegistrationNumber?: string;
    /**
     * Company’s tax identifier. This is only used for eCheck service.  ** TeleCheck ** Contact your TeleCheck representative to find out whether this field is required or optional.  ** All Other Processors ** Not used.
     */
    companyTaxId?: string;
    personalIdentification?: Array<Ptsv2paymentsBuyerInformationPersonalIdentification>;
    /**
     * The merchant's password that CyberSource hashes and stores as a hashed password.  For details about this field, see the `customer_password` field description in _Decision Manager Using the SCMP API Developer Guide_ on the [CyberSource Business Center.](https://ebc2.cybersource.com/ebc2/) Click **Decision Manager** > **Documentation** > **Guides** > _Decision Manager Using the SCMP API Developer Guide_ (PDF link).
     */
    hashedPassword?: string;
    /**
     * Cardholder’s mobile phone number. **Important** Required for Visa Secure transactions in Brazil. Do not use this request field for any other types of transactions.
     */
    mobilePhone?: number;
  }
  export interface Ptsv2paymentsBuyerInformationPersonalIdentification {
    /**
     * The type of the identification.  Possible values:   - `NATIONAL`   - `CPF`   - `CPNJ`   - `CURP`   - `SSN`   - `DRIVER_LICENSE`  This field is supported only on the following processors.  #### ComercioLatino Set this field to the Cadastro de Pessoas Fisicas (CPF).  #### CyberSource Latin American Processing Supported for Redecard in Brazil. Set this field to the Cadastro de Pessoas Fisicas (CPF), which is required for AVS for Redecard in Brazil. **Note** CyberSource Latin American Processing is the name of a specific processing connection that CyberSource supports. In the CyberSource API documentation, CyberSource Latin American Processing does not refer to the general topic of processing in Latin America. The information in this field description is for the specific processing connection called CyberSource Latin American Processing. It is not for any other Latin American processors that CyberSource supports.  For processor-specific information, see the `personal_id` field in [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
     */
    type?: string;
    /**
     * The value of the identification type. This field is supported only on the following processors.  #### ComercioLatino Set this field to the Cadastro de Pessoas Fisicas (CPF).  #### CyberSource Latin American Processing Supported for Redecard in Brazil. Set this field to the Cadastro de Pessoas Fisicas (CPF), which is required for AVS for Redecard in Brazil. **Note** CyberSource Latin American Processing is the name of a specific processing connection that CyberSource supports. In the CyberSource API documentation, CyberSource Latin American Processing does not refer to the general topic of processing in Latin America. The information in this field description is for the specific processing connection called CyberSource Latin American Processing. It is not for any other Latin American processors that CyberSource supports.  For processor-specific information, see the `personal_id` field in [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)    If `type = PASSPORT`, this is the cardholder's passport number. Recommended for Discover ProtectBuy.
     */
    id?: string;
    /**
     * The government agency that issued the driver's license or passport.  If **type**` = DRIVER_LICENSE`, this is the State or province where the customer’s driver’s license was issued.  If **type**` = PASSPORT`, this is the Issuing country for the cardholder’s passport. Recommended for Discover ProtectBuy.  Use the two-character [State, Province, and Territory Codes for the United States and Canada](https://developer.cybersource.com/library/documentation/sbc/quickref/states_and_provinces.pdf).  #### TeleCheck Contact your TeleCheck representative to find out whether this field is required or optional.  #### All Other Processors Not used.  For details about the country that issued the passport, see `customer_passport_country` field description in [CyberSource Payer Authentication Using the SCMP API] (https://apps.cybersource.com/library/documentation/dev_guides/Payer_Authentication_SCMP_API/html/)  For details about the state or province that issued the passport, see `driver_license_state` field description in [Electronic Check Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/EChecks_SCMP_API/html/)
     */
    issuedBy?: string;
  }
  export interface Ptsv2paymentsClientReferenceInformation {
    /**
     * Merchant-generated order reference or tracking number. It is recommended that you send a unique value for each transaction so that you can perform meaningful searches for the transaction.  #### Used by **Authorization** Required field.  #### PIN Debit Requests for PIN debit reversals need to use the same merchant reference number that was used in the transaction that is being reversed.  Required field for all PIN Debit requests (purchase, credit, and reversal).  #### FDC Nashville Global Certain circumstances can cause the processor to truncate this value to 15 or 17 characters for Level II and Level III processing, which can cause a discrepancy between the value you submit and the value included in some processor reports. 
     */
    code?: string;
    /**
     * Reference number for the transaction. Depending on how your Cybersource account is configured, this value could either be provided in the API request or generated by CyberSource. The actual value used in the request to the processor is provided back to you by Cybersource in the response. 
     */
    reconciliationId?: string;
    /**
     * Used to resume a transaction that was paused for an order modification rule to allow for payer authentication to complete. To resume and continue with the authorization/decision service flow, call the services and include the request id from the prior decision call. 
     */
    pausedRequestId?: string;
    /**
     * Identifier that you assign to the transaction. Normally generated by a client server to identify a unique API request.  **Note** Use this field only if you want to support merchant-initiated reversal and void operations.  #### Used by **Authorization, Authorization Reversal, Capture, Credit, and Void** Optional field.  #### PIN Debit For a PIN debit reversal, your request must include a request ID or a merchant transaction identifier. Optional field for PIN debit purchase or credit requests. 
     */
    transactionId?: string;
    /**
     * Comments
     */
    comments?: string;
    partner?: Ptsv2paymentsClientReferenceInformationPartner;
    /**
     * The name of the Connection Method client (such as Virtual Terminal or SOAP Toolkit API) that the merchant uses to send a transaction request to CyberSource. 
     */
    applicationName?: string;
    /**
     * Version of the CyberSource application or integration used for a transaction. 
     */
    applicationVersion?: string;
    /**
     * The entity that is responsible for running the transaction and submitting the processing request to CyberSource. This could be a person, a system, or a connection method. 
     */
    applicationUser?: string;
  }
  export interface Ptsv2paymentsClientReferenceInformationPartner {
    /**
     * Value that links the previous transaction to the current follow-on request. This value is assigned by the client software that is installed on the POS terminal, which makes it available to the terminal’s software and to CyberSource. Therefore, you can use this value to reconcile transactions between CyberSource and the terminal’s software.  CyberSource does not forward this value to the processor. Instead, the value is forwarded to the CyberSource reporting functionality.  This field is supported only on these processors: - American Express Direct - Credit Mutuel-CIC - FDC Nashville Global - OmniPay Direct - SIX  Optional field.
     */
    originalTransactionId?: string;
    /**
     * Identifier for the developer that helped integrate a partner solution to CyberSource.  Send this value in all requests that are sent through the partner solutions built by that developer. CyberSource assigns the ID to the developer.  **Note** When you see a developer ID of 999 in reports, the developer ID that was submitted is incorrect.
     */
    developerId?: string;
    /**
     * Identifier for the partner that is integrated to CyberSource.  Send this value in all requests that are sent through the partner solution. CyberSource assigns the ID to the partner.  **Note** When you see a solutionId of 999 in reports, the solutionId that was submitted is incorrect.
     */
    solutionId?: string;
    /**
     * Value that identifies the application vendor and application version for a third party gateway. CyberSource provides you with this value during testing and validation. This field is supported only on CyberSource through VisaNet.  #### Used by **Authorization, Authorization Reversal, Capture, Credit, Incremental Authorization, and Void** Optional field.  #### PIN debit Required field for PIN debit credit, PIN debit purchase, or PIN debit reversal request.
     */
    thirdPartyCertificationNumber?: string;
  }
  export interface Ptsv2paymentsConsumerAuthenticationInformation {
    /**
     * Cardholder authentication verification value (CAVV).
     */
    cavv?: string;
    /**
     * Algorithm used to generate the CAVV for Visa Secure or the UCAF authentication data for Mastercard Identity Check.
     */
    cavvAlgorithm?: string;
    /**
     * Raw electronic commerce indicator (ECI).  For details, see `eci_raw` request field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
     */
    eciRaw?: string;
    /**
     * Payer authentication response status.  For details, see `pares_status` request field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
     */
    paresStatus?: string;
    /**
     * Verification response enrollment status.  For details, see `veres_enrolled` request field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
     */
    veresEnrolled?: string;
    /**
     * Transaction identifier.  For details, see `xid` request field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
     */
    xid?: string;
    /**
     * Universal cardholder authentication field (UCAF) collection indicator.  For details, see `ucaf_collection_indicator` request field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  #### CyberSource through VisaNet The value for this field corresponds to the following data in the TC 33 capture file5: - Record: CP01 TCR7 - Position: 5 - Field: Mastercard Electronic Commerce Indicators—UCAF Collection Indicator
     */
    ucafCollectionIndicator?: string;
    /**
     * Universal cardholder authentication field (UCAF) data.  For details, see `ucaf_authentication_data` request field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
     */
    ucafAuthenticationData?: string;
    strongAuthentication?: Ptsv2paymentsConsumerAuthenticationInformationStrongAuthentication;
    /**
     * The Directory Server Transaction ID is generated by the Mastercard Directory Server during the authentication transaction and passed back to the merchant with the authentication results. For Cybersource Through Visanet Gateway: The value for this field corresponds to the following data in the TC 33 capture file3: Record: CP01 TCR7, Position: 114-149, Field: MC AVV Verification—Directory Server Transaction ID
     */
    directoryServerTransactionId?: string;
    /**
     * This field contains 3DS version that was used for Secured Consumer Authentication (SCA). For example 3DS secure version 1.0.2 or 2.0.0 is used for Secured Consumer Authentication. For Cybersource Through Visanet Gateway: The value for this field corresponds to the following data in the TC 33 capture file3: Record: CP01 TCR7, Position: 113 , Field: MC AVV Verification—Program Protocol It will contain one of the following values: - `1` (3D Secure Version 1.0 (3DS 1.0)) - `2` (EMV 3-D Secure (3DS 2.0))
     */
    paSpecificationVersion?: string;
    /**
     * Indicates the type of authentication that will be used to challenge the card holder.  Possible Values:  01 - Static  02 - Dynamic  03 - OOB (Out of Band)  04 - Decoupled **NOTE**:  EMV 3-D Secure version 2.1.0 supports values 01-03.  Version 2.2.0 supports values 01-04.  Decoupled authentication is not supported at this time.
     */
    authenticationType?: string;
    acsWindowSize?: string;
    /**
     * Data that documents and supports a specific authentication process.
     */
    alternateAuthenticationData?: string;
    /**
     * Date and time in UTC of the cardholder authentication. Format: YYYYMMDDHHMM
     */
    alternateAuthenticationDate?: string;
    /**
     * Mechanism used by the cardholder to authenticate to the 3D Secure requestor. Possible values: - `01`: No authentication occurred - `02`: Login using merchant system credentials - `03`: Login using Federated ID - `04`: Login using issuer credentials - `05`: Login using third-party authenticator - `06`: Login using FIDO Authenticator
     */
    alternateAuthenticationMethod?: string;
    /**
     * The date/time of the authentication at the 3DS servers. RISK update authorization service in auth request payload with value returned in `consumerAuthenticationInformation.alternateAuthenticationData` if merchant calls via CYBS or field can be provided by merchant in authorization request if calling an external 3DS provider.
     */
    authenticationDate?: string;
    /**
     * Payer authentication transaction identifier passed to link the check enrollment and validate authentication messages. **Note**: Required for Standard integration for enroll service. Required for Hybrid integration for validate service.
     */
    authenticationTransactionId?: string;
    /**
     * An indicator as to why the transaction was canceled. Possible Values:  - `01`: Cardholder selected Cancel. - `02`: Reserved for future EMVCo use (values invalid until defined by EMVCo). - `03`: Transaction Timed Out—Decoupled Authentication - `04`: Transaction timed out at ACS—other timeouts - `05`: Transaction Timed out at ACS - First CReq not received by ACS - `06`: Transaction Error - `07`: Unknown - `08`: Transaction Timed Out at SDK
     */
    challengeCancelCode?: string;
    /**
     * Possible values: - `01`: No preference - `02`: No challenge request - `03`: Challenge requested (3D Secure requestor preference) - `04`: Challenge requested (mandate) - `05`: No challenge requested (transactional risk analysis is already performed) - `06`: No challenge requested (Data share only) - `07`: No challenge requested (strong consumer authentication is already performed) - `08`: No challenge requested (utilize whitelist exemption if no challenge required) - `09`: Challenge requested (whitelist prompt requested if challenge required) **Note** This field will default to `01` on merchant configuration and can be overridden by the merchant. EMV 3D Secure version 2.1.0 supports values `01-04`. Version 2.2.0 supports values `01-09`.  For details, see `pa_challenge_code` field description in [CyberSource Payer Authentication Using the SCMP API.] (https://apps.cybersource.com/library/documentation/dev_guides/Payer_Authentication_SCMP_API/html)
     */
    challengeCode?: string;
    /**
     * The `consumerAuthenticationInformation.challengeCode` indicates the authentication type/level, or challenge, that was presented to the cardholder at checkout by the merchant when calling the Carte Bancaire 3DS servers via CYBS RISK services. It conveys to the issuer the alternative authentication methods that the consumer used.
     */
    challengeStatus?: string;
    /**
     * An alias that uniquely identifies the customer's account and credit card on file. Note This field is required if Tokenization is enabled in the merchant profile settings.
     */
    customerCardAlias?: string;
    /**
     * Indicates whether the 3DS Requestor requests the ACS to utilize Decoupled Authentication and agrees to utilize Decoupled Authentication if the ACS confirms its use.  Possible Values:  Y - Decoupled Authentication is supported and preferred if challenge is necessary  N - Do not use Decoupled Authentication  **Default Value**: N
     */
    decoupledAuthenticationIndicator?: string;
    /**
     * Indicates the maximum amount of time that the 3DS Requestor will wait for an ACS (Active control server) to provide the results of a Decoupled Authentication transaction (in minutes). Possible Values: Numeric values between 1 and 10080 accepted.
     */
    decoupledAuthenticationMaxTime?: string;
    /**
     * Indicates that the card being used is the one designated as the primary payment card for purchase. Recommended for Discover ProtectBuy.
     */
    defaultCard?: boolean;
    /**
     * Determines the channel that the transaction came through. Possible Values: SDK/Browser/3RI. 3RI - 3DS request initiated.
     */
    deviceChannel?: string;
    /**
     * An integer value greater than 1 indicating the max number of permitted authorizations for installment payments. **Note** This is required if the merchant and cardholder have agreed to installment payments.
     */
    installmentTotalCount?: number;
    /**
     * Calculated by merchants as per PSD2** RTS** (EEA** card fraud divided by all EEA card volumes). Possible Values: 1 = Represents fraud rate <=1  2 = Represents fraud rate >1 and <=6  3 = Represents fraud rate >6 and <=13  4 = Represents fraud rate >13 and <=25  5 = Represents fraud rate >25  EEA** = European Economic Area RTS** = Regulatory Technical Standards PSD2** = Payment Services Directive
     */
    merchantFraudRate?: string;
    /**
     * Indicates whether the customer has opted in for marketing offers. Recommended for Discover ProtectBuy.
     */
    marketingOptIn?: boolean;
    /**
     * Indicates origin of the marketing offer. Recommended for Discover ProtectBuy.
     */
    marketingSource?: string;
    /**
     * Merchant category code. **Important** Required only for Visa Secure transactions in Brazil. Do not use this request field for any other types of transactions.
     */
    mcc?: string;
    /**
     * Risk Score provided by merchants. This is specific for CB transactions.
     */
    merchantScore?: number;
    /**
     * Category of the message for a specific use case. Possible values:  - `01`: PA- payment authentication - `02`: NPA- non-payment authentication - `03-79`: Reserved for EMVCo future use (values invalid until defined by EMVCo) - `80-99`: Reserved for DS use
     */
    messageCategory?: string;
    /**
     * Non-Payer Authentication Indicator. Possible values: - `01`: Add card - `02`: Maintain card information - `03`: Cardholder verification for EMV token - `04-80` Reserved for EMVCo - `80-90` Reserved DS
     */
    npaCode?: string;
    /**
     * Specifies the Brazilian payment account type used for the transaction. This field overrides other payment types that might be specified in the request. Use one of the following values for this field: - `NA`: Not applicable. Do not override other payment types that are specified in the request. - `CR`: Credit card. - `DB`: Debit card. - `VSAVR`: Visa Vale Refeicao - `VSAVA`: Visa Vale Alimentacao **Important** Required only for Visa Secure transactions in Brazil. Do not use this request field for any other types of transactions.
     */
    overridePaymentMethod?: string;
    /**
     * Two-character [ISO Standard Country Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/countries_alpha_list.pdf)..
     */
    overrideCountryCode?: string;
    /**
     * This field carry data that the ACS can use to verify the authentication process.
     */
    priorAuthenticationData?: string;
    /**
     * Mechanism used by the Cardholder to previously authenticate to the 3DS Requestor.  01 - Frictionless authentication occurred by ACS  02 - Cardholder challenge occurred by ACS  03 - AVS verified  04 - Other issuer methods  05-79 - Reserved for EMVCo future use (values invalid until defined by EMVCo)  80-99 - Reserved for DS use
     */
    priorAuthenticationMethod?: string;
    /**
     * This data element contains a ACS Transaction ID for a prior authenticated transaction. For example, the first recurring transaction that was authenticated with the cardholder
     */
    priorAuthenticationReferenceId?: string;
    /**
     * Date and time in UTC of the prior cardholder authentication. Format – YYYYMMDDHHMM
     */
    priorAuthenticationTime?: string;
    /**
     * Specifies the product code, which designates the type of transaction. Specify one of the following values for this field: - AIR: Airline purchase Important Required for American Express SafeKey (U.S.). - `ACC`: Accommodation Rental - `ACF`: Account funding - `CHA`: Check acceptance - `DIG`: Digital Goods - `DSP`: Cash Dispensing - `GAS`: Fuel - `GEN`: General Retail - `LUX`: Luxury Retail - `PAL`: Prepaid activation and load - `PHY`: Goods or services purchase - `QCT`: Quasi-cash transaction - `REN`: Car Rental - `RES`: Restaurant - `SVC`: Services - `TBD`: Other - `TRA`: Travel **Important** Required for Visa Secure transactions in Brazil. Do not use this request field for any other types of transactions.
     */
    productCode?: string;
    /**
     * Cardinal's directory server assigned 3DS Requestor ID value
     */
    requestorId?: string;
    /**
     * Indicates the type of 3RI request.  Possible Values:  01 - Recurring transaction  02 - Installment transaction  03 - Add card  04 - Maintain card  05 - Account verification  06 - Split/delayed shipment  07 - Top-up  08 - Mail Order  09 - Telephone Order  10 - Whitelist status check  11 - Other payment
     */
    requestorInitiatedAuthenticationIndicator?: string;
    /**
     * Cardinal's directory server assigned 3DS Requestor Name value
     */
    requestorName?: string;
    /**
     * Reference ID that corresponds to the device fingerprinting data that was collected previously. Note Required for Hybrid integration.
     */
    referenceId?: string;
    /**
     * The URL of the merchant’s return page. CyberSource adds this return URL to the step-up JWT and returns it in the response of the Payer Authentication enrollment call. The merchant's return URL page serves as a listening URL. Once the bank session completes, the merchant receives a POST to their URL. This response contains the completed bank session’s transactionId. The merchant’s return page should capture the transaction ID and send it in the Payer Authentication validation call.
     */
    returnUrl?: string;
    /**
     * This field indicates the maximum amount of time for all 3DS 2.0 messages to be communicated between all components (in minutes).  Possible Values:  Greater than or equal to 05 (05 is the minimum timeout to set)  Cardinal Default is set to 15  NOTE: This field is a required 3DS 2.0 field and Cardinal sends in a default of 15 if nothing is passed
     */
    sdkMaxTimeout?: string;
    /**
     * Indicates dedicated payment processes and procedures were used, potential secure corporate payment exemption applies. Possible Values : 0/1
     */
    secureCorporatePaymentIndicator?: string;
    /**
     * Transaction mode identifier. Identifies the channel from which the transaction originates. Possible values:  - `M`: MOTO (Mail Order Telephone Order) - `R`: Retail - `S`: eCommerce - `P`: Mobile Device - `T`: Tablet
     */
    transactionMode?: string;
    /**
     * Enables the communication of trusted beneficiary/whitelist status between the ACS, the DS and the 3DS Requestor.  Possible Values:  Y - 3DS Requestor is whitelisted by cardholder  N - 3DS Requestor is not whitelisted by cardholder
     */
    whiteListStatus?: string;
    /**
     * This field describes the type of 3DS transaction flow that took place.  It can be one of three possible flows; CH - Challenge FR - Frictionless FD - Frictionless with delegation, (challenge not generated by the issuer but by the scheme on behalf of the issuer).
     */
    effectiveAuthenticationType?: string;
    /**
     * Provides additional information as to why the PAResStatus has a specific value.
     */
    signedParesStatusReason?: string;
    /**
     * Payer authentication result (PARes) message returned by the card-issuing bank. If you need to show proof of enrollment checking, you may need to decrypt and parse the string for the information required by the payment card company. For more information, see \"Storing Payer Authentication Data,\" page 160. Important The value is in base64. You must remove all carriage returns and line feeds before adding the PARes to the request.
     */
    signedPares?: string;
  }
  export interface Ptsv2paymentsConsumerAuthenticationInformationStrongAuthentication {
    /**
     * This field will contain the low value exemption indicator with one of the following values: Possible values: - `0`  ( low value exemption does not apply to the transaction) - `1` (Transaction exempt from SCA as the merchant/acquirer has determined it to be a low value payment)
     */
    lowValueExemptionIndicator?: string;
    /**
     * This field will contain the transaction risk analysis exemption indicator with one of the following values: Possible values: - `0`  (TRA exemption does not apply to the transaction) - `1` (Transaction exempt from SCA as the merchant/acquirer has determined it to be low risk in accordance with the criteria defined by PSD2/RTS)
     */
    riskAnalysisExemptionIndicator?: string;
    /**
     * Possible values: - `0`  (Trusted merchant exemption does not apply to the transaction) - `1` (Transaction exempt from SCA as it originated at a merchant trusted by the cardholder)
     */
    trustedMerchantExemptionIndicator?: string;
    /**
     * This field will contain the secure corporate payment exemption indicator with one of the following values: Possible values: - `0`  (SCA exemption does not apply to the transaction) - `1` (Transaction exempt from SCA as the merchant/acquirer has determined it as a secure corporate payment)
     */
    secureCorporatePaymentIndicator?: string;
    /**
     * This field will contain the delegated authentication exemption indicator with one of the following values: Possible values: - `0`  (delegated Authentication exemption does not apply to the transaction) - `1` (Transaction exempt from SCA as authentication has been delegated to other provider (PSP,Acquirer))
     */
    delegatedAuthenticationExemptionIndicator?: string;
    /**
     * Indicates the type of Authentication request  01 - Payment transaction  02 - Recurring transaction  03 - Installment transaction  04 - Add card  05 - Maintain card  06 - Cardholder verification as part of EMV token ID and V
     */
    authenticationIndicator?: string;
  }
  export interface Ptsv2paymentsDeviceInformation {
    /**
     * DNS resolved hostname from `ipAddress`.
     */
    hostName?: string;
    /**
     * IP address of the customer.  #### Used by **Authorization, Capture, and Credit** Optional field.
     */
    ipAddress?: string;
    /**
     * Customer’s browser as identified from the HTTP header data. For example, `Mozilla` is the value that identifies the Netscape browser.
     */
    userAgent?: string;
    /**
     * Field that contains the session ID that you send to Decision Manager to obtain the device fingerprint information. The string can contain uppercase and lowercase letters, digits, hyphen (-), and underscore (_). However, do not use the same uppercase and lowercase letters to indicate different session IDs.  The session ID must be unique for each merchant ID. You can use any string that you are already generating, such as an order number or web session ID.  The session ID must be unique for each page load, regardless of an individual’s web session ID. If a user navigates to a profiled page and is assigned a web session, navigates away from the profiled page, then navigates back to the profiled page, the generated session ID should be different and unique. You may use a web session ID, but it is preferable to use an application GUID (Globally Unique Identifier). This measure ensures that a unique ID is generated every time the page is loaded, even if it is the same user reloading the page.
     */
    fingerprintSessionId?: string;
    rawData?: Array<Ptsv2paymentsDeviceInformationRawData>;
    /**
     * Value of the Accept header sent by the customer’s web browser. **Note** If the customer’s browser provides a value, you must include it in your request.
     */
    httpAcceptBrowserValue?: string;
    /**
     * The exact content of the HTTP accept header.
     */
    httpAcceptContent?: string;
    /**
     * Email address set in the customer’s browser, which may differ from customer email.
     */
    httpBrowserEmail?: string;
    /**
     * Value represents the browser language as defined in IETF BCP47. Example:en-US, refer  https://en.wikipedia.org/wiki/IETF_language_tag for more details.
     */
    httpBrowserLanguage?: string;
    /**
     * A Boolean value that represents the ability of the cardholder browser to execute Java. Value is returned from the navigator.javaEnabled property. Possible Values:True/False
     */
    httpBrowserJavaEnabled?: boolean;
    /**
     * A Boolean value that represents the ability of the cardholder browser to execute JavaScript. Possible Values:True/False. **Note**: Merchants should be able to know the values from fingerprint details of cardholder's browser.
     */
    httpBrowserJavaScriptEnabled?: boolean;
    /**
     * Value represents the bit depth of the color palette for displaying images, in bits per pixel. Example : 24, refer https://en.wikipedia.org/wiki/Color_depth for more details
     */
    httpBrowserColorDepth?: string;
    /**
     * Total height of the Cardholder's scree in pixels, example: 864.
     */
    httpBrowserScreenHeight?: string | number;
    /**
     * Total width of the cardholder's screen in pixels. Example: 1536.
     */
    httpBrowserScreenWidth?: string | number;
    /**
     * Time difference between UTC time and the cardholder browser local time, in minutes, Example:300
     */
    httpBrowserTimeDifference?: string;
    /**
     * Value of the User-Agent header sent by the customer’s web browser. Note If the customer’s browser provides a value, you must include it in your request.
     */
    userAgentBrowserValue?: string;
  }
  export interface Ptsv2paymentsDeviceInformationRawData {
    /**
     * Field that contains the device fingerprint data from the specified provider. The value should be Base64 encoded.
     */
    data?: string;
    /**
     * Possible values: - cardinal - inauth - threatmetrix
     */
    provider?: string;
  }
  export interface Ptsv2paymentsHealthCareInformation {
    /**
     * array for Healthcare fields
     */
    amountDetails?: Array<Ptsv2paymentsHealthCareInformationAmountDetails>;
  }
  export interface Ptsv2paymentsHealthCareInformationAmountDetails {
    /**
     * Total amount that has been spent on healthcare in a transaction. Valid Values for **Visa**: - `healthcare` - Total Amount Healthcare - `healthcare-transit` - Amount Transit - `vision` - Amount Vision/Optical - `prescription` - Amount Prescription/RX - `clinic` - Amount Clinic/Other Qualified Medical - `dental` - Amount Dental   `Note:` -  Prescription, Clinic and dental amounts must be preceded with the total healthcare amount and cannot occur individually.  Vision and Transit must be sent individually and cannot be combined with total healthcare amount or any other amounts. Total Healthcare amount can be sent individually.  Valid Values for **MasterCard**: - `prescription` - Amount Prescription/RX - `eligible-total` - Total Amount Healthcare   `Note:` -  Prescription must be preceded with the total healthcare amount and cannot occur individually. Total Healthcare amount can be sent individually.
     */
    amountType?: string;
    /**
     * Total Amount that has been spent on transit healthcare. This is 13 byte field including sign. If the amount is positive, then it is a debit for the customer. If the amount is negative, then it is a credit for the customer.
     */
    amount?: string;
  }
  export interface Ptsv2paymentsInstallmentInformation {
    /**
     * Amount for the current installment payment.  This field is supported only for CyberSource through VisaNet.  For details, see `installment_amount` field description in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
     */
    amount?: string;
    /**
     * Frequency of the installment payments. When you do not include this field in a request for a Crediario installment payment, CyberSource sends a space character to the processor.  For details, see `installment_frequency` field description in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  This field is supported only for CyberSource through VisaNet. Possible values: - `B`: Biweekly - `M`: Monthly - `W`: Weekly  For Crediario installment payments, the value for this field corresponds to the following data in the TC 33 capture file5: - Record: CP01 TCR9 - Position: 41 - Field: Installment Frequency  For details, see \"Installment Payments\" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
     */
    frequency?: string;
    /**
     * #### American Express Direct, Cielo, and CyberSource Latin American Processing Flag that indicates the type of funding for the installment plan associated with the payment.  Possible values: - `1`: Merchant-funded installment plan - `2`: Issuer-funded installment plan If you do not include this field in the request, CyberSource uses the value in your CyberSource account.  To change the value in your CyberSource account, contact CyberSource Customer Service. For details, see `installment_plan_type` field description in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  #### CyberSource through VisaNet and American Express Defined code that indicates the type of installment plan for this transaction.  Contact American Express for: - Information about the kinds of installment plans that American Express provides - Values for this field  For installment payments with American Express in Brazil, the value for this field corresponds to the following data in the TC 33 capture file*: - Record: CP07 TCR3 - Position: 5-6 - Field: Plan Type  * The TC 33 Capture file contains information about the purchases and refunds that a merchant submits to CyberSource. CyberSource through VisaNet creates the TC 33 Capture file at the end of the day and sends it to the merchant’s acquirer, who uses this information to facilitate end-of-day clearing processing with payment card companies.  #### CyberSource through VisaNet with Visa or Mastercard Flag indicating the type of funding for the installment plan associated with the payment. Possible values: - 1 or 01: Merchant-funded installment plan - 2 or 02: Issuer-funded installment plan - 43: Crediario installment plan—only with Visa in Brazil For details, see \"Installment Payments on CyberSource through VisaNet\" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  For installment payments with Visa in Brazil, the value for this field corresponds to the following data in the TC 33 capture file5: - Record: CP07 TCR1 - Position: 5-6 - Field: Installment Type  For all other kinds of installment payments, the value for this field corresponds to the following data in the TC 33 capture file5: - Record: CP01 TCR5 - Position: 39-40 - Field: Installment Plan Type (Issuer or Merchant)
     */
    planType?: string;
    /**
     * Installment number when making payments in installments. Used along with `totalCount` to track which payment is being processed.  For example, the second of 5 payments would be passed to CyberSource as `sequence` = 2 and `totalCount` = 5.  For details, see \"Installment Payments\" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  #### Chase Paymentech Solutions and FDC Compass This field is optional because this value is required in the merchant descriptors. For details, see \"Chase Paymentech Solutions Merchant Descriptors\" and \"FDC Compass Merchant Descriptors\" in the [Merchant Descriptors Using the SCMP API] (https://apps.cybersource.com/library/documentation/dev_guides/Merchant_Descriptors_SCMP_API/html/)  #### CyberSource through VisaNet When you do not include this field in a request for a Crediario installment payment, CyberSource sends a value of 0 to the processor.  For Crediario installment payments, the value for this field corresponds to the following data in the TC 33 capture file*: - Record: CP01 TCR9 - Position: 38-40 - Field: Installment Payment Number  * The TC 33 Capture file contains information about the purchases and refunds that a merchant submits to CyberSource. CyberSource through VisaNet creates the TC 33 Capture file at the end of the day and sends it to the merchant’s acquirer, who uses this information to facilitate end-of-day clearing processing with payment card companies.
     */
    sequence?: number;
    /**
     * Total amount of the loan that is being paid in installments. This field is supported only for CyberSource through VisaNet.  For details, see \"Installment Payments\" in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
     */
    totalAmount?: string;
    /**
     * Total number of installments when making payments in installments.  For details, see \"Installment Payments\" in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  #### Chase Paymentech Solutions and FDC Compass This field is optional because this value is required in the merchant descriptors.  For details, see \"Chase Paymentech Solutions Merchant Descriptors\" and \"FDC Compass Merchant Descriptors\" in the [Merchant Descriptors Using the SCMP API.] (https://apps.cybersource.com/library/documentation/dev_guides/Merchant_Descriptors_SCMP_API/html/)  #### American Express Direct, Cielo, and Comercio Latino This value is the total number of installments you approved.  #### CyberSource Latin American Processing in Brazil This value is the total number of installments that you approved. The default is 1.  #### All Other Processors This value is used along with _sequence_ to track which payment is being processed.  For example, the second of 5 payments would be passed to CyberSource as _sequence_ = 2 and _totalCount_ = 5.  #### CyberSource through VisaNet For Crediario installment payments, the value for this field corresponds to the following data in the TC 33 capture file*: - Record: CP01 TCR9 - Position: 23-25 - Field: Number of Installments  For installment payments with American Express in Brazil, the value for this field corresponds to the following data in the TC 33 capture file*: - Record: CP07 TCR3 - Position: 7-8 - Field: Number of Installments  For installment payments with Visa in Brazil, the value for this field corresponds to the following data in the TC 33 capture file*: - Record: CP07 TCR1 - Position: 7-8 - Field: Number of Installments  For all other kinds of installment payments, the value for this field corresponds to the following data in the TC 33 capture file*: - Record: CP01 TCR5 - Position: 20-22 - Field: Installment Total Count  **Note** The TC 33 Capture file contains information about the purchases and refunds that a merchant submits to CyberSource. CyberSource through VisaNet creates the TC 33 Capture file at the end of the day and sends it to the merchant’s acquirer, who uses this information to facilitate end-of-day clearing processing with payment card companies.
     */
    totalCount?: number;
    /**
     * Date of the first installment payment. Format: YYMMDD. When you do not include this field, CyberSource sends a string of six zeros (000000) to the processor. For details, see \"Installment Payments on CyberSource through VisaNet\" in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  This field is supported only for Crediario installment payments in Brazil on CyberSource through VisaNet.  The value for this field corresponds to the following data in the TC 33 capture file: - Record: CP01 TCR9 - Position: 42-47 - Field: Date of First Installment
     */
    firstInstallmentDate?: string;
    /**
     * Invoice information that you want to provide to the issuer. This value is similar to a tracking number and is the same for all installment payments for one purchase.  This field is supported only for installment payments with Mastercard on CyberSource through VisaNet in Brazil.  For details, see \"Installment Payments on CyberSource through VisaNet\" in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  The value for this field corresponds to the following data in the TC 33 capture file5: - Record: CP07 TCR4 - Position: 51-70 - Field: Purchase Identification
     */
    invoiceData?: string;
    /**
     * Payment plan for the installments.  Possible values: - 0 (default): Regular installment. This value is not allowed for airline transactions. - 1: Installment payment with down payment. - 2: Installment payment without down payment. This value is supported only for airline transactions. - 3: Installment payment; down payment and boarding fee will follow. This value is supported only for airline transactions. - 4: Down payment only; regular installment payment will follow. - 5: Boarding fee only. This value is supported only for airline transactions.  This field is supported only for installment payments with Visa on CyberSource through VisaNet in Brazil.  For details, see \"Installment Payments on CyberSource through VisaNet\" in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  The value for this field corresponds to the following data in the TC 33 capture file5: - Record: CP07 TCR1 - Position: 9 - Field: Merchant Installment Supporting Information
     */
    paymentType?: string;
    /**
     * Indicates whether the authorization request is a Crediario eligibility inquiry.  For details, see \"Installment Payments on CyberSource through VisaNet\" in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  Set the value for this field to `Crediario`.  This field is supported only for Crediario installment payments in Brazil on CyberSource through VisaNet.
     */
    eligibilityInquiry?: string;
    /**
     * Grace period requested by the customer before the first installment payment is due.  When you include this field in a request, you must also include the grace period duration type field.  The value for this field corresponds to the following data in the TC 33 capture file3: Record: CP01 TCR5, Position: 100-101, Field: Mastercard Grace Period Details.  This field is supported only for Mastercard installment payments in Brazil and Greece.
     */
    gracePeriodDuration?: string;
    /**
     * Unit for the requested grace period duration.  Possible values: - `D`: Days - `W`: Weeks - `M`: Months  The value for this field corresponds to the following data in the TC 33 capture file3: Record: CP01 TCR5, Position: 99, Field: Mastercard Grace Period Details  This field is supported only for Mastercard installment payments in Brazil and Greece on CyberSource through VisaNet.
     */
    gracePeriodDurationType?: string;
    /**
     * Amount of the first installment payment. The issuer provides this value when the first installment payment is successful. This field is supported for Mastercard installment payments on CyberSource through VisaNet in all countries except Brazil,Croatia, Georgia, and Greece. The value for this field corresponds to the following data in the TC 33 capture file: - Record: CP01 TCR5 - Position: 23-34 - Field: Amount of Each Installment
     */
    firstInstallmentAmount?: string;
  }
  export interface Ptsv2paymentsIssuerInformation {
    /**
     * Data defined by the issuer.  The value for this reply field will probably be the same as the value that you submitted in the authorization request, but it is possible for the processor, issuer, or acquirer to modify the value.  This field is supported only for Visa transactions on **CyberSource through VisaNet**.  For details, see `issuer_additional_data` field description in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
     */
    discretionaryData?: string;
  }
  export interface Ptsv2paymentsMerchantDefinedInformation {
    /**
     * The number you assign for as the key for your merchant-defined data field. Valid values are 0 to 100.  For example, to set or access the key for the 2nd merchant-defined data field in the array, you would reference `merchantDefinedInformation[1].key`.  #### CyberSource through VisaNet For installment payments with Mastercard in Brazil, use `merchantDefinedInformation[0].key` and `merchantDefinedInformation[1].key` for data that you want to provide to the issuer to identify the transaction.  For details, see the `merchant_defined_data1` request-level field description in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
     */
    key?: string;
    /**
     * The value you assign for your merchant-defined data field.  For details, see `merchant_defined_data1` field description in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  **Warning** Merchant-defined data fields are not intended to and must not be used to capture personally identifying information. Accordingly, merchants are prohibited from capturing, obtaining, and/or transmitting any personally identifying information in or via the merchant-defined data fields. Personally identifying information includes, but is not limited to, address, credit card number, social security number, driver's license number, state-issued identification number, passport number, and card verification numbers (CVV, CVC2, CVV2, CID, CVN). In the event CyberSource discovers that a merchant is capturing and/or transmitting personally identifying information via the merchant-defined data fields, whether or not intentionally, CyberSource will immediately suspend the merchant's account, which will result in a rejection of any and all transaction requests submitted by the merchant after the point of suspension.  #### CyberSource through VisaNet For installment payments with Mastercard in Brazil, use `merchantDefinedInformation[0].value` and `merchantDefinedInformation[1].value` for data that you want to provide to the issuer to identify the transaction. For details, see \"Installment Payments on CyberSource through VisaNet\" in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  For details, see \"Installment Payments on CyberSource through VisaNet\" in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  For installment payments with Mastercard in Brazil: - The value for merchantDefinedInformation[0].value corresponds to the following data in the TC 33 capture file5:   - Record: CP07 TCR5   - Position: 25-44   - Field: Reference Field 2 - The value for merchantDefinedInformation[1].value corresponds to the following data in the TC 33 capture file5:   - Record: CP07 TCR5   - Position: 45-64   - Field: Reference Field 3
     */
    value?: string;
  }
  export interface Ptsv2paymentsMerchantInformation {
    merchantDescriptor?: Ptsv2paymentsMerchantInformationMerchantDescriptor;
    /**
     * Company ID assigned to an independent sales organization. Get this value from Mastercard.  #### CyberSource through VisaNet The value for this field corresponds to the following data in the TC 33 capture file: - Record: CP01 TCR6 - Position: 106-116 - Field: Mastercard Independent Sales Organization ID  **Note** The TC 33 Capture file contains information about the purchases and refunds that a merchant submits to CyberSource. CyberSource through VisaNet creates the TC 33 Capture file at the end of the day and sends it to the merchant’s acquirer, who uses this information to facilitate end-of-day clearing processing with payment card companies.  For processor-specific information, see the `sales_organization_ID` field description in [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
     */
    salesOrganizationId?: string;
    /**
     * The value for this field is a four-digit number that the payment card industry uses to classify merchants into market segments. A payment card company assigned one or more of these values to your business when you started accepting the payment card company’s cards. When you do not include this field in your request, CyberSource uses the value in your CyberSource account.  For processor-specific information, see the `merchant_category_code` field description in [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)  #### CyberSource through VisaNet The value for this field corresponds to the following data in the TC 33 capture file5: - Record: CP01 TCR4 - Position: 150-153 - Field: Merchant Category Code
     */
    categoryCode?: number;
    /**
     * Merchant category code for domestic transactions. The value for this field is a four-digit number that the payment card industry uses to classify merchants into market segments. A payment card company assigned one or more of these values to your business when you started accepting the payment card company’s cards. Including this field in a request for a domestic transaction might reduce interchange fees.  When you include this field in a request: - Do not include the `merchant_category_code` field. - The value for this field overrides the value in your CyberSource account.  This field is supported only for: - Domestic transactions with Mastercard in Spain. Domestic means that you and the cardholder are in the same country. - Merchants enrolled in the OmniPay Direct interchange program. - First Data Merchant Solutions (Europe) on OmniPay Direct.
     */
    categoryCodeDomestic?: number;
    /**
     * Your Cadastro Nacional da Pessoa Jurídica (CNPJ) number.  This field is supported only for BNDES transactions on CyberSource through VisaNet.  The value for this field corresponds to the following data in the TC 33 capture file5: - Record: CP07 TCR6 - Position: 40-59 - Field: BNDES Reference Field 1  For details, see `bill_merchant_tax_id` field description in the [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
     */
    taxId?: string;
    /**
     * Your government-assigned tax identification number.  #### Tax Calculation Required field for value added tax only. Not applicable to U.S. and Canadian taxes.  #### CyberSource through VisaNet For CtV processors, the maximum length is 20.  For other processor-specific information, see the `merchant_vat_registration_number` field description in [Level II and Level III Processing Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/Level_2_3_SCMP_API/html)
     */
    vatRegistrationNumber?: string;
    /**
     * Reference number that facilitates card acceptor/corporation communication and record keeping.  For processor-specific information, see the `card_acceptor_ref_number` field description in [Level II and Level III Processing Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/Level_2_3_SCMP_API/html)
     */
    cardAcceptorReferenceNumber?: string;
    /**
     * Date and time at your physical location.  Format: `YYYYMMDDhhmmss`, where:  - `YYYY` = year  - `MM` = month  - `DD` = day  - `hh` = hour  - `mm` = minutes  - `ss` = seconds  #### Used by **Authorization** Required for these processors: - American Express Direct                                                                                                                                                                                                                                                                                                                         - American Express Direct - Credit Mutuel-CIC - FDC Nashville Global - SIX  Optional for all other processors.
     */
    transactionLocalDateTime?: string;
    serviceFeeDescriptor?: Ptsv2paymentsMerchantInformationServiceFeeDescriptor;
    /**
     * Use this field only if you are requesting payment with Payer Authentication serice together.  Your company’s name as you want it to appear to the customer in the issuing bank’s authentication form. This value overrides the value specified by your merchant bank.
     */
    merchantName?: string;
  }
  export interface Ptsv2paymentsMerchantInformationMerchantDescriptor {
    /**
     * Your merchant name.  **Note** For Paymentech processor using Cybersource Payouts, the maximum data length is 22.  #### PIN debit Your business name. This name is displayed on the cardholder’s statement. When you include more than one consecutive space, extra spaces are removed.  When you do not include this value in your PIN debit request, the merchant name from your account is used. **Important** This value must consist of English characters.  Optional field for PIN debit credit or PIN debit purchase requests.  #### Airline processing Your merchant name. This name is displayed on the cardholder’s statement. When you include more than one consecutive space, extra spaces are removed.  **Note** Some airline fee programs may require the original ticket number (ticket identifier) or the ancillary service description in positions 13 through 23 of this field.  **Important** This value must consist of English characters.  Required for captures and credits.
     */
    name?: string;
    /**
     * An alternate name for the merchant.  For the descriptions, used-by information, data types, and lengths for these fields, see the `merchant_descriptor_alternate` field description in [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)-->
     */
    alternateName?: string;
    /**
     * For the descriptions, used-by information, data types, and lengths for these fields, see `merchant_descriptor_contact` field description in [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)--> Contact information for the merchant.  **Note** These are the maximum data lengths for the following payment processors: - FDCCompass (13) - Paymentech (13)
     */
    contact?: string;
    /**
     * First line of merchant's address. For the descriptions, used-by information, data types, and lengths for these fields, see `merchant_descriptor_street` field description in [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
     */
    address1?: string;
    /**
     * Merchant's City.  #### PIN debit City for your business location. This value might be displayed on the cardholder’s statement.  When you do not include this value in your PIN debit request, the merchant name from your account is used. **Important** This value must consist of English characters.  Optional field for PIN debit credit or PIN debit purchase requests.
     */
    locality?: string;
    /**
     * Merchant's country.  #### PIN debit Country code for your business location. Use the [ISO Standard Country Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/countries_alpha_list.pdf) This value might be displayed on the cardholder’s statement.  When you do not include this value in your PIN debit request, the merchant name from your account is used. **Important** This value must consist of English characters. **Note** If your business is located in the U.S. or Canada and you include this field in a request, you must also include `merchantInformation.merchantDescriptor.administrativeArea`.  Optional field for PIN debit credit or PIN debit purchase.
     */
    country?: string;
    /**
     * Merchant's postal code.  #### PIN debit Postal code for your business location. This value might be displayed on the cardholder’s statement.  If your business is domiciled in the U.S., you can use a 5-digit or 9-digit postal code. A 9-digit postal code must follow this format: [5 digits][dash][4 digits] Example: `12345-6789`  If your business is domiciled in Canada, you can use a 6-digit or 9-digit postal code. A 6-digit postal code must follow this format: [alpha][numeric][alpha][space] [numeric][alpha][numeric] Example: `A1B 2C3`  When you do not include this value in your PIN debit request, the merchant name from your account is used. **Important** This value must consist of English characters.  **Note** This field is supported only for businesses located in the U.S. or Canada. **Important** Mastercard requires a postal code for any country that uses postal codes. You can provide the postal code in your account or you can include this field in your request.  Optional field for PIN debit credit or PIN debit purchase.
     */
    postalCode?: string;
    /**
     * The state where the merchant is located.  #### PIN debit State code or region code for your business. Use the Use the [State, Province, and Territory Codes for the United States and Canada](https://developer.cybersource.com/library/documentation/sbc/quickref/states_and_provinces.pdf) This value might be displayed on the cardholder’s statement.  When you do not include this value in your PIN debit request, the merchant name from your account is used. **Important** This value must consist of English characters.  **Note** This field is supported only for businesses located in the U.S. or Canada.  Optional field for PIN debit credit or PIN debit purchase.
     */
    administrativeArea?: string;
    /**
     * Merchnat phone as contact information for CNP transactions
     */
    phone?: string;
    /**
     * Address of company's website provided by merchant
     */
    url?: string;
  }
  export interface Ptsv2paymentsMerchantInformationServiceFeeDescriptor {
    /**
     * Name of the service provider that is collecting the service fee. The service provider name must consist of 3, 7, or 12 characters followed by an asterisk (*). This value must also include the words “Service Fee.”  When you include more than one consecutive space, extra spaces are removed. Use one of the following formats for this value: - <3-character name>*Service Fee - <7-character name>*Service Fee - <12-character name>*Service Fee  When payments are made in installments, this value must also include installment information such as “1 of 5” or “3 of 7.” For installment payments, use one of the following formats for this value: - <3-character name>*Service Fee*<N> of <M> - <7-character name>*Service Fee*<N> of <M> - <12-character name>*Service Fee*<N> of <M>  where <N> is the payment number and <M> is the total number of payments.  When you do not include this value in your request, CyberSource uses the value that is in your CyberSource account.  This value might be displayed on the cardholder’s statement.
     */
    name?: string;
    /**
     * Contact information for the service provider that is collecting the service fee. when you include more than one consecutive space, extra spaces are removed.  When you do not include this value in your request, CyberSource uses the value that is in your CyberSource account.  This value might be displayed on the cardholder’s statement.
     */
    contact?: string;
    /**
     * State or territory in which the service provider is located.  When you do not include this value in your request, CyberSource uses the value that is in your CyberSource account.  This value might be displayed on the cardholder’s statement.
     */
    state?: string;
  }
  export interface Ptsv2paymentsOrderInformation {
    amountDetails?: Ptsv2paymentsOrderInformationAmountDetails;
    billTo?: Ptsv2paymentsOrderInformationBillTo;
    shipTo?: Ptsv2paymentsOrderInformationShipTo;
    lineItems?: Array<Ptsv2paymentsOrderInformationLineItems>;
    invoiceDetails?: Ptsv2paymentsOrderInformationInvoiceDetails;
    shippingDetails?: Ptsv2paymentsOrderInformationShippingDetails;
    /**
     * This is only needed when you are requesting both payment and DM service at same time.  Boolean that indicates whether returns are accepted for this order. This field can contain one of the following values: - true: Returns are accepted for this order. - false: Returns are not accepted for this order.
     */
    returnsAccepted?: boolean;
    /**
     * Indicates whether cardholder is placing an order with a future availability or release date. This field can contain one of these values: - MERCHANDISE_AVAILABLE: Merchandise available - FUTURE_AVAILABILITY: Future availability
     */
    preOrder?: string;
    /**
     * Expected date that a pre-ordered purchase will be available. Format: YYYYMMDD
     */
    preOrderDate?: string;
    /**
     * Indicates whether the cardholder is reordering previously purchased merchandise. This field can contain one of these values: - false: First time ordered - true: Reordered
     */
    reordered?: boolean;
    /**
     * Total number of articles/items in the order as a numeric decimal count. Possible values: 00 - 99
     */
    totalOffersCount?: string;
  }
  export interface Ptsv2paymentsOrderInformationAmountDetails {
    /**
     * Grand total for the order. This value cannot be negative. You can include a decimal point (.), but no other special characters. CyberSource truncates the amount to the correct number of decimal places.  **Note** For CTV, FDCCompass, Paymentech processors, the maximum length for this field is 12.  **Important** Some processors have specific requirements and limitations, such as maximum amounts and maximum field lengths. For details, see: - \"Authorization Information for Specific Processors\" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/). - \"Capture Information for Specific Processors\" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/). - \"Credit Information for Specific Processors\" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/).  If your processor supports zero amount authorizations, you can set this field to 0 for the authorization to check if the card is lost or stolen. For details, see \"Zero Amount Authorizations,\" \"Credit Information for Specific Processors\" in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  #### Card Present Required to include either this field or `orderInformation.lineItems[].unitPrice` for the order.  #### Invoicing Required for creating a new invoice.  #### PIN Debit Amount you requested for the PIN debit purchase. This value is returned for partial authorizations. The issuing bank can approve a partial amount if the balance on the debit card is less than the requested transaction amount.  Required field for PIN Debit purchase and PIN Debit credit requests. Optional field for PIN Debit reversal requests.  #### GPX This field is optional for reversing an authorization or credit; however, for all other processors, these fields are required.  #### DCC with a Third-Party Provider Set this field to the converted amount that was returned by the DCC provider. You must include either this field or the 1st line item in the order and the specific line-order amount in your request. For details, see `grand_total_amount` field description in [Dynamic Currency Conversion For First Data Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/DCC_FirstData_SCMP/DCC_FirstData_SCMP_API.pdf).  #### FDMS South If you accept IDR or CLP currencies, see the entry for FDMS South in \"Authorization Information for Specific Processors\" of the [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  #### DCC for First Data Not used.
     */
    totalAmount?: number;
    /**
     * Currency used for the order. Use the three-character [ISO Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf)  #### Used by **Authorization** Required field.  **Authorization Reversal** For an authorization reversal (`reversalInformation`) or a capture (`processingOptions.capture` is set to `true`), you must use the same currency that you used in your payment authorization request.  #### PIN Debit Currency for the amount you requested for the PIN debit purchase. This value is returned for partial authorizations. The issuing bank can approve a partial amount if the balance on the debit card is less than the requested transaction amount. For the possible values, see the [ISO Standard Currency Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/currencies.pdf). Returned by PIN debit purchase.  For PIN debit reversal requests, you must use the same currency that was used for the PIN debit purchase or PIN debit credit that you are reversing. For the possible values, see the [ISO Standard Currency Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/currencies.pdf).  Required field for PIN Debit purchase and PIN Debit credit requests. Optional field for PIN Debit reversal requests.  #### GPX This field is optional for reversing an authorization or credit.  #### DCC for First Data Your local currency. For details, see the `currency` field description in [Dynamic Currency Conversion For First Data Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/DCC_FirstData_SCMP/DCC_FirstData_SCMP_API.pdf).  #### Tax Calculation Required for international tax and value added tax only. Optional for U.S. and Canadian taxes. Your local currency.
     */
    currency?: string;
    /**
     * Total discount amount applied to the order.
     */
    discountAmount?: string;
    /**
     * Total charges for any import or export duties included in the order.
     */
    dutyAmount?: string;
    /**
     * Gratuity or tip amount for restaurants when the card is present. Allowed only when `industryDatatype=restaurant`. When your customer uses a debit card or prepaid card, and you receive a partial authorization, the payment networks recommend that you do not submit a capture amount that is higher than the authorized amount. When the capture amount exceeds the partial amount that was approved, the issuer has chargeback rights for the excess amount.  #### Used by **Capture** Optional field.  #### CyberSource through VisaNet Restaurant data is supported only on CyberSource through VisaNet.
     */
    gratuityAmount?: string;
    /**
     * Total tax amount for all the items in the order.
     */
    taxAmount?: string;
    /**
     * Flag that indicates whether a national tax is included in the order total.  Possible values:   - **0**: national tax not included  - **1**: national tax included
     */
    nationalTaxIncluded?: string;
    /**
     * Flag that indicates how the merchant manages discounts.  Possible values:   - **0**: no invoice level discount included  - **1**: tax calculated on the postdiscount invoice total  - **2**: tax calculated on the prediscount invoice total
     */
    taxAppliedAfterDiscount?: string;
    /**
     * Flag that indicates how you calculate tax.  Possible values:   - **0**: net prices with tax calculated at line item level  - **1**: net prices with tax calculated at invoice level  - **2**: gross prices with tax provided at line item level  - **3**: gross prices with tax provided at invoice level  - **4**: no tax applies on the invoice for the transaction
     */
    taxAppliedLevel?: string;
    /**
     * For tax amounts that can be categorized as one tax type.  This field contains the tax type code that corresponds to the entry in the _lineItems.taxAmount_ field.  Possible values:   - **056**: sales tax (U.S only)  - **TX~**: all taxes (Canada only)   Note ~ = space.
     */
    taxTypeCode?: string;
    /**
     * Total freight or shipping and handling charges for the order. When you include this field in your request, you must also include the **totalAmount** field.  For processor-specific information, see the freight_amount field in [Level II and Level III Processing Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/Level_2_3_SCMP_API/html)
     */
    freightAmount?: string;
    /**
     * Set this field to the converted amount that was returned by the DCC provider. For processor-specific information, see the `foreign_amount` field description in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
     */
    foreignAmount?: string;
    /**
     * Set this field to the converted amount that was returned by the DCC provider.
     */
    foreignCurrency?: string;
    /**
     * Exchange rate returned by the DCC service. Includes a decimal point and a maximum of 4 decimal places.  For details, see `exchange_rate` request-level field description in the [Dynamic Currency Conversion For First Data Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/DCC_FirstData_SCMP/DCC_FirstData_SCMP_API.pdf)
     */
    exchangeRate?: string;
    /**
     * Time stamp for the exchange rate. This value is returned by the DCC service.  Format: `YYYYMMDD~HH:MM`  where ~ denotes a space.
     */
    exchangeRateTimeStamp?: string;
    surcharge?: Ptsv2paymentsOrderInformationAmountDetailsSurcharge;
    /**
     * This is a multicurrency field. It contains the transaction amount (field 4), converted to the Currency used to bill the cardholder’s account.
     */
    settlementAmount?: string;
    /**
     * This is a multicurrency-only field. It contains a 3-digit numeric code that identifies the currency used by the issuer to bill the cardholder's account.
     */
    settlementCurrency?: string;
    amexAdditionalAmounts?: Array<Ptsv2paymentsOrderInformationAmountDetailsAmexAdditionalAmounts>;
    taxDetails?: Array<Ptsv2paymentsOrderInformationAmountDetailsTaxDetails>;
    /**
     * Service fee. Required for service fee transactions.
     */
    serviceFeeAmount?: string;
    /**
     * Amount in your original local pricing currency.  This value cannot be negative. You can include a decimal point (.) in this field to denote the currency exponent, but you cannot include any other special characters.  If needed, CyberSource truncates the amount to the correct number of decimal places.
     */
    originalAmount?: string;
    /**
     * Your local pricing currency code.  For the possible values, see the [ISO Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf)
     */
    originalCurrency?: string;
    /**
     * Cashback amount in the acquirer’s currency. If a cashback amount is included in the request, it must be included in the `orderInformation.amountDetails.totalAmount` value.  This field is supported only on CyberSource through VisaNet.  #### Used by **Authorization** Optional. **Authorization Reversal** Optional.  #### PIN debit Required field for PIN debit purchase, PIN debit credit or PIN debit reversal.
     */
    cashbackAmount?: string;
    currencyConversion?: Ptsv2paymentsOrderInformationAmountDetailsCurrencyConversion;
  }
  export interface Ptsv2paymentsOrderInformationAmountDetailsAmexAdditionalAmounts {
    /**
     * Additional amount type. This field is supported only for **American Express Direct**.  For processor-specific information, see the `additional_amount_type0` request-level field description in [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
     */
    code?: string;
    /**
     * Additional amount. This field is supported only for **American Express Direct**.
     */
    amount?: string;
  }
  export interface Ptsv2paymentsOrderInformationAmountDetailsCurrencyConversion {
    /**
     * Flag indicating that DCC Lookup has been performed before this transaction. Set this field to 1 when cardholders opts to use DCC on the transaction.
     */
    indicator?: string;
    /**
     * Unique identifier generated by the DCC provider.
     */
    reconciliationId?: string;
    /**
     * Value of the Cybersource request ID returned in a DCC Lookup transaction.
     */
    id?: string;
  }
  export interface Ptsv2paymentsOrderInformationAmountDetailsSurcharge {
    /**
     * The surcharge amount is included in the total transaction amount but is passed in a separate field to the issuer and acquirer for tracking. The issuer can provide information about the surcharge amount to the customer.  If the amount is positive, then it is a debit for the customer. If the amount is negative, then it is a credit for the customer.  **NOTE**: This field is supported only for CyberSource through VisaNet (CtV) for Payouts. For CtV, the maximum string length is 8.  #### PIN debit Surcharge amount that you are charging the customer for this transaction. If you include a surcharge amount in the request, you must also include the surcharge amount in the value for `orderInformation.amountDetails.totalAmount`.  Optional field for transactions that use PIN debit credit or PIN debit purchase.
     */
    amount?: string;
    /**
     * Merchant-defined field for describing the surcharge amount.
     */
    description?: string;
  }
  export interface Ptsv2paymentsOrderInformationAmountDetailsTaxDetails {
    /**
     * Indicates the type of tax data for the _taxDetails_ object.  Possible values:  - `alternate` - `local` - `national` - `vat` - `other`  For processor-specific details, see the `alternate_tax_amount`, `local_tax`, `national_tax` or `vat_tax_amount` field descriptions in [Level II and Level III Processing Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/Level_2_3_SCMP_API/html/)
     */
    type?: string;
    /**
     * Indicates the amount of tax based on the `type` field as described in the table below:  | type      | type description | | ------------- |:-------------:| | `alternate` | Total amount of alternate tax for the order. | | `local`     | Sales tax for the order. | | `national`  | National tax for the order. | | `vat`       | Total amount of value added tax (VAT) included in the order. | | `other`     | Other tax. |
     */
    amount?: string;
    /**
     * Rate of VAT or other tax for the order.  Example 0.040 (=4%)  Valid range: 0.01 to 0.99 (1% to 99%, with only whole percentage values accepted; values with additional decimal places will be truncated)  For processor-specific details, see the `alternate_tax_amount`, `vat_rate`, `vat_tax_rate`, `local_tax`, `national_tax`, `vat_tax_amount` or `other_tax#_rate` field descriptions in the [Level II and Level III Processing Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/Level_2_3_SCMP_API/html/)
     */
    rate?: string;
    /**
     * Type of tax being applied to the item.  For possible values, see the processor-specific field descriptions in [Level II and Level III Processing Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/Level_2_3_SCMP_API/html/):  #### FDC Nashville Global - `alternate_tax_type_applied` - `alternate_tax_type_identifier`  #### Worldpay VAP - `alternate_tax_type_identifier`  #### RBS WorldPay Atlanta - `tax_type_applied`  #### TSYS Acquiring Solutions - `tax_type_applied` - `local_tax_indicator`  #### Chase Paymentech Solutions - `tax_type_applied`  #### Elavon Americas - `local_tax_indicator`  #### FDC Compass - `tax_type_applied`  #### OmniPay Direct - `local_tax_indicator`
     */
    code?: string;
    /**
     * Your tax ID number to use for the alternate tax amount. Required if you set alternate tax amount to any value, including zero. You may send this field without sending alternate tax amount.  For processor-specific details, see `alternate_tax_id` field description in [Level II and Level III Processing Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/Level_2_3_SCMP_API/html/)
     */
    taxId?: string;
    /**
     * Flag that indicates whether the alternate tax amount (`orderInformation.amountDetails.taxDetails[].amount`) is included in the request.  Possible values: - `false`: alternate tax amount is not included in the request. - `true`: alternate tax amount is included in the request.  For processor-specific details, see `alternate_tax_amount_indicator` field description in [Level II and Level III Processing Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/Level_2_3_SCMP_API/html/)
     */
    applied?: boolean;
    exemptionCode?: string;
  }
  export interface Ptsv2paymentsOrderInformationBillTo {
    /**
     * Customer’s first name. This name must be the same as the name on the card.  **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  #### CyberSource Latin American Processing **Important** For an authorization request, CyberSource Latin American Processing concatenates `orderInformation.billTo.firstName` and `orderInformation.billTo.lastName`. If the concatenated value exceeds 30 characters, CyberSource Latin American Processing declines the authorization request.\\ **Note** CyberSource Latin American Processing is the name of a specific processing connection that CyberSource supports. In the CyberSource API documentation, CyberSource Latin American Processing does not refer to the general topic of processing in Latin America. The information in this field description is for the specific processing connection called _CyberSource Latin American Processing_. It is not for any other Latin American processors that CyberSource supports.  #### CyberSource through VisaNet Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  #### For Payouts: This field may be sent only for FDC Compass.  #### Chase Paymentech Solutions Optional field.  ####  Credit Mutuel-CIC Optional field.  #### OmniPay Direct Optional field.  #### SIX Optional field.  #### TSYS Acquiring Solutions Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.  #### Worldpay VAP Optional field.  #### All other processors Not used.
     */
    firstName?: string;
    /**
     * Customer’s last name. This name must be the same as the name on the card.  **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  #### Chase Paymentech Solutions Optional field.  ####  Credit Mutuel-CIC Optional field.  #### CyberSource Latin American Processing **Important** For an authorization request, CyberSource Latin American Processing concatenates `orderInformation.billTo.firstName` and `orderInformation.billTo.lastName`. If the concatenated value exceeds 30 characters, CyberSource Latin American Processing declines the authorization request.\\ **Note** CyberSource Latin American Processing is the name of a specific processing connection that CyberSource supports. In the CyberSource API documentation, CyberSource Latin American Processing does not refer to the general topic of processing in Latin America. The information in this field description is for the specific processing connection called CyberSource Latin American Processing. It is not for any other Latin American processors that CyberSource supports.  #### CyberSource through VisaNet Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  #### For Payouts: This field may be sent only for FDC Compass.  #### OmniPay Direct Optional field.  #### RBS WorldPay Atlanta Optional field.  #### SIX Optional field.  #### TSYS Acquiring Solutions Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.  #### Worldpay VAP Optional field.  #### All other processors Not used.
     */
    lastName?: string;
    /**
     * Customer’s middle name.
     */
    middleName?: string;
    /**
     * Customer’s name suffix.
     */
    nameSuffix?: string;
    /**
     * Title.
     */
    title?: string;
    company?: Ptsv2paymentsOrderInformationBillToCompany;
    /**
     * Payment card billing street address as it appears on the credit card issuer’s records.  #### Atos This field must not contain colons (:).  #### CyberSource through VisaNet **Important** When you populate orderInformation.billTo.address1 and orderInformation.billTo.address2, CyberSource through VisaNet concatenates the two values. If the concatenated value exceeds 40 characters, CyberSource through VisaNet truncates the value at 40 characters before sending it to Visa and the issuing bank. Truncating this value affects AVS results and therefore might also affect risk decisions and chargebacks. Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  #### FDMS Nashville When the street name is numeric, it must be sent in numeric format. For example, if the address is _One First Street_, it must be sent as _1 1st Street_.  Required if keyed; not used if swiped.  String (20)  #### TSYS Acquiring Solutions Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.  #### All other processors: Optional. String (60)  #### For Payouts This field may be sent only for FDC Compass.  **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
     */
    address1?: string;
    /**
     * Used for additional address information. For example: _Attention: Accounts Payable_ Optional field.  For Payouts: This field may be sent only for FDC Compass.  #### Atos This field must not contain colons (:).  #### CyberSource through VisaNet **Important** When you populate `orderInformation.billTo.address1` and `orderInformation.billTo.address2`, CyberSource through VisaNet concatenates the two values. If the concatenated value exceeds 40 characters, CyberSource through VisaNet truncates the value at 40 characters before sending it to Visa and the issuing bank. Truncating this value affects AVS results and therefore might also affect risk decisions and chargebacks. Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  #### Chase Paymentech Solutions, FDC Compass, and TSYS Acquiring Solutions This value is used for AVS.  #### FDMS Nashville `orderInformation.billTo.address1` and `orderInformation.billTo.address2` together cannot exceed 20 characters. String (20)  #### All Other Processors String (60)
     */
    address2?: string;
    /**
     * Additional address information (third line of the billing address)
     */
    address3?: string;
    /**
     * Additional address information (fourth line of the billing address)
     */
    address4?: string;
    /**
     * Payment card billing city.  #### Atos This field must not contain colons (:).  #### CyberSource through VisaNet Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  #### For Payouts: This field may be sent only for FDC Compass.  #### Chase Paymentech Solutions Optional field.  ####  Credit Mutuel-CIC Optional field.  #### OmniPay Direct Optional field.  #### SIX Optional field.  #### TSYS Acquiring Solutions Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.  #### Worldpay VAP Optional field.  #### All other processors Not used.
     */
    locality?: string;
    /**
     * State or province of the billing address. Use the [State, Province, and Territory Codes for the United States and Canada](https://developer.cybersource.com/library/documentation/sbc/quickref/states_and_provinces.pdf).  For Payouts: This field may be sent only for FDC Compass.  ##### CyberSource through VisaNet Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  #### Chase Paymentech Solutions Optional field.  ####  Credit Mutuel-CIC Optional field.  #### OmniPay Direct Optional field.  #### SIX Optional field.  #### TSYS Acquiring Solutions Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.  #### Worldpay VAP Optional field.  #### All other processors Not used.
     */
    administrativeArea?: string;
    /**
     * Postal code for the billing address. The postal code must consist of 5 to 9 digits.  When the billing country is the U.S., the 9-digit postal code must follow this format: [5 digits][dash][4 digits]  **Example** `12345-6789`  When the billing country is Canada, the 6-digit postal code must follow this format: [alpha][numeric][alpha][space][numeric][alpha][numeric]  **Example** `A1B 2C3`  **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  #### For Payouts:  This field may be sent only for FDC Compass.  #### American Express Direct Before sending the postal code to the processor, CyberSource removes all nonalphanumeric characters and, if the remaining value is longer than nine characters, truncates the value starting from the right side.  #### Atos This field must not contain colons (:).  #### CyberSource through VisaNet Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  #### FDMS Nashville Required if `pointOfSaleInformation.entryMode=keyed` and the address is in the U.S. or Canada. Optional if `pointOfSaleInformation.entryMode=keyed` and the address is **not** in the U.S. or Canada. Not used if swiped.  #### RBS WorldPay Atlanta: For best card-present keyed rates, send the postal code if `pointOfSaleInformation.entryMode=keyed`.  #### TSYS Acquiring Solutions Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.  #### All other processors: Optional field.
     */
    postalCode?: string;
    /**
     * Payment card billing country. Use the two-character [ISO Standard Country Codes](http://apps.cybersource.com/library/documentation/sbc/quickref/countries_alpha_list.pdf).  #### CyberSource through VisaNet Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  #### Chase Paymentech Solutions Optional field.  ####  Credit Mutuel-CIC Optional field.  #### OmniPay Direct Optional field.  #### SIX Optional field.  #### TSYS Acquiring Solutions Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.  #### Worldpay VAP Optional field.  #### All other processors Not used.
     */
    country?: string;
    /**
     * Customer’s neighborhood, community, or region (a barrio in Brazil) within the city or municipality. This field is available only on **Cielo**.
     */
    district?: string;
    /**
     * Building number in the street address.  For example, if the street address is: Rua da Quitanda 187 then the building number is 187.  This field is supported only for:  - Cielo transactions.  - Redecard customer validation with CyberSource Latin American Processing.
     */
    buildingNumber?: string;
    /**
     * Customer's email address, including the full domain name.  #### CyberSource through VisaNet Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  For processor-specific information, see the `customer_email` request-level field description in [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)  #### Invoicing Email address for the customer for sending the invoice. If the invoice is in SENT status and email is updated, the old email customer payment link won't work and you must resend the invoice with the new payment link.  #### Chase Paymentech Solutions Optional field.  ####  Credit Mutuel-CIC Optional field.  #### OmniPay Direct Optional field.  #### SIX Optional field.  #### TSYS Acquiring Solutions Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.  #### Worldpay VAP Optional field.  #### All other processors Not used.
     */
    email?: string;
    /**
     * Email domain of the customer. The domain of the email address comprises all characters that follow the @ symbol, such as mail.example.com. For the Risk Update service, if the email address and the domain are sent in the request, the domain supersedes the email address.
     */
    emailDomain?: string;
    /**
     * Customer’s phone number.  It is recommended that you include the country code when the order is from outside the U.S.  #### Chase Paymentech Solutions Optional field.  ####  Credit Mutuel-CIC Optional field.  #### CyberSource through VisaNet Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  #### For Payouts: This field may be sent only for FDC Compass.  #### OmniPay Direct Optional field.  #### SIX Optional field.  #### TSYS Acquiring Solutions Optional field.  #### Worldpay VAP Optional field.  #### All other processors Not used.
     */
    phoneNumber?: string;
    /**
     * Customer's phone number type.  #### For Payouts: This field may be sent only for FDC Compass.  Possible Values: * day * home * night * work
     */
    phoneType?: string;
  }
  export interface Ptsv2paymentsOrderInformationBillToCompany {
    /**
     * Name of the customer’s company.  **CyberSource through VisaNet** Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  For processor-specific information, see the `company_name` field in [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
     */
    name?: string;
    /**
     * First line in the street address of the company purchasing the product.
     */
    address1?: string;
    /**
     * Additional address information for the company purchasing the product.
     */
    address2?: string;
    /**
     * City in the address of the company purchasing the product.
     */
    locality?: string;
    /**
     * State or province in the address of the company purchasing the product. Use the State, Province, and Territory Codes for the United States and Canada.
     */
    administrativeArea?: string;
    /**
     * Postal code in the address of the company purchasing the product. The postal code must consist of 5 to 9 digits.  When the company country is the U.S., the 9-digit postal code must follow this format: **[5 digits][dash][4 digits]** #### Example `12345-6789`  When the company country is Canada, the 6-digit postal code must follow this format: **[alpha][numeric][alpha][space][numeric][alpha][numeric]** #### Example `A1B 2C3`
     */
    postalCode?: string;
    /**
     * Country in the address of the company purchasing the product. Use the [ISO Standard Country Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/countries_alpha_list.pdf).
     */
    country?: string;
  }
  export interface Ptsv2paymentsOrderInformationInvoiceDetails {
    /**
     * Invoice Number.
     */
    invoiceNumber?: string;
    /**
     * Barcode Number.
     */
    barcodeNumber?: string;
    /**
     * Expiration Date.
     */
    expirationDate?: string;
    /**
     * Value used by your customer to identify the order. This value is typically a purchase order number. CyberSource recommends that you do not populate the field with all zeros or nines.  For processor-specific information, see the `user_po` field in [Level II and Level III Processing Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/Level_2_3_SCMP_API/html)
     */
    purchaseOrderNumber?: string;
    /**
     * Date the order was processed. `Format: YYYY-MM-DD`.  For processor-specific information, see the `purchaser_order_date` field in [Level II and Level III Processing Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/Level_2_3_SCMP_API/html)
     */
    purchaseOrderDate?: string;
    /**
     * The name of the individual or the company contacted for company authorized purchases.  For processor-specific information, see the `authorized_contact_name` field in [Level II and Level III Processing Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/Level_2_3_SCMP_API/html)
     */
    purchaseContactName?: string;
    /**
     * Flag that indicates whether an order is taxable. This value must be true if the sum of all _lineItems[].taxAmount_ values > 0.  If you do not include any `lineItems[].taxAmount` values in your request, CyberSource does not include `invoiceDetails.taxable` in the data it sends to the processor.  For processor-specific information, see the `tax_indicator` field in [Level II and Level III Processing Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/Level_2_3_SCMP_API/html)  Possible values:  - **true**  - **false**
     */
    taxable?: boolean;
    /**
     * VAT invoice number associated with the transaction.  For processor-specific information, see the `vat_invoice_ref_number` field in [Level II and Level III Processing Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/Level_2_3_SCMP_API/html)
     */
    vatInvoiceReferenceNumber?: string;
    /**
     * International description code of the overall order’s goods or services or the Categorizes purchases for VAT reporting. Contact your acquirer for a list of codes.  For processor-specific information, see the `summary_commodity_code` field in [Level II and Level III Processing Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/Level_2_3_SCMP_API/html)
     */
    commodityCode?: string;
    /**
     * Identifier for the merchandise. This field is supported only on the processors listed in this field description.  #### American Express Direct Possible value: - 1000: Gift card  #### CyberSource through VisaNet This value must be right justified. In Japan, this value is called a _goods code_.  #### JCN Gateway This value must be right justified. In Japan, this value is called a _goods code_.
     */
    merchandiseCode?: number;
    transactionAdviceAddendum?: Array<Ptsv2paymentsOrderInformationInvoiceDetailsTransactionAdviceAddendum>;
    /**
     * Code that identifies the value of the `referenceDataNumber` field.  For the possible values, see \"Reference Data Codes\" in [Level II and Level III Processing Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/Level_2_3_SCMP_API/html/).
     */
    referenceDataCode?: string;
    /**
     * Reference number. The meaning of this value is identified by the value of the `referenceDataCode` field.
     */
    referenceDataNumber?: string;
    /**
     * Transaction identifier that is generated. You have the option of printing the sales slip number on the receipt. This field is supported only on Cybersource through Visanet and JCN gateway.  Optional field.  #### Card Present processing message If you included this field in the request, the returned value is the value that you sent in the request. If you did not include this field in the request, the system generated this value for you.  The difference between this reply field and the `processorInformation.systemTraceAuditNumber` field is that the system generates the system trace audit number (STAN), and you must print the receipt number on the receipt; whereas you can generate the sales slip number, and you can choose to print the sales slip number on the receipt.
     */
    salesSlipNumber?: number;
    /**
     * Date of the tax calculation. Use format YYYYMMDD. You can provide a date in the past if you are calculating tax for a refund and want to know what the tax was on the date the order was placed. You can provide a date in the future if you are calculating the tax for a future date, such as an upcoming tax holiday.  The default is the date, in Pacific time, that the bank receives the request. Keep this in mind if you are in a different time zone and want the tax calculated with the rates that are applicable on a specific date.  #### Tax Calculation Optional field for U.S., Canadian, international tax, and value added taxes.
     */
    invoiceDate?: string;
  }
  export interface Ptsv2paymentsOrderInformationInvoiceDetailsTransactionAdviceAddendum {
    /**
     * Four Transaction Advice Addendum (TAA) fields. These fields are used to display descriptive information about a transaction on the customer’s American Express card statement. When you send TAA fields, start with amexdata_taa1, then ...taa2, and so on. Skipping a TAA field causes subsequent TAA fields to be ignored.  To use these fields, contact CyberSource Customer Support to have your account enabled for this feature.
     */
    data?: string;
  }
  export interface Ptsv2paymentsOrderInformationLineItems {
    /**
     * Type of product. The value for this field is used to identify the product category (electronic, handling, physical, service, or shipping). The default value is `default`.  If you are performing an authorization transaction (`processingOptions.capture` is set to `false`), and you set this field to a value other than `default` or one of the values related to shipping and/or handling, then `orderInformation.lineItems[].quantity`, `orderInformation.lineItems[].productName`, and `orderInformation.lineItems[].productSku` fields are required.  Optional field.  For details, see the `product_code` field description in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/).  #### Tax Calculation Optional field for U.S., Canadian, international tax, and value added taxes.  To use the tax calculation service, use values listed in the Tax Product Code Guide. For information about this document, contact customer support. See \"Product Codes,\" page 14, for more information.
     */
    productCode?: string;
    /**
     * For an authorization or capture transaction (`processingOptions.capture` is `true` or `false`), this field is required when `orderInformation.lineItems[].productCode` is not `default` or one of the other values that are related to shipping and/or handling.  #### Tax Calculation Optional field for U.S., Canadian, international tax, and value added taxes.
     */
    productName?: string;
    /**
     * Product identifier code. Also known as the Stock Keeping Unit (SKU) code for the product.  For an authorization or capture transaction (`processingOptions.capture` is set to `true` or `false`), this field is required when `orderInformation.lineItems[].productCode` is not set to **default** or one of the other values that are related to shipping and/or handling.  #### Tax Calculation Optional field for U.S. and Canadian taxes. Not applicable to international and value added taxes. For an authorization or capture transaction (`processingOptions.capture` is set to `true` or `false`), this field is required when `orderInformation.lineItems[].productCode` is not `default` or one of the values related to shipping and/or handling.
     */
    productSku?: string;
    /**
     * Number of units for this order. Must be a non-negative integer.  The default is `1`. For an authorization or capture transaction (`processingOptions.capture` is set to `true` or `false`), this field is required when `orderInformation.lineItems[].productCode` is not `default` or one of the other values related to shipping and/or handling.  #### Tax Calculation Optional field for U.S., Canadian, international tax, and value added taxes.
     */
    quantity?: number;
    /**
     * Per-item price of the product. This value for this field cannot be negative.  You must include either this field or the request-level field `orderInformation.amountDetails.totalAmount` in your request.  You can include a decimal point (.), but you cannot include any other special characters. The value is truncated to the correct number of decimal places.  #### DCC with a Third-Party Provider Set this field to the converted amount that was returned by the DCC provider. You must include either the 1st line item in the order and this field, or the request-level field `orderInformation.amountDetails.totalAmount` in your request.  #### FDMS South If you accept IDR or CLP currencies, see the entry for FDMS South in the [Merchant Descriptors Using the SCMP API Guide.] (https://apps.cybersource.com/library/documentation/dev_guides/Merchant_Descriptors_SCMP_API/html/)  #### Tax Calculation Required field for U.S., Canadian, international and value added taxes.  #### Zero Amount Authorizations If your processor supports zero amount authorizations, you can set this field to 0 for the authorization to check if the card is lost or stolen.  #### Maximum Field Lengths For GPN and JCN Gateway: Decimal (10) All other processors: Decimal (15)
     */
    unitPrice?: number;
    /**
     * Unit of measure, or unit of measure code, for the item.
     */
    unitOfMeasure?: string;
    /**
     * Total amount for the item. Normally calculated as the unit price times quantity.  When `orderInformation.lineItems[].productCode` is \"gift_card\", this is the purchase amount total for prepaid gift cards in major units.  Example: 123.45 USD = 123
     */
    totalAmount?: number;
    /**
     * Total tax to apply to the product. This value cannot be negative. The tax amount and the offer amount must be in the same currency. The tax amount field is additive.  The following example uses a two-exponent currency such as USD:   1. You include each line item in your request.  ..- 1st line item has amount=10.00, quantity=1, and taxAmount=0.80  ..- 2nd line item has amount=20.00, quantity=1, and taxAmount=1.60  2. The total amount authorized will be 32.40, not 30.00 with 2.40 of tax included.  Optional field.  #### Airlines processing Tax portion of the order amount. This value cannot exceed 99999999999999 (fourteen 9s). Format: English characters only. Optional request field for a line item.  #### Tax Calculation Optional field for U.S., Canadian, international tax, and value added taxes.  Note if you send this field in your tax request, the value in the field will override the tax engine
     */
    taxAmount?: string;
    /**
     * Tax rate applied to the item.  For details, see `tax_rate` field description in the [Level II and Level III Processing Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/Level_2_3_SCMP_API/html/)  **Visa**: Valid range is 0.01 to 0.99 (1% to 99%, with only whole percentage values accepted; values with additional decimal places will be truncated).  **Mastercard**: Valid range is 0.00001 to 0.99999 (0.001% to 99.999%).
     */
    taxRate?: string;
    /**
     * Flag to indicate how you handle discount at the line item level.   - 0: no line level discount provided  - 1: tax was calculated on the post-discount line item total  - 2: tax was calculated on the pre-discount line item total  `Note` Visa will inset 0 (zero) if an invalid value is included in this field.  This field relates to the value in the _lineItems[].discountAmount_ field.
     */
    taxAppliedAfterDiscount?: string;
    /**
     * Flag to indicate whether tax is exempted or not included.   - 0: tax not included  - 1: tax included  - 2: transaction is not subject to tax
     */
    taxStatusIndicator?: string;
    /**
     * Type of tax being applied to the item.  For possible values, see the processor-specific field descriptions in [Level II and Level III Processing Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/Level_2_3_SCMP_API/html/):  #### FDC Nashville Global - `alternate_tax_type_applied` - `alternate_tax_type_identifier`  #### Worldpay VAP - `alternate_tax_type_identifier`  #### RBS WorldPay Atlanta - `tax_type_applied`  #### TSYS Acquiring Solutions - `tax_type_applied` - `local_tax_indicator`  #### Chase Paymentech Solutions - `tax_type_applied`  #### Elavon Americas - `local_tax_indicator`  #### FDC Compass - `tax_type_applied`  #### OmniPay Direct - `local_tax_indicator`
     */
    taxTypeCode?: string;
    /**
     * Flag that indicates whether the tax amount is included in the Line Item Total.  Possible values:  - **true**  - **false**
     */
    amountIncludesTax?: boolean;
    /**
     * Flag to indicate whether the purchase is categorized as goods or services. Possible values:   - 00: goods  - 01: services
     */
    typeOfSupply?: string;
    /**
     * Commodity code or International description code used to classify the item. Contact your acquirer for a list of codes.
     */
    commodityCode?: string;
    /**
     * Discount applied to the item.
     */
    discountAmount?: number;
    /**
     * Flag that indicates whether the amount is discounted.  If you do not provide a value but you set Discount Amount to a value greater than zero, then CyberSource sets this field to **true**.  Possible values:  - **true**  - **false**
     */
    discountApplied?: boolean;
    /**
     * Rate the item is discounted. Maximum of 2 decimal places.  Example 5.25 (=5.25%)
     */
    discountRate?: string;
    /**
     * Field to support an invoice number for a transaction. You must specify the number of line items that will include an invoice number. By default, the first line item will include an invoice number field. The invoice number field can be included for up to 10 line items.
     */
    invoiceNumber?: string;
    taxDetails?: Array<Ptsv2paymentsOrderInformationAmountDetailsTaxDetails>;
    /**
     * Information about the product code used for the line item. Possible values: - `E`: The product code is `electronic_software`. - `P`: The product code is not `electronic_software`.  For details, see the `fulfillmentType` field description in [Business Center Reporting User Guide.] (https://apps.cybersource.com/library/documentation/dev_guides/reporting_and_reconciliation/Reporting_User/html/)
     */
    fulfillmentType?: string;
    /**
     * Weight of the item.  For details, see `weight_amount` field description in [Level II and Level III Processing Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/Level_2_3_SCMP_API/html/)
     */
    weight?: string;
    /**
     * Type of weight.  Possible values: - B: Billed weight - N: Actual net weight  For details, see `weight_identifier` offer-level field description in [Level II and Level III Processing Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/Level_2_3_SCMP_API/html/)
     */
    weightIdentifier?: string;
    /**
     * Code that specifies the unit of measurement for the weight amount. For example, `OZ` specifies ounce and `LB` specifies pound. The possible values are defined by the ANSI Accredited Standards Committee (ASC).  For details, see `weight_unit_measurement` offer-level field description in [Level II and Level III Processing Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/Level_2_3_SCMP_API/html/)
     */
    weightUnit?: string;
    /**
     * Code that identifies the value of the corresponding `orderInformation.lineItems[].referenceDataNumber` field.  Possible values: - AN: Client-defined asset code - MG: Manufacturer's part number - PO: Purchase order number - SK: Supplier stock keeping unit number - UP: Universal product code - VC: Supplier catalog number - VP: Vendor part number
     */
    referenceDataCode?: string;
    /**
     * Reference number.  The meaning of this value is identified by the value of the corresponding `referenceDataCode` field. See Numbered Elements.  The maximum length for this field depends on the value of the corresponding `referenceDataCode` field: - When the code is `PO`, the maximum length for the reference number is 22. - When the code is `VC`, the maximum length for the reference number is 20. - For all other codes, the maximum length for the reference number is 30.
     */
    referenceDataNumber?: string;
    /**
     * Brief description of item.
     */
    productDescription?: string;
    /**
     * When `orderInformation.lineItems[].productCode` is \"gift_card\", this is the currency used for the gift card purchase.  For details, see `pa_gift_card_currency` field description in [CyberSource Payer Authentication Using the SCMP API.] (https://apps.cybersource.com/library/documentation/dev_guides/Payer_Authentication_SCMP_API/Payer_Authentication_SCMP_API.pdf)  For the possible values, see the [ISO Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf)
     */
    giftCardCurrency?: number;
    /**
     * Destination to where the item will be shipped. Example: Commercial, Residential, Store
     */
    shippingDestinationTypes?: string;
    /**
     * This field is only used in DM service.  Determines whether to assign risk to the order if the billing and shipping addresses specify different cities, states, or countries. This field can contain one of the following values: - true: Orders are assigned only slight additional risk if billing and shipping addresses are different. - false: Orders are assigned higher additional risk if billing and shipping addresses are different.
     */
    gift?: boolean;
    passenger?: Ptsv2paymentsOrderInformationPassenger;
  }
  /**
   * Contains travel-related passenger details used by DM service only.
   */
  export interface Ptsv2paymentsOrderInformationPassenger {
    /**
     * Passenger classification associated with the price of the ticket. You can use one of the following values: - `ADT`: Adult - `CNN`: Child - `INF`: Infant - `YTH`: Youth - `STU`: Student - `SCR`: Senior Citizen - `MIL`: Military
     */
    type?: string;
    /**
     * Your company's passenger classification, such as with a frequent flyer program. In this case, you might use values such as `standard`, `gold`, or `platinum`.
     */
    status?: string;
    /**
     * Passenger's phone number. If the order is from outside the U.S., CyberSource recommends that you include the [ISO Standard Country Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/countries_alpha_list.pdf).
     */
    phone?: string;
    /**
     * Passenger's first name.
     */
    firstName?: string;
    /**
     * Passenger's last name.
     */
    lastName?: string;
    /**
     * ID of the passenger to whom the ticket was issued. For example, you can use this field for the frequent flyer number.
     */
    id?: string;
    /**
     * Passenger's email address, including the full domain name, such as jdoe@example.com.
     */
    email?: string;
    /**
     * Passenger's nationality country. Use the two character [ISO Standard Country Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/countries_alpha_list.pdf).
     */
    nationality?: string;
  }
  export interface Ptsv2paymentsOrderInformationShipTo {
    /**
     * First name of the recipient.  #### Litle Maximum length: 25  #### All other processors Maximum length: 60  Optional field.
     */
    firstName?: string;
    /**
     * Last name of the recipient.  #### Litle Maximum length: 25  #### All other processors Maximum length: 60  Optional field.
     */
    lastName?: string;
    /**
     * First line of the shipping address.  Required field for authorization if any shipping address information is included in the request; otherwise, optional.  #### Tax Calculation Optional field for U.S. and Canadian taxes. Not applicable to international and value added taxes. Billing address objects will be used to determine the cardholder’s location when shipTo objects are not present.
     */
    address1?: string;
    /**
     * Second line of the shipping address.  Optional field.  #### Tax Calculation Optional field for U.S. and Canadian taxes. Not applicable to international and value added taxes. Billing address objects will be used to determine the cardholder’s location when shipTo objects are not present.
     */
    address2?: string;
    /**
     * City of the shipping address.  Required field for authorization if any shipping address information is included in the request and shipping to the U.S. or Canada; otherwise, optional.  #### Tax Calculation Optional field for U.S. and Canadian taxes. Not applicable to international and value added taxes. Billing address objects will be used to determine the cardholder’s location when shipTo objects are not present.
     */
    locality?: string;
    /**
     * State or province of the shipping address. Use the [State, Province, and Territory Codes for the United States and Canada](https://developer.cybersource.com/library/documentation/sbc/quickref/states_and_provinces.pdf)  Required field for authorization if any shipping address information is included in the request and shipping to the U.S. or Canada; otherwise, optional.  #### Tax Calculation Optional field for U.S. and Canadian taxes. Not applicable to international and value added taxes. Billing address objects will be used to determine the cardholder’s location when shipTo objects are not present.
     */
    administrativeArea?: string;
    /**
     * Postal code for the shipping address. The postal code must consist of 5 to 9 digits.  Required field for authorization if any shipping address information is included in the request and shipping to the U.S. or Canada; otherwise, optional.  When the billing country is the U.S., the 9-digit postal code must follow this format: [5 digits][dash][4 digits]  Example 12345-6789  When the billing country is Canada, the 6-digit postal code must follow this format: [alpha][numeric][alpha][space][numeric][alpha][numeric]  Example A1B 2C3  #### American Express Direct Before sending the postal code to the processor, all nonalphanumeric characters are removed and, if the remaining value is longer than nine characters, the value is truncated starting from the right side. #### Tax Calculation Optional field for U.S. and Canadian taxes. Not applicable to international and value added taxes. Billing address objects will be used to determine the cardholder’s location when shipTo objects are not present.
     */
    postalCode?: string;
    /**
     * Country of the shipping address. Use the two-character [ISO Standard Country Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/countries_alpha_list.pdf)  Required field for authorization if any shipping address information is included in the request; otherwise, optional.  #### Tax Calculation Optional field for U.S., Canadian, international tax, and value added taxes. Billing address objects will be used to determine the cardholder’s location when shipTo objects are not present.
     */
    country?: string;
    /**
     * Neighborhood, community, or region within a city or municipality.
     */
    district?: string;
    /**
     * Building number in the street address. For example, the building number is 187 in the following address:  Rua da Quitanda 187
     */
    buildingNumber?: string;
    /**
     * Phone number associated with the shipping address.
     */
    phoneNumber?: string;
    /**
     * Name of the customer’s company.  For processor-specific information, see the company_name field in [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
     */
    company?: string;
    /**
     * Shipping destination of item. Example: Commercial, Residential, Store
     */
    destinationTypes?: string;
    /**
     * Indicates destination chosen for the transaction. Possible values: - 01- Ship to cardholder billing address - 02- Ship to another verified address on file with merchant - 03- Ship to address that is different than billing address - 04- Ship to store (store address should be populated on request) - 05- Digital goods - 06- Travel and event tickets, not shipped - 07- Other
     */
    destinationCode?: number;
    email?: string;
    /**
     * Shipping method for the product. Possible values: - lowcost: Lowest-cost service - sameday: Courier or same-day service - oneday: Next-day or overnight service - twoday: Two-day service - threeday: Three-day service - pickup: Store pick-up - other: Other shipping method - none: No shipping method because product is a service or subscription Required for American Express SafeKey (U.S.).
     */
    method?: string;
  }
  /**
   * Contains shipping information not related to address.
   */
  export interface Ptsv2paymentsOrderInformationShippingDetails {
    /**
     * Boolean that indicates whether the customer requested gift wrapping for this purchase. This field can contain one of the following values: - true: The customer requested gift wrapping. - false: The customer did not request gift wrapping.
     */
    giftWrap?: boolean;
    /**
     * Shipping method for the product. Possible values:   - `lowcost`: Lowest-cost service  - `sameday`: Courier or same-day service  - `oneday`: Next-day or overnight service  - `twoday`: Two-day service  - `threeday`: Three-day service  - `pickup`: Store pick-up  - `other`: Other shipping method  - `none`: No shipping method because product is a service or subscription
     */
    shippingMethod?: string;
    /**
     * Postal code for the address from which the goods are shipped, which is used to establish nexus. The default is the postal code associated with your CyberSource account.  The postal code must consist of 5 to 9 digits. When the billing country is the U.S., the 9-digit postal code must follow this format:  `[5 digits][dash][4 digits]`  Example 12345-6789  When the billing country is Canada, the 6-digit postal code must follow this format:  `[alpha][numeric][alpha][space] [numeric][alpha][numeric]`  Example A1B 2C3  This field is frequently used for Level II and Level III transactions.
     */
    shipFromPostalCode?: string;
  }
  export interface Ptsv2paymentsPaymentInformation {
    card?: Ptsv2paymentsPaymentInformationCard;
    tokenizedCard?: Ptsv2paymentsPaymentInformationTokenizedCard;
    fluidData?: Ptsv2paymentsPaymentInformationFluidData;
    customer?: Ptsv2paymentsPaymentInformationCustomer;
    paymentInstrument?: Ptsv2paymentsPaymentInformationPaymentInstrument;
    instrumentIdentifier?: Ptsv2paymentsPaymentInformationInstrumentIdentifier;
    shippingAddress?: Ptsv2paymentsPaymentInformationShippingAddress;
    legacyToken?: Ptsv2paymentsPaymentInformationLegacyToken;
    bank?: Ptsv2paymentsPaymentInformationBank;
    paymentType?: Ptsv2paymentsPaymentInformationPaymentType;
    /**
     * Mastercard-defined code that indicates how the account information was obtained.  - `00` (default): Card - `01`: Removable secure element that is personalized for use with a mobile phone and controlled by the wireless service provider; examples: subscriber identity module (SIM), universal integrated circuit card (UICC) - `02`: Key fob - `03`: Watch - `04`: Mobile tag - `05`: Wristband - `06`: Mobile phone case or sleeve - `07`: Mobile phone with a non-removable, secure element that is controlled by the wireless service provider; for example, code division multiple access (CDMA) - `08`: Removable secure element that is personalized for use with a mobile phone and not controlled by the wireless service provider; example: memory card - `09`: Mobile phone with a non-removable, secure element that is not controlled by the wireless service provider - `10`: Removable secure element that is personalized for use with a tablet or e-book and is controlled by the wireless service provider; examples: subscriber identity module (SIM), universal integrated circuit card (UICC) - `11`: Tablet or e-book with a non-removable, secure element that is controlled by the wireless service provider - `12`: Removable secure element that is personalized for use with a tablet or e-book and is not controlled by the wireless service provider - `13`: Tablet or e-book with a non-removable, secure element that is not controlled by the wireless service provider  This field is supported only for Mastercard on CyberSource through VisaNet.  #### Used by **Authorization** Optional field.
     */
    initiationChannel?: string;
  }
  export interface Ptsv2paymentsPaymentInformationBank {
    account?: Ptsv2paymentsPaymentInformationBankAccount;
    /**
     * Bank routing number. This is also called the _transit number_.  For details, see `ecp_rdfi` request field description in the [Electronic Check Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/EChecks_SCMP_API/html/)
     */
    routingNumber?: string;
  }
  export interface Ptsv2paymentsPaymentInformationBankAccount {
    /**
     * Account type.  Possible values:  - **C**: Checking.  - **G**: General ledger. This value is supported only on Wells Fargo ACH.  - **S**: Savings (U.S. dollars only).  - **X**: Corporate checking (U.S. dollars only).
     */
    type?: string;
    /**
     * Account number.  When processing encoded account numbers, use this field for the encoded account number.
     */
    number?: string;
    /**
     * Identifier for the bank that provided the customer’s encoded account number.  To obtain the bank identifier, contact your processor.  For details, see `account_encoder_id` request-level field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
     */
    encoderId?: string;
    /**
     * Check number.  Chase Paymentech Solutions - Optional. CyberSource ACH Service - Not used. RBS WorldPay Atlanta - Optional on debits. Required on credits. TeleCheck - Strongly recommended on debit requests. Optional on credits.
     */
    checkNumber?: string;
    /**
     * Image reference number associated with the check. You cannot include any special characters.
     */
    checkImageReferenceNumber?: string;
  }
  export interface Ptsv2paymentsPaymentInformationCard {
    /**
     * The customer’s payment card number, also known as the Primary Account Number (PAN). You can also use this field for encoded account numbers.  #### FDMS Nashville Required. String (19)  #### GPX Required if `pointOfSaleInformation.entryMode=keyed`. However, this field is optional if your account is configured for relaxed requirements for address data and expiration date. **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  #### All other processors Required if `pointOfSaleInformation.entryMode=keyed`. However, this field is optional if your account is configured for relaxed requirements for address data and expiration date. **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
     */
    number?: string;
    /**
     * Two-digit month in which the payment card expires.  Format: `MM`.  Valid values: `01` through `12`. Leading 0 is required.  #### Barclays and Streamline For Maestro (UK Domestic) and Maestro (International) cards on Barclays and Streamline, this must be a valid value (`01` through `12`) but is not required to be a valid expiration date. In other words, an expiration date that is in the past does not cause CyberSource to reject your request. However, an invalid expiration date might cause the issuer to reject your request.  #### Encoded Account Numbers For encoded account numbers (_type_=039), if there is no expiration date on the card, use `12`.  #### FDMS Nashville Required field.  #### GPX Required if `pointOfSaleInformation.entryMode=keyed`. However, this field is optional if your account is configured for relaxed requirements for address data and expiration date. **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  #### All other processors Required if `pointOfSaleInformation.entryMode=keyed`. However, this field is optional if your account is configured for relaxed requirements for address data and expiration date. **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
     */
    expirationMonth?: string;
    /**
     * Four-digit year in which the payment card expires.  Format: `YYYY`.  #### Barclays and Streamline For Maestro (UK Domestic) and Maestro (International) cards on Barclays and Streamline, this must be a valid value (`1900` through `3000`) but is not required to be a valid expiration date. In other words, an expiration date that is in the past does not cause CyberSource to reject your request. However, an invalid expiration date might cause the issuer to reject your request.  #### Encoded Account Numbers For encoded account numbers (**_type_**`=039`), if there is no expiration date on the card, use `2021`.  #### FDMS Nashville Required field.  #### FDC Nashville Global and FDMS South You can send in 2 digits or 4 digits. If you send in 2 digits, they must be the last 2 digits of the year.  #### GPX Required if `pointOfSaleInformation.entryMode=keyed`. However, this field is optional if your account is configured for relaxed requirements for address data and expiration date. **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  #### All other processors Required if `pointOfSaleInformation.entryMode=keyed`. However, this field is optional if your account is configured for relaxed requirements for address data and expiration date. **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
     */
    expirationYear?: string;
    /**
     * Three-digit value that indicates the card type.  **IMPORTANT** It is strongly recommended that you include the card type field in request messages even if it is optional for your processor and card type. Omitting the card type can cause the transaction to be processed with the wrong card type.  Possible values: - `001`: Visa. For card-present transactions on all processors except SIX, the Visa Electron card type is processed the same way that the Visa debit card is processed. Use card type value `001` for Visa Electron. - `002`: Mastercard, Eurocard[^1], which is a European regional brand of Mastercard. - `003`: American Express - `004`: Discover - `005`: Diners Club - `006`: Carte Blanche[^1] - `007`: JCB[^1] - `014`: Enroute[^1] - `021`: JAL[^1] - `024`: Maestro (UK Domestic)[^1] - `031`: Delta[^1]: Use this value only for Ingenico ePayments. For other processors, use `001` for all Visa card types. - `033`: Visa Electron[^1]. Use this value only for Ingenico ePayments and SIX. For other processors, use `001` for all Visa card types. - `034`: Dankort[^1] - `036`: Cartes Bancaires[^1] - `037`: Carta Si[^1] - `039`: Encoded account number[^1] - `040`: UATP[^1] - `042`: Maestro (International)[^1] - `050`: Hipercard[^2,3] - `051`: Aura - `054`: Elo[^3] - `062`: China UnionPay  [^1]: For this card type, you must include the `paymentInformation.card.type` or `paymentInformation.tokenizedCard.type` field in your request for an authorization or a stand-alone credit. [^2]: For this card type on Cielo 3.0, you must include the `paymentInformation.card.type` or `paymentInformation.tokenizedCard.type` field in a request for an authorization or a stand-alone credit. This card type is not supported on Cielo 1.5. [^3]: For this card type on Getnet and Rede, you must include the `paymentInformation.card.type` or `paymentInformation.tokenizedCard.type` field in a request for an authorization or a stand-alone credit.  #### Used by **Authorization** Required for Carte Blanche and JCB. Optional for all other card types.  #### Card Present reply This field is included in the reply message when the client software that is installed on the POS terminal uses the token management service (TMS) to retrieve tokenized payment details. You must contact customer support to have your account enabled to receive these fields in the credit reply message.  Returned by the Credit service.  This reply field is only supported by the following processors: - American Express Direct - Credit Mutuel-CIC - FDC Nashville Global - OmniPay Direct - SIX  #### GPX This field only supports transactions from the following card types: - Visa - Mastercard - AMEX - Discover - Diners - JCB - Union Pay International
     */
    type?: string;
    /**
     * Flag that specifies the type of account associated with the card. The cardholder provides this information during the payment process.  #### Cielo and Comercio Latino  Possible values:   - CREDIT: Credit card  - DEBIT: Debit card  This field is required for:  - Debit transactions on Cielo and Comercio Latino.  - Transactions with Brazilian-issued cards on CyberSource through VisaNet.  **Note** The value for this field corresponds to the following data in the TC 33 capture file5: - Record: CP07 TCR0 - Position: 51 - Field: Combination Card Transaction Identifier  This field is supported only for Mastercard transactions in Brazil on CyberSource through VisaNet.
     */
    useAs?: string;
    /**
     * Flag that specifies the type of account associated with the card. The cardholder provides this information during the payment process.  This field is required in the following cases:   - Debit transactions on Cielo and Comercio Latino.   - Transactions with Brazilian-issued cards on CyberSource through VisaNet.   - Applicable only for CyberSource through VisaNet (CtV).      **Note** Combo cards in Brazil contain credit and debit functionality in a single card. Visa systems use a credit bank identification number (BIN) for this type of card. Using the BIN to determine whether a card is debit or credit can cause transactions with these cards to be processed incorrectly. CyberSource strongly recommends that you include this field for combo card transactions.  Possible values include the following.   - `CHECKING`: Checking account  - `CREDIT`: Credit card account  - `SAVING`: Saving account  - `LINE_OF_CREDIT`: Line of credit or credit portion of combo card  - `PREPAID`: Prepaid card account or prepaid portion of combo card  - `UNIVERSAL`: Universal account
     */
    sourceAccountType?: string;
    /**
     * Type of account that is being used when the value for the override_payment_method field is line of credit (LI) or prepaid card (PP). Possible values for line of credit: - `AGRC`: Visa Agro Custeio - `AGRE`: Visa Agro Electron - `AGRI`: Visa Agro Investimento - `AGRO`: Visa Agro Possible values for prepaid card: - `VVA`: Visa Vale Alimentacao - `VVF`: Visa Vale Flex - `VVR`: Visa Vale Refeicao This field is supported only for combo card transactions in Brazil on CyberSource through VisaNet.
     */
    sourceAccountTypeDetails?: string;
    /**
     * Card Verification Number.  #### FDMS Nashville Required for American Express or if swiped; otherwise, optional.  #### Ingenico ePayments Do not include this field when `commerceIndicator=recurring`. **Note** Ingenico ePayments was previously called _Global Collect_.  #### TSYS Acquiring Solutions Optional if pointOfSaleInformation.entryMode=keyed; otherwise, not used.  #### GPX Optional.  #### All other processors: Optional.
     */
    securityCode?: number;
    /**
     * Indicates whether a CVN code was sent. Possible values:   - `0` (default): CVN service not requested. This default value is used when you do not include      `securityCode` field in the request.  - `1` (default): CVN service requested and supported. This default value is used when you include      `securityCode` field in the request.  - `2`: CVN on credit card is illegible.  - `9`: CVN was not imprinted on credit card.  #### FDMS Nashville Required for American Express cards; otherwise, optional.  #### TSYS Acquiring Solutions Optional if `pointOfSaleInformation.entryMode=keyed`; otherwise, not used.  #### All other processors Optional.
     */
    securityCodeIndicator?: string;
    /**
     * Identifier for the issuing bank that provided the customer’s encoded account number. Contact your processor for the bank’s ID.
     */
    accountEncoderId?: string;
    /**
     * Number of times a Maestro (UK Domestic) card has been issued to the account holder. The card might or might not have an issue number. The number can consist of one or two digits, and the first digit might be a zero. When you include this value in your request, include exactly what is printed on the card. A value of 2 is different than a value of 02. Do not include the field, even with a blank value, if the card is not a Maestro (UK Domestic) card.  **Note** The issue number is not required for Maestro (UK Domestic) transactions.
     */
    issueNumber?: string;
    /**
     * Month of the start of the Maestro (UK Domestic) card validity period. Do not include the field, even with a blank value, if the card is not a Maestro (UK Domestic) card. `Format: MM`. Possible values: 01 through 12.  **Note** The start date is not required for Maestro (UK Domestic) transactions.
     */
    startMonth?: string;
    /**
     * Year of the start of the Maestro (UK Domestic) card validity period. Do not include the field, even with a blank value, if the card is not a Maestro (UK Domestic) card. `Format: YYYY`.  **Note** The start date is not required for Maestro (UK Domestic) transactions.
     */
    startYear?: string;
    /**
     * Name of the card product.  Possible value: - BNDES  This field is supported only for BNDES transactions on CyberSource through VisaNet.  The value for this field corresponds to the following data in the TC 33 capture file5: - Record: CP07 TCR4 - Position: 115-120 - Field: Brazil Country Data
     */
    productName?: string;
    typeSelectionIndicator?: number;
  }
  export interface Ptsv2paymentsPaymentInformationCustomer {
    /**
     * Unique identifier for the customer's card and billing information.  When you use Payment Tokenization or Recurring Billing and you include this value in your request, many of the fields that are normally required for an authorization or credit become optional.  **NOTE** When you use Payment Tokenization or Recurring Billing, the value for the Customer ID is actually the Cybersource payment token for a customer. This token stores information such as the consumer’s card number so it can be applied towards bill payments, recurring payments, or one-time payments.
     */
    customerId?: string;
    /**
     * Unique identifier for the Customer token used in the transaction. When you include this value in your request, many of the fields that are normally required for an authorization or credit become optional.
     */
    id?: string;
  }
  export interface Ptsv2paymentsPaymentInformationFluidData {
    /**
     * The encoded or encrypted value that a payment solution returns for an authorization request. For details about the valid values for a key, see [Creating an Online Authorization](https://developer.cybersource.com/api/developer-guides/dita-payments/CreatingOnlineAuth.html)
     */
    keySerialNumber?: string;
    /**
     * The identifier for a payment solution, which is sending the encrypted payment data for decryption. Valid values: - Samsung Pay: `RklEPUNPTU1PTi5TQU1TVU5HLklOQVBQLlBBWU1FTlQ=`  **Note**: For other payment solutions, the value may be specific to the customer's mobile device. For example, the descriptor for a Bluefin payment encryption would be a device-generated descriptor.  #### Used by **Authorization and Standalone Credits** Required for authorizations and standalone credits that use Bluefin PCI P2PE.  #### Card Present processing Format of the encrypted payment data. The value for Bluefin PCI P2PE is `Ymx1ZWZpbg==`.
     */
    descriptor?: string;
    /**
     * Represents the encrypted payment data BLOB. The entry for this field is dependent on the payment solution a merchant uses.  #### Used by **Authorization and Standalone Credits** Required for authorizations and standalone credits that use Bluefin PCI P2PE.  #### Card Present processing This field represents the encrypted Bluefin PCI P2PE payment data. Obtain the encrypted payment data from a Bluefin-supported device.
     */
    value?: string;
    /**
     * Encoding method used to encrypt the payment data.  Valid value: Base64
     */
    encoding?: string;
  }
  export interface Ptsv2paymentsPaymentInformationInstrumentIdentifier {
    /**
     * Unique identifier for the Instrument Identifier token used in the transaction. When you include this value in your request, many of the fields that can be supplied for an authorization or credit become optional.
     */
    id?: string;
  }
  export interface Ptsv2paymentsPaymentInformationLegacyToken {
    /**
     * Unique identifier for the legacy Secure Storage token used in the transaction. When you include this value in your request, many of the fields that are normally required for an authorization or credit become optional.
     */
    id?: string;
  }
  export interface Ptsv2paymentsPaymentInformationPaymentInstrument {
    /**
     * Unique identifier for the Payment Instrument token used in the transaction. When you include this value in your request, many of the fields that are normally required for an authorization or credit become optional.
     */
    id?: string;
  }
  export interface Ptsv2paymentsPaymentInformationPaymentType {
    /**
     * A Payment Type is an agreed means for a payee to receive legal tender from a payer. The way one pays for a commercial financial transaction. Examples: Card, Bank Transfer, Digital, Direct Debit. Possible values: - `CARD` (use this for a PIN debit transaction) - `CHECK` (use this for all eCheck payment transactions - ECP Debit, ECP Follow-on Credit, ECP StandAlone Credit)
     */
    name?: string;
    /**
     * Detailed information about the Payment Type. Possible values: - `DEBIT`: Use this value to indicate a PIN debit transaction.  Examples: For Card, if Credit or Debit or PrePaid. For Bank Transfer, if Online Bank Transfer or Wire Transfers.
     */
    subTypeName?: string;
    method?: Ptsv2paymentsPaymentInformationPaymentTypeMethod;
  }
  export interface Ptsv2paymentsPaymentInformationPaymentTypeMethod {
    /**
     * A Payment Type is enabled through a Method. Examples: Visa, Master Card, ApplePay, iDeal
     */
    name?: string;
  }
  export interface Ptsv2paymentsPaymentInformationShippingAddress {
    /**
     * Unique identifier for the Customers Shipping Address token used in the transaction. When you include this value in your request, many of the shipping fields that can be supplied for an authorization or credit become optional.
     */
    id?: string;
  }
  export interface Ptsv2paymentsPaymentInformationTokenizedCard {
    /**
     * Customer’s payment network token value.
     */
    number?: string;
    /**
     * One of two possible meanings: - The two-digit month in which a token expires. - The two-digit month in which a card expires. Format: `MM` Possible values: `01` through `12`  **NOTE** The meaning of this field is dependent on the payment processor that is returning the value in an authorization reply. Please see the processor-specific details below.  #### Barclays and Streamline For Maestro (UK Domestic) and Maestro (International) cards on Barclays and Streamline, this must be a valid value (`01` through `12`) but is not required to be a valid expiration date. In other words, an expiration date that is in the past does not cause CyberSource to reject your request. However, an invalid expiration date might cause the issuer to reject your request.  #### Encoded Account Numbers For encoded account numbers (`card_type=039`), if there is no expiration date on the card, use `12`.\\ **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  #### Samsung Pay and Apple Pay Month in which the token expires. CyberSource includes this field in the reply message when it decrypts the payment blob for the tokenized transaction.  For processor-specific information, see the `customer_cc_expmo` field in [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
     */
    expirationMonth?: string;
    /**
     * One of two possible meanings: - The four-digit year in which a token expires. - The four-digit year in which a card expires. Format: `YYYY` Possible values: `1900` through `3000` Data type: Non-negative integer  **NOTE** The meaning of this field is dependent on the payment processor that is returning the value in an authorization reply. Please see the processor-specific details below.  #### Barclays and Streamline For Maestro (UK Domestic) and Maestro (International) cards on Barclays and Streamline, this must be a valid value (1900 through 3000) but is not required to be a valid expiration date. In other words, an expiration date that is in the past does not cause CyberSource to reject your request. However, an invalid expiration date might cause the issuer to reject your request.  #### Encoded Account Numbers For encoded account numbers (`card_ type=039`), if there is no expiration date on the card, use `2021`.  #### FDC Nashville Global and FDMS South You can send in 2 digits or 4 digits. When you send in 2 digits, they must be the last 2 digits of the year.  #### Samsung Pay and Apple Pay Year in which the token expires. CyberSource includes this field in the reply message when it decrypts the payment blob for the tokenized transaction.  **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  For processor-specific information, see the `customer_cc_expyr` or `token_expiration_year` field in [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
     */
    expirationYear?: string;
    /**
     * Three-digit value that indicates the card type.  **IMPORTANT** It is strongly recommended that you include the card type field in request messages even if it is optional for your processor and card type. Omitting the card type can cause the transaction to be processed with the wrong card type.  Possible values: - `001`: Visa. For card-present transactions on all processors except SIX, the Visa Electron card type is processed the same way that the Visa debit card is processed. Use card type value `001` for Visa Electron. - `002`: Mastercard, Eurocard[^1], which is a European regional brand of Mastercard. - `003`: American Express - `004`: Discover - `005`: Diners Club - `006`: Carte Blanche[^1] - `007`: JCB[^1] - `014`: Enroute[^1] - `021`: JAL[^1] - `024`: Maestro (UK Domestic)[^1] - `031`: Delta[^1]: Use this value only for Ingenico ePayments. For other processors, use `001` for all Visa card types. - `033`: Visa Electron[^1]. Use this value only for Ingenico ePayments and SIX. For other processors, use `001` for all Visa card types. - `034`: Dankort[^1] - `036`: Cartes Bancaires[^1] - `037`: Carta Si[^1] - `039`: Encoded account number[^1] - `040`: UATP[^1] - `042`: Maestro (International)[^1] - `050`: Hipercard[^2,3] - `051`: Aura - `054`: Elo[^3] - `062`: China UnionPay  [^1]: For this card type, you must include the `paymentInformation.card.type` or `paymentInformation.tokenizedCard.type` field in your request for an authorization or a stand-alone credit. [^2]: For this card type on Cielo 3.0, you must include the `paymentInformation.card.type` or `paymentInformation.tokenizedCard.type` field in a request for an authorization or a stand-alone credit. This card type is not supported on Cielo 1.5. [^3]: For this card type on Getnet and Rede, you must include the `paymentInformation.card.type` or `paymentInformation.tokenizedCard.type` field in a request for an authorization or a stand-alone credit.  #### Used by **Authorization** Required for Carte Blanche and JCB. Optional for all other card types.  #### Card Present reply This field is included in the reply message when the client software that is installed on the POS terminal uses the token management service (TMS) to retrieve tokenized payment details. You must contact customer support to have your account enabled to receive these fields in the credit reply message.  Returned by the Credit service.  This reply field is only supported by the following processors: - American Express Direct - Credit Mutuel-CIC - FDC Nashville Global - OmniPay Direct - SIX  #### GPX This field only supports transactions from the following card types: - Visa - Mastercard - AMEX - Discover - Diners - JCB - Union Pay International
     */
    type?: string;
    /**
     * This field is used internally.
     */
    cryptogram?: string;
    /**
     * Value that identifies your business and indicates that the cardholder’s account number is tokenized. This value is assigned by the token service provider and is unique within the token service provider’s database.  **Note** This field is supported only for **CyberSource through VisaNet** and **FDC Nashville Global**.  #### PIN debit Optional field for PIN debit credit or PIN debit purchase transactions that use payment network tokens; otherwise, not used.
     */
    requestorId?: string;
    /**
     * Type of transaction that provided the token data. This value does not specify the token service provider; it specifies the entity that provided you with information about the token.  Possible value: - `2`: Near-field communication (NFC) transaction. The customer’s mobile device provided the token data for a contactless EMV transaction. For recurring transactions, use this value if the original transaction was a contactless EMV transaction.  **NOTE** No CyberSource through VisaNet acquirers support EMV at this time.  Required field for PIN debit credit or PIN debit purchase transactions that use payment network tokens; otherwise, not used.
     */
    transactionType?: string;
    /**
     * Confidence level of the tokenization. This value is assigned by the token service provider.  **Note** This field is supported only for **CyberSource through VisaNet** and **FDC Nashville Global**.  Returned by PIN debit credit or PIN debit purchase.
     */
    assuranceLevel?: string;
    /**
     * Type of technology used in the device to store token data. Possible values:  - `001`: Secure Element (SE). Smart card or memory with restricted access and encryption to prevent data tampering. For storing payment    credentials, a SE is tested against a set of requirements defined by the payment networks.     **Note** This field is supported only for _FDC Compass_.  - 002: Host Card Emulation (HCE). Emulation of a smart card by using software to create a virtual and exact representation of the card. Sensitive data is stored in a database that is hosted in the cloud. For storing payment credentials, a database must meet very stringent security requirements that exceed PCI DSS.  **Note** This field is supported only for _FDC Compass_.
     */
    storageMethod?: string;
    /**
     * Card Verification Number (CVN).  #### Ingenico ePayments Do not include this field when **commerceIndicator=recurring**. **Note** Ingenico ePayments was previously called _Global Collect_.  For details, see `customer_cc_cv_number` field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
     */
    securityCode?: string;
  }
  export interface Ptsv2paymentsPointOfSaleInformation {
    /**
     * Identifier for the terminal at your retail location. You can define this value yourself, but consult the processor for requirements.  #### CyberSource through VisaNet A list of all possible values is stored in your CyberSource account. If terminal ID validation is enabled for your CyberSource account, the value you send for this field is validated against the list each time you include the field in a request. To enable or disable terminal ID validation, contact CyberSource Customer Support.  When you do not include this field in a request, CyberSource uses the default value that is defined in your CyberSource account.  #### FDC Nashville Global To have your account configured to support this field, contact CyberSource Customer Support. This value must be a value that FDC Nashville Global issued to you.  #### For Payouts This field is applicable for CyberSource through VisaNet.  #### GPX Identifier for the terminal at your retail location. A list of all possible values is stored in your account. If terminal ID validation is enabled for your account, the value you send for this field is validated against the list each time you include the field in a request. To enable or disable terminal ID validation, contact customer support.  When you do not include this field in a request, the default value that is defined in your account is used.  Optional for authorizations.  #### Used by **Authorization** Optional for the following processors. When you do not include this field in a request, the default value that is defined in your account is used.   - American Express Direct   - Credit Mutuel-CIC   - FDC Nashville Global   - SIX - Chase Paymentech Solutions: Optional field. If you include this field in your request, you must also include `pointOfSaleInformation.catLevel`. - FDMS Nashville: The default value that is defined in your account is used. - GPX - OmniPay Direct: Optional field.  For the following processors, this field is not used. - GPN - JCN Gateway - RBS WorldPay Atlanta - TSYS Acquiring Solutions - Worldpay VAP  #### Card Present reply Terminal identifier assigned by the acquirer. This value must be printed on the receipt.
     */
    terminalId?: string;
    /**
     * Terminal serial number assigned by the hardware manufacturer. This value is provided by the client software that is installed on the POS terminal.  This value is not forwarded to the processor. Instead, the value is forwarded to the reporting functionality.  #### Used by **Authorization and Credit** Optional. This field is supported only by client software that is installed on your POS terminals for the following processors: - American Express Direct - Credit Mutuel-CIC - FDC Nashville Global - OmniPay Direct - SIX
     */
    terminalSerialNumber?: string;
    /**
     * Identifier for an alternate terminal at your retail location. You define the value for this field.  This field is supported only for MasterCard transactions on FDC Nashville Global. Otherwise, this field is not used by all other processors. Use the `terminalId` field to identify the main terminal at your retail location. If your retail location has multiple terminals, use this `laneNumber` field to identify the terminal used for the transaction. 
     */
    laneNumber?: string;
    /**
     * Type of cardholder-activated terminal. Possible values:   - 1: Automated dispensing machine  - 2: Self-service terminal  - 3: Limited amount terminal  - 4: In-flight commerce (IFC) terminal  - 5: Radio frequency device  - 6: Mobile acceptance terminal  - 7: Electronic cash register  - 8: E-commerce device at your location  - 9: Terminal or cash register that uses a dialup connection to connect to the transaction processing network  #### Chase Paymentech Solutions Only values 1, 2, and 3 are supported.  Required if `pointOfSaleInformation.terminalID` is included in the request; otherwise, optional.  #### CyberSource through VisaNet Values 1 through 6 are supported on CyberSource through VisaNet, but some acquirers do not support all six values.  Optional field.  #### FDC Nashville Global Only values 7, 8, and 9 are supported.  Optional field for EMV transactions; otherwise, not used.  #### GPN Only values 6, 7, 8, and 9 are supported.  Required field.  #### JCN Gateway Only values 6, 7, 8, and 9 are supported.  Required field.  #### TSYS Acquiring Solutions Only value 6 is supported.  Required for transactions from mobile devices; otherwise, not used.  #### All other processors Not used.  Nonnegative integer.
     */
    catLevel?: number;
    /**
     * Method of entering payment card information into the POS terminal. Possible values:   - `contact`: Read from direct contact with chip card.  - `contactless`: Read from a contactless interface using chip data.  - `keyed`: Manually keyed into POS terminal. This value is not supported on OmniPay Direct.  - `msd`: Read from a contactless interface using magnetic stripe data (MSD). This value is not supported on OmniPay Direct.  - `swiped`: Read from credit card magnetic stripe.  The `contact`, `contactless`, and `msd` values are supported only for EMV transactions.  #### Used by **Authorization** Required field.  #### Card Present Card present information about EMV applies only to credit card processing and PIN debit processing. All other card present information applies only to credit card processing.  #### PIN debit Required for a PIN debit purchase and a PIN debit credit request.
     */
    entryMode?: string;
    /**
     * POS terminal’s capability. Possible values:   - `1`: Terminal has a magnetic stripe reader only.  - `2`: Terminal has a magnetic stripe reader and manual entry capability.  - `3`: Terminal has manual entry capability only.  - `4`: Terminal can read chip cards.  - `5`: Terminal can read contactless chip cards; cannot use contact to read chip cards.  For an EMV transaction, the value of this field must be `4` or `5`.  #### PIN debit Required for PIN debit purchase and PIN debit credit request.  #### Used by **Authorization** Required for the following processors: - American Express Direct - Chase Paymentech Solutions - Credit Mutuel-CIC - FDC Nashville Global - FDMS Nashville - OmniPay Direct - SIX - Worldpay VAP  Optional for the following processors: - CyberSource through VisaNet - GPN - GPX - JCN Gateway - RBS WorldPay Atlanta - TSYS Acquiring Solutions
     */
    terminalCapability?: number;
    /**
     * A one-digit code that identifies the capability of terminal to capture PINs.  This code does not necessarily mean that a PIN was entered or is included in this message.  POS terminal’s capability. Possible values: - `1`: Terminal has a magnetic stripe reader only. - `2`: Terminal has a magnetic stripe reader and manual entry capability. - `3`: Terminal has manual entry capability only. - `4`: Terminal can read chip cards.* - `5`: Terminal can read contactless chip cards.* * The values of 4 and 5 are supported only for EMV transactions.  For Payouts: This field is applicable for CtV.
     */
    pinEntryCapability?: number;
    /**
     * Operating environment.  Possible values for all card types except Mastercard: - `0`: No terminal used or unknown environment. - `1`: On merchant premises, attended. - `2`: On merchant premises, unattended. Examples: oil, kiosks, self-checkout, mobile telephone, personal digital assistant (PDA). - `3`: Off merchant premises, attended. Examples: portable POS devices at trade shows, at service calls, or in taxis. - `4`: Off merchant premises, unattended. Examples: vending machines, home computer, mobile telephone, PDA. - `5`: On premises of cardholder, unattended. - `9`: Unknown delivery mode. - `S`: Electronic delivery of product. Examples: music, software, or eTickets that are downloaded over the internet. - `T`: Physical delivery of product. Examples: music or software that is delivered by mail or by a courier.  #### Possible values for Mastercard: - `2`: On merchant premises, unattended, or cardholder terminal. Examples: oil, kiosks, self-checkout, home computer, mobile telephone, personal digital assistant (PDA). Cardholder terminal is supported only for Mastercard transactions on CyberSource through VisaNet. - `4`: Off merchant premises, unattended, or cardholder terminal. Examples: vending machines, home computer, mobile telephone, PDA. Cardholder terminal is supported only for Mastercard transactions on CyberSource through VisaNet.  This field is supported only for American Express Direct and CyberSource through VisaNet.
     */
    operatingEnvironment?: string;
    emv?: Ptsv2paymentsPointOfSaleInformationEmv;
    /**
     * Point-of-sale details for the transaction. This value is returned only for **American Express Direct**. CyberSource generates this value, which consists of a series of codes that identify terminal capability, security data, and specific conditions present at the time the transaction occurred. To comply with the CAPN requirements, this value must be included in all subsequent follow-on requests, such as captures and follow-on credits.  When you perform authorizations, captures, and credits through CyberSource, CyberSource passes this value from the authorization service to the subsequent services for you. However, when you perform authorizations through CyberSource and perform subsequent services through other financial institutions, you must ensure that your requests for captures and credits include this value.  For details, see `auth_pos_data` field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
     */
    amexCapnData?: string;
    /**
     * Card’s track 1 and 2 data. For all processors except FDMS Nashville, this value consists of one of the following:   - Track 1 data  - Track 2 data  - Data for both tracks 1 and 2  For FDMS Nashville, this value consists of one of the following:  - Track 1 data  - Data for both tracks 1 and 2  Example: %B4111111111111111^SMITH/JOHN ^1612101976110000868000000?;4111111111111111=16121019761186800000?  #### Used by **Authorization** Required for Chase Paymentech Solutions, Credit Mutuel-CIC, CyberSource through VisaNet, FDC Nashville Global, JCN Gateway, OmniPay Direct, and SIX if `pointOfSaleInformation.entryMode` is equal to one of these values: - `contact` - `contactless` - `msd` - `swiped` Otherwise, this field not used.  Required for all other processors if `pointOfSaleInformation.entryMode=swiped`; otherwise, this field is not used.  #### GPX This field only supports transactions from the following card types: - Visa - Mastercard - AMEX - Discover - Diners - JCB - Union Pay International  #### PIN debit Track 2 data from the debit card. The sentinels are required. Required field for a PIN debit purchase and a PIN debit credit.
     */
    trackData?: string;
    /**
     * When connectivity is unavailable, the client software that is installed on the POS terminal can store a transaction in its memory and send it for authorization when connectivity is restored. This value is provided by the client software that is installed on the POS terminal.  This value is not forwarded to the processor. Instead, the value is forwarded to the reporting functionality.  Possible values: - `Y`: Transaction was stored and then forwarded. - `N` (default): Transaction was not stored and then forwarded.  For authorizations and credits, this field is supported only on these processors: - American Express Direct - FDC Nashville Global - OmniPay Direct - SIX  Optional field.
     */
    storeAndForwardIndicator?: string;
    cardholderVerificationMethod?: Array<string>;
    terminalInputCapability?: Array<string>;
    /**
     * Indicates whether the terminal can capture the card.  Possible values: - `1`: Terminal can capture card. - `0`: Terminal cannot capture card.  For authorizations and credits, this field is supported only by these processors: - American Express Direct - Credit Mutuel-CIC - OmniPay Direct  Optional field.
     */
    terminalCardCaptureCapability?: string;
    /**
     * Indicates whether the terminal can print or display messages.  Possible values: - 1: Neither - 2: Print only - 3: Display only - 4: Print and display  This field is supported for authorizations and credits only on the following processors: - American Express Direct - Credit Mutuel-CIC - FDC Nashville Global - OmniPay Direct - SIX  Optional field.
     */
    terminalOutputCapability?: string;
    /**
     * Maximum PIN length that the terminal can capture.  Possible values: -  0: No PIN capture capability -  1: PIN capture capability unknown -  4: Four characters -  5: Five characters -  6: Six characters -  7: Seven characters -  8: Eight characters -  9: Nine characters - 10: Ten characters - 11: Eleven characters - 12: Twelve characters  This field is supported for authorizations and credits only on the following processors: - American Express Direct - Credit Mutuel-CIC - OmniPay Direct - SIX  Required field for authorization or credit of PIN transactions.
     */
    terminalPinCapability?: number;
    /**
     * Value created by the client software that uniquely identifies the POS device. This value is provided by the client software that is installed on the POS terminal.  CyberSource does not forward this value to the processor. Instead, the value is forwarded to the CyberSource reporting functionality.  This field is supported only on American Express Direct, FDC Nashville Global, and SIX.
     */
    deviceId?: string;
    /**
     * Format that is used to encode the PIN block. This value is provided by the client software that is installed on the POS terminal.  Possible values: - `0`: ISO 9564 format 0 - `1`: ISO 9564 format 1 - `2`: ISO 9564 format 2 - `3`: ISO 9564 format 3  #### Used by **Authorization, PIN Debit** - Required when the cardholder enters a PIN and the card cannot verify the PIN, which means that the issuer must verify the PIN. - Required for PIN debit credit or PIN debit purchase.  For authorizations, this field is supported only on these processors: - American Express Direct - Credit Mutuel-CIC - FDC Nashville Global - OmniPay Direct - SIX  This field is also supported by processors that support chip and online PIN transactions. The following table lists the EMV Cards and Cardholder Verification Methods (CVMs) that these processors support:  | Processor | Chip and Offline PIN | Chip and Online PIN | Chip and Signature | | --- | --- | --- | --- | | American Express Direct | Yes | Yes | Yes | | Chase Paymentech Solutions | No | No | Yes | | Credit Mutuel-CIC | Yes | Yes | Yes | | CyberSource through VisaNet | Yes | No | Yes | | FDC Nashville Global | Yes | Yes | Yes | | GPN | No | No | Yes | | OmniPay Direct | Yes | No | Yes | | SIX | Yes | Yes | Yes |  #### GPX For chip and online PIN transactions for authorization, GPX supports the following EMV Cards and Cardholder Verification Methods (CVMs): - Chip and Offline PIN - Chip and Signature  For PIN Debit Purchase and Credit Service transactions, GPX supports the following EMV Cards and Cardholder Verification Methods (CVMs): - Chip and Online PIN
     */
    pinBlockEncodingFormat?: number;
    /**
     * Encrypted PIN.  This value is provided by the client software that is installed on the POS terminal.  #### Used by **Authorization, PIN Debit** Required when the cardholder enters a PIN and the card cannot verify the PIN, which means that the issuer must verify the PIN. Required for PIN debit credit or PIN debit purchase. Required for online PIN transactions.  For authorizations, this field is supported only on these processors: - American Express Direct - Credit Mutuel-CIC - FDC Nashville Global - OmniPay Direct - SIX  This field is also used by processors that support chip and online PIN transactions. The following table lists the EMV Cards and Cardholder Verification Methods (CVMs) that these processors support:  | Processor | Chip and Offline PIN | Chip and Online PIN | Chip and Signature | | --- | --- | --- | --- | | American Express Direct | Yes | Yes | Yes | | Chase Paymentech Solutions | No | No | Yes | | Credit Mutuel-CIC | Yes | Yes | Yes | | CyberSource through VisaNet | Yes | No | Yes | | FDC Nashville Global | Yes | Yes | Yes | | GPN | No | No | Yes | | OmniPay Direct | Yes | No | Yes | | SIX | Yes | Yes | Yes |
     */
    encryptedPin?: string;
    /**
     * Combination of the device's unique identifier and a transaction counter that is used in the process of decrypting the encrypted PIN. The entity that injected the PIN encryption keys into the terminal decrypts the encrypted PIN and creates this value.  For all terminals that are using derived unique key per transaction (DUKPT) encryption, this is generated as a single number within the terminal.  #### Used by **Authorization, PIN Debit** - Required when the cardholder enters a PIN and the card cannot verify the PIN, which means that the issuer must verify the PIN. - Required for PIN debit credit or PIN debit purchase. - Required for online PIN transactions  For authorizations, this field is supported only on these processors: - American Express Direct - Credit Mutuel-CIC - FDC Nashville Global - OmniPay Direct - SIX  This field is also used by processors that support chip and online PIN transactions. The following table lists the EMV Cards and Cardholder Verification Methods (CVMs) that these processors support:  | Processor | Chip and Offline PIN | Chip and Online PIN | Chip and Signature | | --- | --- | --- | --- | | American Express Direct | Yes | Yes | Yes | | Chase Paymentech Solutions | No | No | Yes | | Credit Mutuel-CIC | Yes | Yes | Yes | | CyberSource through VisaNet | Yes | No | Yes | | FDC Nashville Global | Yes | Yes | Yes | | GPN | No | No | Yes | | OmniPay Direct | Yes | No | Yes | | SIX | Yes | Yes | Yes |
     */
    encryptedKeySerialNumber?: string;
    /**
     * Version of the software installed on the POS terminal. This value is provided by the client software that is installed on the POS terminal.  CyberSource does not forward this value to the processor. Instead, the value is forwarded to the CyberSource reporting functionality.  This field is supported only on American Express Direct, FDC Nashville Global, and SIX.  For authorizations and credits, this field is supported only on these processors: - American Express Direct - Credit Mutuel-CIC - FDC Nashville Global - OmniPay Direct - SIX
     */
    partnerSdkVersion?: string;
    /**
     * This 32 byte length-maximum EBCDIC-K value is used to identify which chip application was performed between the terminal and the chip product. The included values are the Application Identifier (AID) and the Dedicated File (DF) name. It is available to early- or full-option VSDC issuers. Only single byte Katakana characters that can map to the EBCDIC-K table expected in the name.
     */
    emvApplicationIdentifierAndDedicatedFileName?: string;
    /**
     * Flag that indicates whether the terminal is compliant with standards mandated by the Reserve Bank of India for card-present domestic transactions in India.  Format: - First character indicates whether the terminal supports terminal line encryption (TLE). Possible values:   - 1: Not certified   - 2: Certified - Second character indicates whether the terminal supports Unique Key Per Transaction (UKPT) and Derived Unique Key Per Transaction (DUKPT). Possible values:   - 1: Not certified   - 2: Certified  **Example** `21` indicates that the terminal supports TLE but does not support UKPT/DUKPT.  You and the terminal vendors are responsible for terminal certification. If you have questions, contact your acquirer.  This field is supported only for Mastercard transactions on CyberSource through VisaNet.  **Note** On CyberSource through VisaNet, the value for this field corresponds to the following data in the TC 33 capture file: - Record: CP01 TCR6 - Position: 92-93 - Field: Mastercard Terminal Compliance Indicator  The TC 33 Capture file contains information about the purchases and refunds that a merchant submits to CyberSource. CyberSource through VisaNet creates the TC 33 Capture file at the end of the day and sends it to the merchant’s acquirer, who uses this information to facilitate end-of-day clearing processing with payment networks.  #### Used by **Authorization** Required for card-present transactions in India. Otherwise, not used.
     */
    terminalCompliance?: string;
    /**
     * Type of mPOS device. Possible values: - 0: Dongle - 1: Phone or tablet  This optional field is supported only for Mastercard transactions on CyberSource through VisaNet.  The value for this field corresponds to the following data in the TC 33 capture file: - Record: CP01 TCR6 - Position: 141 - Field: Mastercard mPOS Transaction  The TC 33 Capture file contains information about the purchases and refunds that a merchant submits to CyberSource. CyberSource through VisaNet creates the TC 33 Capture file at the end of the day and sends it to the merchant’s acquirer, who uses this information to facilitate end-of-day clearing processing with payment networks.
     */
    isDedicatedHardwareTerminal?: string;
  }
  export interface Ptsv2paymentsPointOfSaleInformationEmv {
    /**
     * EMV data that is transmitted from the chip card to the issuer, and from the issuer to the chip card. The EMV data is in the tag-length-value format and includes chip card tags, terminal tags, and transaction detail tags.  For information about the individual tags, see the “Application Specification” section in the EMV 4.3 Specifications: http://emvco.com  **Note** Card present information about EMV applies only to credit card processing and PIN debit processing. All other card present information applies only to credit card processing. PIN debit processing is available only on FDC Nashville Global.  **Important** The following tags contain sensitive information and **must not** be included in this field:   - `56`: Track 1 equivalent data  - `57`: Track 2 equivalent data  - `5A`: Application PAN  - `5F20`: Cardholder name  - `5F24`: Application expiration date (This sensitivity has been relaxed for Credit Mutuel-CIC, American Express Direct, FDC Nashville Global, First Data Merchant Solutions, and SIX)  - `99`: Transaction PIN  - `9F0B`: Cardholder name (extended)  - `9F1F`: Track 1 discretionary data  - `9F20`: Track 2 discretionary data  For captures, this field is required for contact EMV transactions. Otherwise, it is optional.  For credits, this field is required for contact EMV stand-alone credits and contactless EMV stand-alone credits. Otherwise, it is optional.  **Important** For contact EMV captures, contact EMV stand-alone credits, and contactless EMV stand-alone credits, you must include the following tags in this field. For all other types of EMV transactions, the following tags are optional.   - `95`: Terminal verification results  - `9F10`: Issuer application data  - `9F26`: Application cryptogram   #### CyberSource through VisaNet - In Japan: 199 bytes - In other countries: String (252)  #### GPX This field only supports transactions from the following card types: - Visa - Mastercard - AMEX - Discover - Diners - JCB - Union Pay International  #### JCN Gateway The following tags must be included: - `4F`: Application identifier - `84`: Dedicated file name  Data length: 199 bytes  #### All other processors: String (999)  #### Used by Authorization: Optional Authorization Reversal: Optional Credit: Optional PIN Debit processing (purchase, credit and reversal): Optional
     */
    tags?: string;
    /**
     * Method that was used to verify the cardholder's identity.  Possible values:  - `0`: No verification  - `1`: Signature  This field is supported only on **American Express Direct**.
     */
    cardholderVerificationMethodUsed?: number;
    /**
     * Number assigned to a specific card when two or more cards are associated with the same primary account number. This value enables issuers to distinguish among multiple cards that are linked to the same account. This value can also act as a tracking tool when reissuing cards. When this value is available, it is provided by the chip reader. When the chip reader does not provide this value, do not include this field in your request.  **Note** Card present information about EMV applies only to credit card processing and PIN debit processing. All other card present information applies only to credit card processing. PIN debit processing is available only on CyberSource through VisaNet and FDC Nashville Global.  #### Used by Authorization: Optional PIN Debit processing: Optional  #### GPX  This field only supports transactions from the following card types: - Visa - Mastercard - AMEX - Discover - Diners - JCB - Union Pay International
     */
    cardSequenceNumber?: string;
    /**
     * Indicates whether a fallback method was used to enter credit card information into the POS terminal. When a technical problem prevents a successful exchange of information between a chip card and a chip-capable terminal:   1. Swipe the card or key the credit card information into the POS terminal.  2. Use the pointOfSaleInformation.entryMode field to indicate whether the information was swiped or keyed.   Possible values: - `true`: Fallback method was used. - `false` (default): Fallback method was not used.  This field is supported only on American Express Direct, Chase Paymentech Solutions, CyberSource through VisaNet, FDC Nashville Global, GPN, JCN Gateway, OmniPay Direct, and SIX.
     */
    fallback?: boolean;
    /**
     * Reason for the EMV fallback transaction. An EMV fallback transaction occurs when an EMV transaction fails for one of these reasons:   - Technical failure: the EMV terminal or EMV card cannot read and process chip data.  - Empty candidate list failure: the EMV terminal does not have any applications in common with the EMV card.    EMV terminals are coded to determine whether the terminal and EMV card have any applications in common.    EMV terminals provide this information to you.  Possible values:   - `1`: Transaction was initiated with information from a magnetic stripe, and the previous transaction at the       EMV terminal either used information from a successful chip read or it was not a chip transaction.  - `2`: Transaction was initiated with information from a magnetic stripe, and the previous transaction at the       EMV terminal was an EMV fallback transaction because the attempted chip read was unsuccessful.  This field is supported only on **GPN** and **JCN Gateway**.  **NOTE**: This field is required when an EMV transaction fails for a technical reason. Do not include this field  when the EMV terminal does not have any applications in common with the EMV card.
     */
    fallbackCondition?: number;
  }
  export interface Ptsv2paymentsProcessingInformation {
    /**
     * Array of actions (one or more) to be included in the payment to invoke bundled serviecs along with payment.  Possible values are one or more of follows:   - `DECISION_SKIP`: Use this when you want to skip Decision Manager service(s).   - `TOKEN_CREATE`: Use this when you want to create a token from the card/bank data in your payment request.   - `CONSUMER_AUTHENTICATION`: Use this when you want to check if a card is enrolled in Payer Authentioncation along with your payment request.   - `VALIDATE_CONSUMER_AUTHENTICATION`: Use this after you acquire a Payer Authentioncation result that needs to be included for your payment request.
     */
    actionList?: Array<string>;
    /**
     * CyberSource tokens types you are performing a create on. If not supplied the default token type for the merchants token vault will be used.  Valid values: - customer - paymentInstrument - instrumentIdentifier - shippingAddress
     */
    actionTokenTypes?: Array<string>;
    /**
     * Indicates whether to also include a capture  in the submitted authorization request or not.  Possible values: - `true`: Include a capture with an authorization request. - `false`: (default) Do not include a capture with an authorization request.  #### Used by **Authorization and Capture** Optional field.
     */
    capture?: boolean;
    /**
     * Value that identifies the processor/acquirer to use for the transaction. This value is supported only for **CyberSource through VisaNet**.  Contact CyberSource Customer Support to get the value for this field.
     */
    processorId?: string;
    businessApplicationId?: string;
    /**
     * Type of transaction. Some payment card companies use this information when determining discount rates.  #### Used by **Authorization** Required payer authentication transactions; otherwise, optional. **Credit** Required for standalone credits on Chase Paymentech solutions; otherwise, optional. Only `internet`, `moto`, `install`, `recurring`, and `recurring_internet` are valid values.  #### Ingenico ePayments When you omit this field for Ingenico ePayments, the processor uses the default transaction type they have on file for you instead of the default value (listed in Appendix I, \"Commerce Indicators,\" on page 441.)  #### Payer Authentication Transactions For the possible values and requirements, see \"Payer Authentication,\" page 195.  #### Other Types of Transactions See Appendix I, \"Commerce Indicators,\" on page 441.  #### Card Present You must set this field to `retail`. This field is required for a card-present transaction.
     */
    commerceIndicator?: string;
    /**
     * Type of digital payment solution for the transaction. Possible Values:   - `visacheckout`: Visa Checkout. This value is required for Visa Checkout transactions. For details, see `payment_solution` field description in [Visa Checkout Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/VCO_SCMP_API/html/)  - `001`: Apple Pay.  - `004`: Cybersource In-App Solution.  - `005`: Masterpass. This value is required for Masterpass transactions on OmniPay Direct. For details, see \"Masterpass\" in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  - `006`: Android Pay.  - `007`: Chase Pay.  - `008`: Samsung Pay.  - `012`: Google Pay.
     */
    paymentSolution?: string;
    /**
     * Please check with Cybersource customer support to see if your merchant account is configured correctly so you can include this field in your request. * For Payouts: max length for FDCCompass is String (22).
     */
    reconciliationId?: string;
    /**
     * Value that links the current authorization request to the original authorization request. Set this value to the ID that was returned in the reply message from the original authorization request.  This value is used for:  - Partial authorizations - Split shipments  For details, see `link_to_request` field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
     */
    linkId?: string;
    /**
     * Set this field to 3 to indicate that the request includes Level III data.
     */
    purchaseLevel?: string;
    /**
     * Attribute that lets you define custom grouping for your processor reports. This field is supported only for **Worldpay VAP**.  For details, see `report_group` field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
     */
    reportGroup?: string;
    /**
     * Identifier for the **Visa Checkout** order. Visa Checkout provides a unique order ID for every transaction in the Visa Checkout **callID** field.
     */
    visaCheckoutId?: string;
    /**
     * Indicates that the transaction includes industry-specific data.  Possible Values: - `airline` - `restaurant` - `lodging` - `auto_rental` - `transit` - `healthcare_medical` - `healthcare_transit` - `transit`  #### Card Present, Airlines and Auto Rental You must set this field to `airline` in order for airline data to be sent to the processor. For example, if this field is not set to `airline` or is not included in the request, no airline data is sent to the processor.  You must set this field to `restaurant` in order for restaurant data to be sent to the processor. When this field is not set to `restaurant` or is not included in the request, no restaurant data is sent to the processor.  You must set this field to `auto_rental` in order for auto rental data to be sent to the processor. For example, if this field is not set to `auto_rental` or is not included in the request, no auto rental data is sent to the processor.  Restaurant data is supported only on CyberSource through VisaNet.
     */
    industryDataType?: string;
    authorizationOptions?: Ptsv2paymentsProcessingInformationAuthorizationOptions;
    captureOptions?: Ptsv2paymentsProcessingInformationCaptureOptions;
    recurringOptions?: Ptsv2paymentsProcessingInformationRecurringOptions;
    bankTransferOptions?: Ptsv2paymentsProcessingInformationBankTransferOptions;
    purchaseOptions?: Ptsv2paymentsProcessingInformationPurchaseOptions;
    electronicBenefitsTransfer?: Ptsv2paymentsProcessingInformationElectronicBenefitsTransfer;
    loanOptions?: Ptsv2paymentsProcessingInformationLoanOptions;
    /**
     * This field carries the wallet type in authorization requests and credit requests. Possible value are: - `101`: Masterpass remote payment. The customer created the wallet by manually interacting with a customer-controlled device such as a computer, tablet, or phone. This value is supported only for Masterpass transactions on Chase Paymentech Solutions and CyberSource through VisaNet. - `102`: Masterpass remote near field communication (NFC) payment. The customer created the wallet by tapping a PayPass card or customer-controlled device at a contactless card reader. This value is supported only for card-present Masterpass transactions on CyberSource through VisaNet. - `103`: Masterpass Apple Pay payment. The payment was made with a combination of Masterpass and Apple Pay. This value is supported only for Masterpass Apple Pay transactions on CyberSource through VisaNet. - `216`: Masterpass Google Pay payment. The payment was made with a combination of Masterpass and Google Pay. This value is supported only for Masterpass Google Pay transactions on CyberSource through VisaNet. - `217`: Masterpass Samsung Pay payment. The payment was made with a combination of Masterpass and Samsung Pay. This value is supported only for Masterpass Samsung Pay transactions on CyberSource through VisaNet. - `SDW`: Staged digital wallet. An issuer or operator created the wallet. This value is supported only for Masterpass transactions on Chase Paymentech Solutions. - `VCIND`: Visa Checkout payment. This value is supported only on CyberSource through VisaNet, FDC Compass, FDC Nashville Global, FDI Australia, and TSYS Acquiring Solutions. See Getting Started with Visa Checkout. For Visa Checkout transactions, the way CyberSource processes the value for this field depends on the processor. See the Visa Checkout section below. For all other values, this field is a passthrough; therefore, CyberSource does not verify the value or modify it in any way before sending it to the processor. Masterpass (101, 102, 103, 216, and 217): The Masterpass platform generates the wallet type value and passes it to you along with the customer’s checkout information.  Visa Checkout: This field is optional for Visa Checkout authorizations on FDI Australia. For all other processors, this field is required for Visa Checkout authorizations. For Visa Checkout transactions on the following processors, CyberSource sends the value that the processor expects for this field:FDC Compass,FDC Nashville Global,FDI Australia,TSYS Acquiring Solutions For all other processors, this field is a passthrough; therefore, CyberSource does not verify the value or modify it in any way before sending it to the processor. For incremental authorizations, this field is supported only for Mastercard and the supported values are 101 and 102. Payment card companies can introduce new values without notice. Your order management system should be able to process new values without problems.  CyberSource through VisaNet When the value for this field is 101, 102, 103, 216, or 217, it corresponds to the following data in the TC 33 capture file5: Record: CP01 TCR6, Position: 88-90,  Field: Mastercard Wallet Identifier. When the value for this field is VCIND, it corresponds to the following data in the TC 33 capture file5: Record: CP01 TCR8, Position: 72-76, Field: Agent Unique ID.
     */
    walletType?: string;
    /**
     * Supplementary domestic transaction information provided by the acquirer for National Net Settlement Service (NNSS) transactions. NNSS is a settlement service that Visa provides. For transactions on CyberSource through VisaNet in countries that subscribe to NNSS: VisaNet clears transactions; VisaNet transfers funds to the acquirer after deducting processing fees and interchange fees. VisaNet settles transactions in the local pricing currency through a local financial institution. This field is supported only on CyberSource through VisaNet for domestic data in Colombia
     */
    nationalNetDomesticData?: string;
    japanPaymentOptions?: Ptsv2paymentsProcessingInformationJapanPaymentOptions;
    /**
     * Type of payment initiated from a cardholder's mobile device. Possible values: - `1` :  Consumer-initiated remote purchase, face-to-face - `2` :  Consumer-initiated remote purchase, e-commerce - `3` :  Consumer-initiated remote purchase, mail order / telephone order - `4` :  Consumer-initiated bill pay - `5` :  Consumer-initiated top up - `6` :  Consumer-initiated cash out - `7` :  ATM triggered or agent-initiated cash out - `8` :  Merchant-initiated remote purchase, face-to-face - `9` :  Merchant-initiated remote purchase, e-commerce  This field is supported only for Mastercard transactions on CyberSource through VisaNet.  Optional field.  **Note** On CyberSource through VisaNet, the value for this field corresponds to the following data in the TC 33 capture file: - Record: CP01 TCR6 - Position: 94 - Field: Mastercard Mobile Remote Payment Program Indicator  The TC 33 Capture file contains information about the purchases and refunds that a merchant submits to CyberSource. CyberSource through VisaNet creates the TC 33 Capture file at the end of the day and sends it to the merchant’s acquirer, who uses this information to facilitate end-of-day clearing processing with payment networks.
     */
    mobileRemotePaymentType?: string;
    /**
     * A private national-use field submitted by acquirers and issuers in South Africa for South Africa-domestic (intra-country) authorizations and financial requests. Values for this field are 00 through 99.
     */
    extendedCreditTotalCount?: string;
    /**
     * On PIN Debit Gateways: This U.S.-only field is optionally used by  participants (merchants and acquirers) to specify the network access priority. VisaNet checks to determine if there are issuer routing preferences for any of the networks specified by the sharing group code. If an issuer preference exists for one of the specified debit networks, VisaNet makes a routing selection based on the issuer’s preference. If an issuer preference exists for more than one of the specified debit networks, or if no issuer preference exists, VisaNet makes a selection based on the acquirer’s routing priorities.  #### PIN debit Priority order of the networks through which he transaction will be routed. Set this value to a series of one-character network codes in your preferred order. This is a list of the network codes:  | Network | Code | | --- | --- | | Accel | E | | AFFN | U | | Alaska Option | 3 | | CU24 | C | | Interlink | G | | Maestro | 8 | | NETS | P | | NYCE | F | | Pulse | H | | Shazam | 7 | | Star | M | | Visa | V |  For example, if the Star network is your first preference and Pulse is your second preference, set this field to a value of `MH`.  When you do not include this value in your PIN debit request, the list of network codes from your account is used. **Note** This field is supported only for businesses located in the U.S.  Optional field for PIN debit credit or PIN debit purchase.
     */
    networkRoutingOrder?: string;
  }
  export interface Ptsv2paymentsProcessingInformationAuthorizationOptions {
    /**
     * Authorization type. Possible values:   - `AUTOCAPTURE`: automatic capture.  - `STANDARDCAPTURE`: standard capture.  - `VERBAL`: forced capture. Include it in the payment request for a forced capture. Include it in the capture request for a verbal payment.  #### Asia, Middle East, and Africa Gateway; Cielo; Comercio Latino; and CyberSource Latin American Processing Set this field to `AUTOCAPTURE` and include it in a bundled request to indicate that you are requesting an automatic capture. If your account is configured to enable automatic captures, set this field to `STANDARDCAPTURE` and include it in a standard authorization or bundled request to indicate that you are overriding an automatic capture. For more information, see the `auth_type` field description in [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  #### Forced Capture Set this field to `VERBAL` and include it in the authorization request to indicate that you are performing a forced capture; therefore, you receive the authorization code outside the CyberSource system.  #### Verbal Authorization Set this field to `VERBAL` and include it in the capture request to indicate that the request is for a verbal authorization. For more information, see \"Verbal Authorizations\" in [Credit Card Services Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html).
     */
    authType?: string;
    /**
     * Authorization code.  #### Forced Capture Use this field to send the authorization code you received from a payment that you authorized outside the CyberSource system.  #### PIN debit Authorization code that is returned by the processor.  Returned by PIN debit purchase.  #### Verbal Authorization Use this field in CAPTURE API to send the verbally received authorization code.  For processor-specific information, see the `auth_code` field description in [Credit Card Services Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html).
     */
    verbalAuthCode?: string;
    /**
     * Transaction ID (TID).  #### FDMS South This field is required for verbal authorizations and forced captures with the American Express card type to comply with the CAPN requirements: - Forced capture: Obtain the value for this field from the authorization response. - Verbal authorization: You cannot obtain a value for this field so CyberSource uses the default value of `000000000000000` (15 zeros).
     */
    verbalAuthTransactionId?: string;
    /**
     * Flag that specifies the purpose of the authorization.  Possible values:  - **0**: Preauthorization  - **1**: Final authorization  To set the default for this field, contact CyberSource Customer Support.  #### Barclays and Elavon The default for Barclays and Elavon is 1 (final authorization). To change the default for this field, contact CyberSource Customer Support.  #### CyberSource through VisaNet When the value for this field is 0, it corresponds to the following data in the TC 33 capture file:  - Record: CP01 TCR0  - Position: 164  - Field: Additional Authorization Indicators When the value for this field is 1, it does not correspond to any data in the TC 33 capture file.
     */
    authIndicator?: string;
    /**
     * Flag that indicates whether the transaction is enabled for partial authorization. When the request includes this field, this value overrides the information in your account. Possible values: - `true`: Enable the transaction for partial authorization. - `false`: Do not enable the transaction for partial authorization.  #### PIN debit Required field for partial authorizations that use PIN debit purchase; otherwise, not used.  #### Used by **Authorization** Optional field.  #### CyberSource through VisaNet To set the default for this field, contact CyberSource Customer Support. The value for this field corresponds to the following data in the TC 33 capture file5: - Record: CP01 TCR0 - Position: 164 - Field: Additional Authorization Indicators
     */
    partialAuthIndicator?: boolean;
    /**
     * Flag that indicates whether to return balance information.  Possible values: - `true`: Return balance information. - `false`: Do not return balance information.  #### Used by **Authorization** Required for a balance inquiry; otherwise, not used.  #### PIN debit Required for a balance inquiry request of a PIN debit purchase; otherwise, not used.
     */
    balanceInquiry?: boolean;
    /**
     * Flag for a sale request that indicates whether to allow the capture service to run even when the authorization receives an AVS decline, as indicated by a reply flag value of DAVSNO.  Possible values: - `true`: Ignore the results of AVS checking and run the capture service. - `false` (default): If the authorization receives an AVS decline, do not run the capture service. When the value of this field is `true`, the list in the `processingInformation.authorizationOptions.declineAvsFlags` field is ignored.  #### Used by **Authorization** Optional field. String (3)
     */
    ignoreAvsResult?: boolean;
    /**
     * Comma-separated list of AVS flags that cause the reply flag `DAVSNO` to be returned.  **Important** To receive declines for the AVS code `N`, you must include the value `N` in the comma-separated list.    ### AVS Codes for Cielo 3.0 and CyberSource Latin American Processing    **Note** CyberSource Latin American Processing is the name of a specific processing connection that CyberSource supports.   In the CyberSource API documentation, CyberSource Latin American Processing does not refer to the general topic of processing in Latin America.   The information in this section is for the specific processing connection called CyberSource Latin American Processing.   It is not for any other Latin American processors that CyberSource supports.  |AVS Code|Description| |--- |--- | |D|Partial match: postal code and address match.| |E|Not supported: AVS is not supported for this card type. _or_ Invalid: the acquirer returned an unrecognized value for the AVS response.| |F|Partial match: postal code matches, but CPF and address do not match.*| |G|Not supported: AVS not supported or not verified.| |I|No match: AVS information is not available.| |K|Partial match: CPF matches, but postal code and address do not match.*| |L|Partial match: postal code and CPF match, but address does not match.*| |N|No match: postal code, CPF, and address do not match.*| |O|Partial match: CPF and address match, but postal code does not match.*| |R|Not supported: your implementation does not support AVS _or_ System unavailable.| |T|Partial match: address matches, but postal code and CPF do not match.*| |V|Match: postal code, CPF, and address match.*| |* CPF (Cadastro de Pessoas Fisicas) is required only for Redecard in Brazil.||  ### AVS Codes for All Other Processors  **Note** The list of AVS codes for all other processors follows these descriptions of the processor-specific information for these codes.  #### American Express Cards For American Express cards only, you can receive Visa and CyberSource AVS codes in addition to the American Express AVS codes.  **Note** For CyberSource through VisaNet, the American Express AVS codes are converted to Visa AVS codes before they are returned to you. As a result, you will not receive American Express AVS codes for the American Express card type.<br/><br/>  _American Express Card codes_: `F`, `H`, `K`, `L`, `O`, `T`, `V`  #### Domestic and International Visa Cards The international and domestic alphabetic AVS codes are the Visa standard AVS codes. CyberSource maps the standard AVS return codes for other types of payment cards, including American Express cards, to the Visa standard AVS codes.  AVS is considered either domestic or international, depending on the location of the bank that issued the customer's payment card: - When the bank is in the U.S., the AVS is domestic. - When the bank is outside the U.S., the AVS is international.  You should be prepared to handle both domestic and international AVS result codes: - For international cards, you can receive domestic AVS codes in addition to the international AVS codes. - For domestic cards, you can receive international AVS codes in addition to the domestic AVS codes.  _International Visa Codes_: `B`, `C`, `D`, `G`, `I`, `M`, `P`  _Domestic Visa Codes_: `A`, `E`,`N`, `R`, `S`, `U`, `W`, `X`, `Y`, `Z`  #### CyberSource Codes The numeric AVS codes are created by CyberSource and are not standard Visa codes. These AVS codes can be returned for any card type.  _CyberSource Codes_: `1`, `2`, `3`, `4`  ### Table of AVS Codes for All Other Processors  |AVS Code|Description| |--- |--- | |A|Partial match: street address matches, but 5-digit and 9-digit postal codes do not match.| |B|Partial match: street address matches, but postal code is not verified. Returned only for Visa cards not issued in the U.S.| |C|No match: street address and postal code do not match. Returned only for Visa cards not issued in the U.S.| |D & M|Match: street address and postal code match. Returned only for Visa cards not issued in the U.S.| |E|Invalid: AVS data is invalid or AVS is not allowed for this card type.| |F|Partial match: card member’s name does not match, but billing postal code matches.| |G|Not supported: issuing bank outside the U.S. does not support AVS.| |H|Partial match: card member’s name does not match, but street address and postal code match. Returned only for the American Express card type.| |I|No match: address not verified. Returned only for Visa cards not issued in the U.S.| |K|Partial match: card member’s name matches, but billing address and billing postal code do not match. Returned only for the American Express card type.| |L|Partial match: card member’s name and billing postal code match, but billing address does not match. Returned only for the American Express card type.| |M|See the entry for D & M.| |N|No match: one of the following: street address and postal code do not match _or_ (American Express card type only) card member’s name, street address, and postal code do not match.| |O|Partial match: card member’s name and billing address match, but billing postal code does not match. Returned only for the American Express card type.| |P|Partial match: postal code matches, but street address not verified. Returned only for Visa cards not issued in the U.S.| |R|System unavailable.| |S|Not supported: issuing bank in the U.S. does not support AVS.| |T|Partial match: card member’s name does not match, but street address matches. Returned only for the American Express card type.| |U|System unavailable: address information unavailable for one of these reasons: The U.S. bank does not support AVS outside the U.S. _or_ The AVS in a U.S. bank is not functioning properly.| |V|Match: card member’s name, billing address, and billing postal code match. Returned only for the American Express card type.| |W|Partial match: street address does not match, but 9-digit postal code matches.| |X|Match: street address and 9-digit postal code match.| |Y|Match: street address and 5-digit postal code match.| |Z|Partial match: street address does not match, but 5-digit postal code matches.| |1|Not supported: one of the following: AVS is not supported for this processor or card type _or_ AVS is disabled for your CyberSource account. To enable AVS, contact CyberSource Customer Support.| |2|Unrecognized: the processor returned an unrecognized value for the AVS response.| |3|Match: address is confirmed. Returned only for PayPal Express Checkout.| |4|No match: address is not confirmed. Returned only for PayPal Express Checkout.| |5|No match: no AVS code was returned by the processor.|
     */
    declineAvsFlags?: Array<string>;
    /**
     * Flag for a sale request that indicates whether to allow the capture service to run even when the authorization receives a CVN decline, as indicated by an `processorInformation.cardVerification.resultCode` value of `D` or `N`. Possible values: - `true`: Ignore the results of CVN checking and run the capture service. - `false` (default): If the authorization receives a CVN decline, do not run the capture service.  #### Used by **Authorization** Optional field.
     */
    ignoreCvResult?: boolean;
    initiator?: Ptsv2paymentsProcessingInformationAuthorizationOptionsInitiator;
    /**
     * Indicates payment for bill or payment towards existing contractual loan.  Possible values: - `true`: Bill payment or loan payment. - `false` (default): Not a bill payment or loan payment.  Optional request field.
     */
    billPayment?: boolean;
    /**
     * Reason for the payment.  Possible values: - 001: Utility payment - 002: Government services - 003: Mobile phone top-up - 004: Coupon payment  The value for this field corresponds to the following data in the TC 33 capture file5: - Record: CP07 TCR0 - Position: 48-50 - Field: Bill Payment Transaction Type Identifier  This field is supported only for bill payments in Brazil with Mastercard on CyberSource through VisaNet.
     */
    billPaymentType?: string;
    /**
     * Flag that indicates the payment request is a redemption inquiry.  Possible values:   - `true`   - `false`
     */
    redemptionInquiry?: boolean;
    /**
     * Type of transportation mode :  Possible Values: - 00 = Unknown - 01 = Urban bus - 02 = Interurban bus - 03=Lighttrainmasstransit(Underground Metro LTR) - 04 = Train - 05 = Commuter train - 06 = Water-borne vehicle - 07 = Toll - 08 = Parking - 09 = Taxi - 10 = High-speed train - 11 = Rural bus - 12 = Express commuter train - 13 = Para transit - 14 = Self drive vehicle - 15 = Coach - 16 = Locomotive - 17 = Powered motor coach - 18 = Trailer - 19 = Regional train - 20 = Inter-city - 21 = Funicular train - 22 = Cable car
     */
    transitTransactionType?: string;
    /**
     * Indicates if transaction is an aggregated auth  Possible values: - **true** - **false**
     */
    aggregatedAuthIndicator?: string;
    /**
     * Indicates if transaction is a debt recovery request  Possible values: - **true** - **false**
     */
    debtRecoveryIndicator?: string;
    /**
     * Flag that indicates whether the authorization request was delayed because connectivity was interrupted.  Possible values:   - `true` (Deferred authorization)   - `false` (default: Not a deferred authorization)
     */
    deferredAuthIndicator?: boolean;
  }
  export interface Ptsv2paymentsProcessingInformationAuthorizationOptionsInitiator {
    /**
     * This field indicates whether the transaction is a merchant-initiated transaction or customer-initiated transaction.  Valid values: - **customer** - **merchant**
     */
    type?: string;
    /**
     * Indicates to the issuing bank two things: - The merchant has received consent from the cardholder to store their card details on file - The merchant wants the issuing bank to check out the card details before the merchant initiates their first transaction for this cardholder. The purpose of the merchant-initiated transaction is to ensure that the cardholder’s credentials are valid (that the card is not stolen or has restrictions) and that the card details are good to be stored on the merchant’s file for future transactions.  Valid values: - `true` means merchant will use this transaction to store payment credentials for follow-up merchant-initiated transactions. - `false` means merchant will not use this transaction to store payment credentials for follow-up merchant-initiated transactions.  For details, see `subsequent_auth_first` field description in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  **NOTE:** The value for this field does not correspond to any data in the TC 33 capture file5.  This field is supported only for Visa transactions on CyberSource through VisaNet.
     */
    credentialStoredOnFile?: boolean;
    /**
     * Indicates to an issuing bank whether a merchant-initiated transaction came from a card that was already stored on file.  Possible values: - **true** means the merchant-initiated transaction came from a card that was already stored on file. - **false**  means the merchant-initiated transaction came from a card that was not stored on file.
     */
    storedCredentialUsed?: boolean;
    merchantInitiatedTransaction?: Ptsv2paymentsProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction;
  }
  export interface Ptsv2paymentsProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction {
    /**
     * Reason for the merchant-initiated transaction or incremental authorization. Possible values: - `1`: Resubmission - `2`: Delayed charge - `3`: Reauthorization for split shipment - `4`: No show - `5`: Account top up This field is required only for the five kinds of transactions in the preceding list. This field is supported only for merchant-initiated transactions and incremental authorizations.  #### CyberSource through VisaNet The value for this field corresponds to the following data in the TC 33 capture file5: - Record: CP01 TCR0 - Position: 160-163 - Field: Message Reason Code  #### All Processors For details, see `subsequent_auth_reason` field description in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
     */
    reason?: string;
    /**
     * Network transaction identifier that was returned in the payment response field _processorInformation.transactionID_ in the reply message for either the original merchant-initiated payment in the series or the previous merchant-initiated payment in the series.  If the current payment request includes a token instead of an account number, the following time limits apply for the value of this field: - For a **resubmission**, the transaction ID must be less than 14 days old. - For a **delayed charge** or **reauthorization**, the transaction ID must be less than 30 days old.  **NOTE**: The value for this field does not correspond to any data in the TC 33 capture file5. This field is supported only for Visa transactions on CyberSource through VisaNet.
     */
    previousTransactionId?: string;
    /**
     * Amount of the original authorization.  This field is supported only for Apple Pay, Google Pay, and Samsung Pay transactions with Discover on FDC Nashville Global and Chase Paymentech.  See \"Recurring Payments,\" and \"Subsequent Authorizations,\" field description in the [Payment Network Tokenization Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/tokenization_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm)
     */
    originalAuthorizedAmount?: string;
  }
  export interface Ptsv2paymentsProcessingInformationBankTransferOptions {
    /**
     * Space-separated list of AVS flags that cause the request to be declined for AVS reasons.  **Important** To receive declines for the AVS code `N`, you must include the value `N` in the space-separated list.  ### AVS Codes for Cielo 3.0 and CyberSource Latin American Processing  **Note** CyberSource Latin American Processing is the name of a specific processing connection that CyberSource supports. In the CyberSource API documentation, CyberSource Latin American Processing does not refer to the general topic of processing in Latin America. The information in this section is for the specific processing connection called CyberSource Latin American Processing. It is not for any other Latin American processors that CyberSource supports.  |AVS Code|Description| |--- |--- | |D|Partial match: postal code and address match.| |E|Not supported: AVS is not supported for this card type. _or_ Invalid: the acquirer returned an unrecognized value for the AVS response.| |F|Partial match: postal code matches, but CPF and address do not match.*| |G|Not supported: AVS not supported or not verified.| |I|No match: AVS information is not available.| |K|Partial match: CPF matches, but postal code and address do not match.*| |L|Partial match: postal code and CPF match, but address does not match.*| |N|No match: postal code, CPF, and address do not match.*| |O|Partial match: CPF and address match, but postal code does not match.*| |R|Not supported: your implementation does not support AVS _or_ System unavailable.| |T|Partial match: address matches, but postal code and CPF do not match.*| |V|Match: postal code, CPF, and address match.*| |* CPF (Cadastro de Pessoas Fisicas) is required only for Redecard in Brazil.||  ### AVS Codes for All Other Processors  **Note** The list of AVS codes for all other processors follows these descriptions of the processor-specific information for these codes.  #### American Express Cards For American Express cards only, you can receive Visa and CyberSource AVS codes in addition to the American Express AVS codes.  **Note** For CyberSource through VisaNet, the American Express AVS codes are converted to Visa AVS codes before they are returned to you. As a result, you will not receive American Express AVS codes for the American Express card type.  _American Express Card codes_: `F`, `H`, `K`, `L`, `O`, `T`, `V`  #### Domestic and International Visa Cards The international and domestic alphabetic AVS codes are the Visa standard AVS codes. CyberSource maps the standard AVS return codes for other types of payment cards, including American Express cards, to the Visa standard AVS codes.  AVS is considered either domestic or international, depending on the location of the bank that issued the customer’s payment card: - When the bank is in the U.S., the AVS is domestic. - When the bank is outside the U.S., the AVS is international.  You should be prepared to handle both domestic and international AVS result codes: - For international cards, you can receive domestic AVS codes in addition to the international AVS codes. - For domestic cards, you can receive international AVS codes in addition to the domestic AVS codes.  _International Visa Codes_: `B`, `C`, `D`, `G`, `I`, `M`, `P`  _Domestic Visa Codes_: `A`, `E`,`N`, `R`, `S`, `U`, `W`, `X`, `Y`, `Z`  #### CyberSource Codes The numeric AVS codes are created by CyberSource and are not standard Visa codes. These AVS codes can be returned for any card type.  _CyberSource Codes_: `1`, `2`, `3`, `4`  ### Table of AVS Codes for All Other Processors  |AVS Code|Description| |--- |--- | |A|Partial match: street address matches, but 5-digit and 9-digit postal codes do not match.| |B|Partial match: street address matches, but postal code is not verified. Returned only for Visa cards not issued in the U.S.| |C|No match: street address and postal code do not match. Returned only for Visa cards not issued in the U.S.| |D & M|Match: street address and postal code match. Returned only for Visa cards not issued in the U.S.| |E|Invalid: AVS data is invalid or AVS is not allowed for this card type.| |F|Partial match: card member’s name does not match, but billing postal code matches.| |G|Not supported: issuing bank outside the U.S. does not support AVS.| |H|Partial match: card member’s name does not match, but street address and postal code match. Returned only for the American Express card type.| |I|No match: address not verified. Returned only for Visa cards not issued in the U.S.| |K|Partial match: card member’s name matches, but billing address and billing postal code do not match. Returned only for the American Express card type.| |L|Partial match: card member’s name and billing postal code match, but billing address does not match. Returned only for the American Express card type.| |M|See the entry for D & M.| |N|No match: one of the following: street address and postal code do not match _or_ (American Express card type only) card member’s name, street address, and postal code do not match.| |O|Partial match: card member’s name and billing address match, but billing postal code does not match. Returned only for the American Express card type.| |P|Partial match: postal code matches, but street address not verified. Returned only for Visa cards not issued in the U.S.| |R|System unavailable.| |S|Not supported: issuing bank in the U.S. does not support AVS.| |T|Partial match: card member’s name does not match, but street address matches. Returned only for the American Express card type.| |U|System unavailable: address information unavailable for one of these reasons: The U.S. bank does not support AVS outside the U.S. _or_ The AVS in a U.S. bank is not functioning properly.| |V|Match: card member’s name, billing address, and billing postal code match. Returned only for the American Express card type.| |W|Partial match: street address does not match, but 9-digit postal code matches.| |X|Match: street address and 9-digit postal code match.| |Y|Match: street address and 5-digit postal code match.| |Z|Partial match: street address does not match, but 5-digit postal code matches.| |1|Not supported: one of the following: AVS is not supported for this processor or card type _or_ AVS is disabled for your CyberSource account. To enable AVS, contact CyberSource Customer Support.| |2|Unrecognized: the processor returned an unrecognized value for the AVS response.| |3|Match: address is confirmed. Returned only for PayPal Express Checkout.| |4|No match: address is not confirmed. Returned only for PayPal Express Checkout.| |5|No match: no AVS code was returned by the processor.|
     */
    declineAvsFlags?: string;
    /**
     * Specifies the authorization method for the transaction.  #### TeleCheck Accepts only the following values: - `ARC`: account receivable conversion - `CCD`: corporate cash disbursement - `POP`: point of purchase conversion - `PPD`: prearranged payment and deposit entry - `TEL`: telephone-initiated entry - `WEB`: internet-initiated entry  For details, see `ecp_sec_code` field description in the [Electronic Check Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/EChecks_SCMP_API/html/)
     */
    secCode?: string;
    /**
     * City in which the terminal is located. If more than four alphanumeric characters are submitted, the transaction will be declined.  You cannot include any special characters.
     */
    terminalCity?: string;
    /**
     * State in which the terminal is located. If more than two alphanumeric characters are submitted, the transaction will be declined.  You cannot include any special characters.
     */
    terminalState?: string;
    /**
     * Effective date for the transaction. The effective date must be within 45 days of the current day. If you do not include this value, CyberSource sets the effective date to the next business day.  Format: `MMDDYYYY`  Supported only for the CyberSource ACH Service.
     */
    effectiveDate?: string;
    /**
     * Identifier for a partial payment or partial credit.  The value for each debit request or credit request must be unique within the scope of the order. For details, see `partial_payment_id` field description in the [Electronic Check Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/EChecks_SCMP_API/html/)
     */
    partialPaymentId?: string;
    /**
     * Payment related information.  This information is included on the customer’s statement.
     */
    customerMemo?: string;
    /**
     * Flag that indicates whether to process the payment.  Use with deferred payments. For details, see `ecp_payment_mode` field description in the [Electronic Check Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/EChecks_SCMP_API/html/)  Possible values: - `0`: Standard debit with immediate payment (default). - `1`: For deferred payments, indicates that this is a deferred payment and that you will send a debit request with `paymentCategoryCode = 2` in the future. - `2`: For deferred payments, indicates notification to initiate payment.  #### Chase Paymentech Solutions and TeleCheck Use for deferred and partial payments.  #### CyberSource ACH Service Not used.  #### RBS WorldPay Atlanta Not used.
     */
    paymentCategoryCode?: string;
    /**
     * Method used for settlement.  Possible values: - `A`: Automated Clearing House (default for credits and for transactions using Canadian dollars) - `F`: Facsimile draft (U.S. dollars only) - `B`: Best possible (U.S. dollars only) (default if the field has not already been configured for your merchant ID)  For details, see `ecp_settlement_method` field description for credit cars and `ecp_debit_settlement_method` for debit cards in the [Electronic Check Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/EChecks_SCMP_API/html/)
     */
    settlementMethod?: string;
    /**
     * Level of fraud screening.  Possible values: - `1`: Validation — default if the field has not already been configured for your merchant ID - `2`: Verification  For a description of this feature and a list of supported processors, see \"Verification and Validation\" in the [Electronic Check Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/EChecks_SCMP_API/html/).
     */
    fraudScreeningLevel?: number | string;
    /**
     * Indicates whether a customer is physically present and whether the customer is enrolling in CyberSource Recurring Billing.  Possible values: - `1`: Customer is present and not enrolling. - `2`: Customer is not present and not enrolling. - `3`: Customer is present and enrolling. - `4`: Customer is not present and enrolling.
     */
    customerPresent?: string;
  }
  export interface Ptsv2paymentsProcessingInformationCaptureOptions {
    /**
     * Capture number when requesting multiple partial captures for one authorization. Used along with `totalCaptureCount` to track which capture is being processed.  For example, the second of five captures would be passed to CyberSource as:   - `captureSequenceNumber_ = 2`, and   - `totalCaptureCount = 5`
     */
    captureSequenceNumber?: number;
    /**
     * Total number of captures when requesting multiple partial captures for one payment. Used along with `captureSequenceNumber` field to track which capture is being processed.  For example, the second of five captures would be passed to CyberSource as:   - `captureSequenceNumber = 2`, and   - `totalCaptureCount = 5`
     */
    totalCaptureCount?: number;
    /**
     * Date on which you want the capture to occur. This field is supported only for CyberSource through VisaNet. Format: `MMDD`  #### Used by **Authorization** Optional field.
     */
    dateToCapture?: string;
  }
  export interface Ptsv2paymentsProcessingInformationElectronicBenefitsTransfer {
    /**
     * Flag that specifies the category for the EBT transaction.  Possible values: - `CASH`: Cash benefits, which can be used to purchase any item at a participating retailer, as well as to obtain cash-back or make a cash withdrawal from a participating ATM. - `FOOD`: Food stamp benefits, which can be used only to purchase food items authorized by the USDA SNAP program.  #### PIN debit Required field for EBT transactions that use PIN debit credit or PIN debit purchase; otherwise, not used.
     */
    category?: string;
    /**
     * The serial number printed on the EBT voucher.  #### PIN debit Required field for EBT voucher transactions that use PIN debit purchase; otherwise, not used.
     */
    voucherSerialNumber?: string;
  }
  export interface Ptsv2paymentsProcessingInformationJapanPaymentOptions {
    /**
     * This value is a 2-digit code indicating the payment method. Use Payment Method Code value that applies to the tranasction. - 10 (One-time payment) - 21, 22, 23, 24  (Bonus(one-time)payment) - 61 (Installment payment) - 31, 32, 33, 34  (Integrated (Bonus + Installment)payment) - 80 (Revolving payment)
     */
    paymentMethod?: string;
    /**
     * Number of Installments.
     */
    installments?: string;
    /**
     * Unique Japan Credit Card Association (JCCA) terminal identifier.  The difference between this field and the `pointOfSaleInformation.terminalID` field is that you can define `pointOfSaleInformation.terminalID`, but `processingInformation.japanPaymentOptions.terminalId` is defined by the JCCA and is used only in Japan.  This field is supported only on CyberSource through VisaNet and JCN Gateway.  Optional field.
     */
    terminalId?: string;
    /**
     * Billing month in MM format.
     */
    firstBillingMonth?: string;
    /**
     * Business name in Japanese characters. This field is supported only on JCN Gateway and for the Sumitomo Mitsui Card Co. acquirer on CyberSource through VisaNet.
     */
    businessName?: string;
    /**
     * Business name in Katakana characters. This field is supported only on JCN Gateway and for the Sumitomo Mitsui Card Co. acquirer on CyberSource through VisaNet.
     */
    businessNameKatakana?: string;
    /**
     * Japanese Industrial Standard Type 2 (JIS2) track data from the front of the card.  This field is supported only on CyberSource through VisaNet and JCN Gateway.  Optional field.
     */
    jis2TrackData?: string;
    /**
     * Business name in alphanumeric characters. This field is supported only on JCN Gateway and for the Sumitomo Mitsui Card Co. acquirer on CyberSource through VisaNet.
     */
    businessNameAlphaNumeric?: string;
  }
  export interface Ptsv2paymentsProcessingInformationLoanOptions {
    /**
     * Type of loan based on an agreement between you and the issuer. Examples: AGROCUSTEIO, AGRO-INVEST, BNDES-Type1, CBN, FINAME. This field is supported only for these kinds of payments: - BNDES transactions on CyberSource through VisaNet. - Installment payments with Mastercard on CyberSource through VisaNet in Brazil.  See \"\"Installment Payments on CyberSource through VisaNet,\"\" in the SCMP/SO guide  For BNDES transactions, the value for this field corresponds to the following data in the TC 33 capture file: - Record: CP07 TCR2, Position: 27-46, Field: Loan Type  For installment payments with Mastercard in Brazil, the value for this field corresponds to the following data in the TC 33 capture file: - Record: CP07 TCR4, Position: 5-24,Field: Financing Type
     */
    type?: string;
    /**
     * Indicates whether a loan is for a recoverable item or a non-recoverable item. Possible values: - `N`: non-recoverable item - `R`: recoverable item This field is supported only for BNDES transactions on CyberSource through VisaNet. The value for this field corresponds to the following data in the TC 33 capture file5:  Record: CP07 TCR2, Position: 26, Field: Asset Indicator
     */
    assetType?: string;
  }
  export interface Ptsv2paymentsProcessingInformationPurchaseOptions {
    /**
     * Flag that indicates whether this transaction is an EBT transaction. Possible values: - `true` - `false`  #### PIN debit Required field for EBT and EBT voucher transactions that use PIN debit credit or PIN debit purchase; otherwise, not used.
     */
    isElectronicBenefitsTransfer?: boolean;
    /**
     * Flag that indicates an EBT voucher transaction. Possible value: - `EBT_VOUCHER`: Indicates the PIN debit transaction is an EBT voucher.  #### PIN debit Required field for EBT voucher transactions that use PIN debit purchase; otherwise, not used.
     */
    type?: string;
  }
  export interface Ptsv2paymentsProcessingInformationRecurringOptions {
    /**
     * Flag that indicates whether this is a payment towards an existing contractual loan.  Possible values: - `true`: Loan payment - `false`: (default) Not a loan payment  For processor-specific details, see `debt_indicator` field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
     */
    loanPayment?: boolean;
    /**
     * Flag that indicates whether this transaction is the first in a series of recurring payments.  This field is supported only for **Atos**, **FDC Nashville Global**, and **OmniPay Direct**.  Possible values:  - `true` Indicates this is the first payment in a series of recurring payments  - `false` (default) Indicates this is not the first payment in a series of recurring payments.  For details, see `auth_first_recurring_payment` field description and \"Recurring Payments\" in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
     */
    firstRecurringPayment?: boolean;
  }
  export interface Ptsv2paymentsPromotionInformation {
    /**
     * Additional rental agency marketed coupons for consumers to discount the rate of the vehicle rental agreement.
     */
    additionalCode?: string;
    /**
     * Code for a promotion or discount.
     */
    code?: string;
  }
  export interface Ptsv2paymentsRecipientInformation {
    /**
     * Identifier for the recipient’s account. Use the first six digits and last four digits of the recipient’s account number. This field is a _pass-through_, which means that CyberSource does not verify the value or modify it in any way before sending it to the processor. If the field is not required for the transaction, CyberSource does not forward it to the processor.  For details, see the `recipient_account_id` field description in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
     */
    accountId?: string;
    /**
     * Recipient’s last name. This field is a _passthrough_, which means that CyberSource does not verify the value or modify it in any way before sending it to the processor. If the field is not required for the transaction, CyberSource does not forward it to the processor.  For details, see the `recipient_lastname` field description in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
     */
    lastName?: string;
    /**
     * Partial postal code for the recipient’s address. For example, if the postal code is **NN5 7SG**, the value for this field should be the first part of the postal code: **NN5**. This field is a _pass-through_, which means that CyberSource does not verify the value or modify it in any way before sending it to the processor. If the field is not required for the transaction, CyberSource does not forward it to the processor.  For details, see the `recipient_postal_code` field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
     */
    postalCode?: string;
  }
  /**
   * This object contains recurring payment information.
   */
  export interface Ptsv2paymentsRecurringPaymentInformation {
    /**
     * The date after which no further recurring authorizations should be performed. Format: `YYYY-MM-DD` **Note** This field is required for recurring transactions.
     */
    endDate?: string;
    /**
     * Integer value indicating the minimum number of days between recurring authorizations. A frequency of monthly is indicated by the value 28. Multiple of 28 days will be used to indicate months.  Example: 6 months = 168  Example values accepted (31 days): - 31 - 031 - 0031  **Note** This field is required for recurring transactions.
     */
    frequency?: number;
    /**
     * Date of original purchase. Required for recurring transactions. Format: `YYYY-MM-DDTHH:MM:SSZ` **Note**: If this field is empty, the current date is used.
     */
    originalPurchaseDate?: string;
  }
  /**
   * This object is only needed when you are requesting both payment and DM services at same time.
   */
  export interface Ptsv2paymentsRiskInformation {
    profile?: Ptsv2paymentsRiskInformationProfile;
    /**
     * Specifies one of the following types of events: - login - account_creation - account_update For regular payment transactions, do not send this field.
     */
    eventType?: string;
    buyerHistory?: Ptsv2paymentsRiskInformationBuyerHistory;
  }
  export interface Ptsv2paymentsRiskInformationBuyerHistory {
    customerAccount?: Ptsv2paymentsRiskInformationBuyerHistoryCustomerAccount;
    accountHistory?: Ptsv2paymentsRiskInformationBuyerHistoryAccountHistory;
    /**
     * Number of purchases with this cardholder account during the previous six months. Recommended for Discover ProtectBuy.
     */
    accountPurchases?: number;
    /**
     * Number of add card attempts in the last 24 hours. Recommended for Discover ProtectBuy.
     */
    addCardAttempts?: number;
    /**
     * Indicates whether the merchant experienced suspicious activity (including previous fraud) on the account. Recommended for Discover ProtectBuy.
     */
    priorSuspiciousActivity?: boolean;
    /**
     * This only applies for NEW_ACCOUNT and EXISTING_ACCOUNT in creationHistory. Possible values are: - PAYMENT_ACCOUNT_EXISTS - PAYMENT_ACCOUNT_ADDED_NOW
     */
    paymentAccountHistory?: string;
    /**
     * Date applicable only for PAYMENT_ACCOUNT_EXISTS in paymentAccountHistory
     */
    paymentAccountDate?: number;
    /**
     * Number of transaction (successful or abandoned) for this cardholder account within the last 24 hours. Recommended for Discover ProtectBuy.
     */
    transactionCountDay?: number;
    /**
     * Number of transaction (successful or abandoned) for this cardholder account within the last year. Recommended for Discover ProtectBuy.
     */
    transactionCountYear?: number;
  }
  export interface Ptsv2paymentsRiskInformationBuyerHistoryAccountHistory {
    /**
     * Applicable when this is not a guest account.
     */
    firstUseOfShippingAddress?: boolean;
    /**
     * Date when the shipping address for this transaction was first used. Recommended for Discover ProtectBuy. If `firstUseOfShippingAddress` is false and not a guest account, then this date is entered.
     */
    shippingAddressUsageDate?: string;
  }
  export interface Ptsv2paymentsRiskInformationBuyerHistoryCustomerAccount {
    /**
     * Date the cardholder’s account was last changed. This includes changes to the billing or shipping address, new payment accounts or new users added. Recommended for Discover ProtectBuy.
     */
    lastChangeDate?: string;
    /**
     * The values from the enum can be: - GUEST - NEW_ACCOUNT - EXISTING_ACCOUNT
     */
    creationHistory?: string;
    /**
     * This field is applicable only in case of EXISTING_ACCOUNT in creationHistory. Possible values: - ACCOUNT_UPDATED_NOW - ACCOUNT_UPDATED_PAST
     */
    modificationHistory?: string;
    /**
     * This only applies for EXISTING_ACCOUNT in creationHistory. The values from the enum can be: - PASSWORD_CHANGED_NOW - PASSWORD_CHANGED_PAST - PASSWORD_NEVER_CHANGED
     */
    passwordHistory?: string;
    /**
     * Date the cardholder opened the account. Recommended for Discover ProtectBuy. This only applies for EXISTING_ACCOUNT in creationHistory.
     */
    createDate?: string;
    /**
     * Date the cardholder last changed or reset password on account. Recommended for Discover ProtectBuy. This only applies for PASSWORD_CHANGED_PAST in passwordHistory.
     */
    passwordChangeDate?: string;
  }
  /**
   * Identifies a risk profile.
   */
  export interface Ptsv2paymentsRiskInformationProfile {
    /**
     * Name of the active profile chosen by the profile selector. If no profile selector exists, the default active profile is chosen.  **Note** By default, your default profile is the active profile, or the Profile Selector chooses the active profile. Use this field only if you want to specify the name of a different profile. The passed-in profile will then become the active profile.
     */
    name?: string;
  }
  export interface Ptsv2paymentsTokenInformation {
    /**
     * TMS Transient Token, 64 hexadecimal id value representing captured payment credentials (including Sensitive Authentication Data, e.g. CVV).
     */
    jti?: string;
    /**
     * Flex API Transient Token encoded as JWT (JSON Web Token), e.g. Flex microform or Unified Payment checkout result.
     */
    transientTokenJwt?: string;
    paymentInstrument?: Ptsv2paymentsTokenInformationPaymentInstrument;
    shippingAddress?: Ptsv2paymentsTokenInformationShippingAddress;
  }
  export interface Ptsv2paymentsTokenInformationPaymentInstrument {
    /**
     * Flag that specifies if the Payment Instrument should be made the Customers default. Possible values: - true - false : (default)
     */
    _default?: boolean;
  }
  export interface Ptsv2paymentsTokenInformationShippingAddress {
    /**
     * Flag that specifies if the Shipping Address should be made the Customers default. Possible values: - true - false : (default)
     */
    _default?: boolean;
  }
  export interface Ptsv2paymentsTravelInformation {
    /**
     * Duration of the auto rental or lodging rental.  #### Auto rental This field is supported for Visa, MasterCard, and American Express. **Important** If this field is not included when the `processingInformation.industryDataType` is auto rental, the transaction is declined.
     */
    duration?: string;
    agency?: Ptsv2paymentsTravelInformationAgency;
    autoRental?: Ptsv2paymentsTravelInformationAutoRental;
    lodging?: Ptsv2paymentsTravelInformationLodging;
    transit?: Ptsv2paymentsTravelInformationTransit;
  }
  export interface Ptsv2paymentsTravelInformationAgency {
    /**
     * International Air Transport Association (IATA) code of travel agency that made the vehicle rental reservation.
     */
    code?: string;
    /**
     * Name of travel agency that made the reservation.
     */
    name?: string;
  }
  export interface Ptsv2paymentsTravelInformationAutoRental {
    /**
     * No Show Indicator provides an indicator noting that the individual did not show up after making a reservation for a vehicle. Possible values: - true - false
     */
    noShowIndicator?: boolean;
    /**
     * Name of the individual making the rental agreement.  Valid data lengths by card:  |Card Specific Validation|VISA|MasterCard|Discover|AMEX| |--- |--- |--- |--- | | Filed Length| 40| 40| 29| 26| | Field Type| AN| ANS| AN| AN| | M/O/C| O| M| M| M|
     */
    customerName?: string;
    /**
     * Classification of the rented auto.  **NOTE** For VISA, this is a 2-byte optional code.  Valid values for American Express & MasterCard:  |American Express |MasterCard |Description| |--- |--- |--- | | 0001| 0001| Mini| | 0002| 0002| Subcompact| | 0003| 0003| Economy| | 0004| 0004| Compact| | 0005| 0005| Midsize| | 0006| 0006| Intermediate| | 0007| 0007| Standard| | 0008| 0008| Fulll size| | 0009| 0009| Luxury| | 0010| 0010| Premium| | 0011| 0011| Minivan| | 0012| 0012| 12-passenger van| | 0013| 0013| Moving van| | 0014| 0014| 15-passenger van| | 0015| 0015| Cargo van| | 0016| 0016| 12-foot truck| | 0017| 0017| 20-foot truck| | 0018| 0018| 24-foot truck| | 0019| 0019| 26-foot truck| | 0020| 0020| Moped| | 0021| 0021| Stretch| | 0022| 0022| Regular| | 0023| 0023| Unique| | 0024| 0024| Exotic| | 0025| 0025| Small/medium truck| | 0026| 0026| Large truck| | 0027| 0027| Small SUV| | 0028| 0028| Medium SUV| | 0029| 0029| Large SUV| | 0030| 0030| Exotic SUV| | 9999| 9999| Miscellaneous|  Additional Values allowed **only** for `American Express`:  |American Express|MasterCard|Description| |--- |--- |--- | | 0031| NA| Four Wheel Drive| | 0032| NA| Special| | 0099| NA| Taxi|
     */
    vehicleClass?: string;
    /**
     * Total number of miles driven by the customer. This field is supported only for MasterCard and American Express.
     */
    distanceTravelled?: string;
    /**
     * Miles/Kilometers Indicator shows whether the “miles” fields are expressed in miles or kilometers.  Allowed values: - `K` - Kilometers - `M` - Miles
     */
    distanceUnit?: string;
    /**
     * Date/time the auto was returned to the rental agency. Format: ``yyyy-MM-dd HH-mm-ss z`` This field is supported for Visa, MasterCard, and American Express.
     */
    returnDateTime?: string;
    /**
     * Date/time the auto was picked up from the rental agency. Format: `yyyy-MM-dd HH-mm-ss z` This field is supported for Visa, MasterCard, and American Express.
     */
    rentalDateTime?: string;
    /**
     * Maximum number of free miles or kilometers allowed to a customer for the duration of the auto rental agreement. This field is supported only for MasterCard and American Express.
     */
    maxFreeDistance?: string;
    /**
     * Used for MC and Discover  Valid values: - `true` - Yes (insurance was purchased) - `false` - No (insurance was not purchased)
     */
    insuranceIndicator?: boolean;
    /**
     * Used to identify special circumstances applicable to the Card Transaction or Cardholder, such as \"renter” or ”show”.  This code is `2 digit` value agreed by Merchant and processor.
     */
    programCode?: string;
    returnAddress?: Ptsv2paymentsTravelInformationAutoRentalReturnAddress;
    rentalAddress?: Ptsv2paymentsTravelInformationAutoRentalRentalAddress;
    /**
     * Auto rental agency’s agreement (invoice) number provided to the customer. It is used to trace any inquiries about transactions. This field is supported for Visa, MasterCard, and American Express. This Merchant-defined value, which may be composed of any combination of characters and/or numerals, may become part of the descriptive bill on the Cardmember's statement.
     */
    agreementNumber?: string;
    /**
     * Odometer reading at time of vehicle rental.
     */
    odometerReading?: string;
    /**
     * This field contains a unique identifier assigned by the company to the vehicle.
     */
    vehicleIdentificationNumber?: string;
    /**
     * Corporate Identifier provides the unique identifier of the corporation or entity renting the vehicle:  |Card Specific Validation|VISA|MasterCard|Discover|AMEX| |--- |--- |--- |--- | | Filed Length| NA| 12| NA| NA| | Field Type| NA| AN| NA| NA| | M/O/C| NA| O| NA| NA|
     */
    companyId?: string;
    /**
     * The number of additional drivers included on the rental agreement not including the individual who signed the rental agreement.
     */
    numberOfAdditionalDrivers?: string;
    /**
     * Age of the driver renting the vehicle.
     */
    driverAge?: string;
    /**
     * Program code used to identify special circumstances, such as “frequent renter” or “no show” status for the renter. Possible values: - `0`: not applicable (default) - `1`: frequent renter - `2`: no show  For authorizations, this field is supported only for Visa.  For captures, this field is supported for Visa, MasterCard, and American Express.  Code for special programs applicable to the Card Transaction or the Cardholder.
     */
    specialProgramCode?: string;
    /**
     * Make of the vehicle being rented (e.g., Chevrolet or Ford).
     */
    vehicleMake?: string;
    /**
     * Model of the vehicle being rented (e.g., Cavalier or Focus).
     */
    vehicleModel?: string;
    /**
     * Indicates the time period for which the vehicle rental rate applies (e.g., daily, weekly or monthly). Daily, Weekly and Monthly are valid values.
     */
    timePeriod?: string;
    /**
     * Commodity code or International description code used to classify the item. Contact your acquirer for a list of codes.
     */
    commodityCode?: string;
    /**
     * Customer service telephone number that is used to resolve questions or disputes. Include the area code, exchange, and number. This field is supported only for MasterCard and American Express.
     */
    customerServicePhoneNumber?: string;
    taxDetails?: Ptsv2paymentsTravelInformationAutoRentalTaxDetails;
    /**
     * Insurance charges. Field is conditional and can include decimal point.
     */
    insuranceAmount?: string;
    /**
     * Extra charges incurred for a one-way rental agreement for the auto. This field is supported only for Visa.
     */
    oneWayDropOffAmount?: string;
    /**
     * For **MasterCard** and **Discover**: Adjusted amount indicator code that indicates any miscellaneous charges incurred after the auto was returned. Possible values: - `A` - Drop-off charges - `B` - Delivery charges - `C` - Parking expenses - `D` - Extra hours - `E` - Violations - `X` - More than one of the above charges  For **American Express**: Audit indicator code that indicates any adjustment for mileage, fuel, auto damage, etc. made to a rental agreement and whether the cardholder was notified.  Possible value for the authorization service: - `A` (default): adjustment amount greater than 0 (zero)  Possible values for the capture service: - `X` - Multiple adjustments - `Y` - One adjustment only; Cardmember notified - `Z` - One adjustment only; Cardmember not notified. This value is used as the default if the request does not include this field and includes an adjustment amount greater than 0 (zero). This is an optional field.
     */
    adjustedAmountIndicator?: string;
    /**
     * Adjusted Amount indicates whether any miscellaneous charges were incurred after the vehicle was returned.  For authorizations, this field is supported only for American Express.  For captures, this field is supported only for MasterCard and American Express. **NOTE** For American Express, this field is required if the `travelInformation.autoRental.adjustedAmountIndicator` field is included in the request and has a value; otherwise, this field is optional.  For all other card types, this field is ignored.
     */
    adjustedAmount?: string;
    /**
     * Extra gasoline charges that extend beyond the basic rental agreement. This field is supported only for Visa.
     */
    fuelCharges?: string;
    /**
     * Weekly Rental Amount provides the amount charged for a seven-day rental period. Field - Time Period needs to be populated with Weekly if this field is present
     */
    weeklyRentalRate?: string;
    /**
     * Daily auto rental rate charged. This field is supported only for MasterCard and American Express.  Field - Time Period needs to be populated with Daily if this field is present
     */
    dailyRentalRate?: string;
    /**
     * Rate charged for each mile. This field is supported only for MasterCard and American Express.
     */
    ratePerMile?: string;
    /**
     * Regular Mileage Charge provides the amount charged for regular miles traveled during vehicle rental. Two decimal places
     */
    mileageCharge?: string;
    /**
     * Extra mileage charges that extend beyond the basic rental agreement. This field is supported only for Visa.
     */
    extraMileageCharge?: string;
    /**
     * Extra charges related to a late return of the rented auto. This field is supported only for Visa.
     */
    lateFeeAmount?: string;
    /**
     * (Towing Charges) provides the amount charged to tow the rental vehicle.
     */
    towingCharge?: string;
    /**
     * (Extra Charges) provides the extra charges associated with the vehicle rental.
     */
    extraCharge?: string;
    /**
     * Amount charged for renting a Global Positioning Service (GPS).
     */
    gpsCharge?: string;
    /**
     * Additional charges incurred for phone usage included on the total bill.
     */
    phoneCharge?: string;
    /**
     * Extra charges incurred due to a parking violation for the auto. This field is supported only for Visa.
     */
    parkingViolationCharge?: string;
    /**
     * Total amount charged for all other miscellaneous charges not previously defined.
     */
    otherCharges?: string;
  }
  export interface Ptsv2paymentsTravelInformationAutoRentalRentalAddress {
    /**
     * City in which the auto was rented.  For authorizations, this field is supported for Visa, MasterCard, and American Express.  For captures, this field is supported only for American Express.  For all other card types, this field is ignored.
     */
    city?: string;
    /**
     * State in which the auto was rented. Use the [State, Province, and Territory Codes for the United States and Canada](https://developer.cybersource.com/library/documentation/sbc/quickref/states_and_provinces.pdf).
     */
    state?: string;
    /**
     * Country where the auto was rented. Use the [ISO Standard Country Codes.](https://developer.cybersource.com/library/documentation/sbc/quickref/countries_alpha_list.pdf) This field is supported only for American Express.
     */
    country?: string;
    /**
     * The agency code, address, phone number, etc., used to identify the location where the vehicle was rented.
     */
    locationId?: string;
    /**
     * Address from where the vehicle was rented.
     */
    address1?: string;
    /**
     * Address from where the vehicle was rented.
     */
    address2?: string;
    /**
     * This field contains the location where a taxi passenger was picked up or where an auto rental vehicle was picked up. In most cases, this is the rental agency's business name that appears on the storefront and/or customer receipts, commonly referred to as the DBA (Doing Business As) name. However, if the vehicle was picked up at another location (e.g., a hotel,auto dealership, repair shop, etc.), the name of that location should be used. This entry must be easily recognized by the Cardmember to avoid unnecessary inquiries. If the name is more than 38  characters, use proper and meaningful abbreviation, when possible.
     */
    location?: string;
  }
  export interface Ptsv2paymentsTravelInformationAutoRentalReturnAddress {
    /**
     * City where the auto was returned to the rental agency.
     */
    city?: string;
    /**
     * State in which the auto was returned to the rental agency. Use the [State, Province, and Territory Codes for the United States and Canada](https://developer.cybersource.com/library/documentation/sbc/quickref/states_and_provinces.pdf).  For authorizations, this field is supported for Visa, MasterCard, and American Express.  For captures, this field is supported only for MasterCard and American Express.
     */
    state?: string;
    /**
     * Country where the auto was returned to the rental agency. Use the [ISO Standard Country Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/countries_alpha_list.pdf).
     */
    country?: string;
    /**
     * Code, address, phone number, etc. used to identify the location of the auto rental return. This field is supported only for MasterCard and American Express.
     */
    locationId?: string;
    /**
     * This field contains the location where the taxi passenger was dropped off or where the auto rental vehicle was returned.
     */
    location?: string;
  }
  export interface Ptsv2paymentsTravelInformationAutoRentalTaxDetails {
    /**
     * Indicates the amount of tax based on the `type` field as described in the table below:
     */
    amount?: string;
    /**
     * Rate of VAT or other tax for the order.  Example 0.040 (=4%)  Valid range: 0.01 to 0.99 (1% to 99%, with only whole percentage values accepted; values with additional decimal places will be truncated)
     */
    rate?: string;
    /**
     * Flag that indicates whether the tax amount (`travelInformation.autoRental.taxDetails.amount`) is included in the request.  Possible values: - `false`: tax amount is not included in the request. - `true`:  tax amount is included in the request.
     */
    applied?: boolean;
    exemptionCode?: string;
    /**
     * Different taxes the rental agency applies to the rental agreement such as tourist tax, airport tax, or rental tax.
     */
    taxType?: string;
    /**
     * Summary of all tax types
     */
    taxSummary?: string;
  }
  export interface Ptsv2paymentsTravelInformationLodging {
    /**
     * Date on which the guest checked in. In the case of a no-show or a reservation, the scheduled arrival date. Format: `MMDDYY`. For best interchange rates, make sure it is a valid date.
     */
    checkInDate?: string;
    /**
     * Date on which the guest checked out. Format: `MMDDYY`. For best interchange rates, make sure it is a valid date.
     */
    checkOutDate?: string;
    /**
     * The object containing the number of nights and the daily rate that applies for that no of nights.
     */
    room?: Array<Ptsv2paymentsTravelInformationLodgingRoom>;
    /**
     * Smoking preference of the guest. Possible values: - `Y`: smoking room - `N`: non-smoking room
     */
    smokingPreference?: string;
    /**
     * Number of rooms booked by the cardholder.
     */
    numberOfRooms?: number;
    /**
     * Number of guests staying in the room.
     */
    numberOfGuests?: number;
    /**
     * Type of room, such as queen, king, or two doubles.
     */
    roomBedType?: string;
    /**
     * Type of tax, such as tourist or hotel.
     */
    roomTaxType?: string;
    /**
     * Type of rate, such as corporate or senior citizen.
     */
    roomRateType?: string;
    /**
     * Name of the guest under which the room is reserved.
     */
    guestName?: string;
    /**
     * Your toll-free customer service phone number.
     */
    customerServicePhoneNumber?: string;
    /**
     * Code assigned to a business. You can use this code to identify corporate rates and discounts for guests.
     */
    corporateClientCode?: string;
    /**
     * Amount of an additional coupon or discount.
     */
    additionalDiscountAmount?: string;
    /**
     * Location of room, such as lake view or ocean view.
     */
    roomLocation?: string;
    /**
     * Code that identifies special circumstances. Possible values: - `1`: lodging (default) - `2`: no show reservation - `3`: advanced deposit
     */
    specialProgramCode?: string;
    /**
     * Total tax amount.
     */
    totalTaxAmount?: string;
    /**
     * Prepaid amount, such as a deposit.
     */
    prepaidCost?: string;
    /**
     * Cost for all food and beverages.
     */
    foodAndBeverageCost?: string;
    /**
     * Total tax for the room.
     */
    roomTaxAmount?: string;
    /**
     * Adjusted amount charged in addition to the reservation amount after the stay is complete.
     */
    adjustmentAmount?: string;
    /**
     * Cost of telephone services.
     */
    phoneCost?: string;
    /**
     * Cost of restaurant purchases
     */
    restaurantCost?: string;
    /**
     * Cost of room service.
     */
    roomServiceCost?: string;
    /**
     * Cost of mini-bar purchases.
     */
    miniBarCost?: string;
    /**
     * Cost of laundry services.
     */
    laundryCost?: string;
    /**
     * Miscellaneous costs.
     */
    miscellaneousCost?: string;
    /**
     * Cost of gift shop purchases.
     */
    giftShopCost?: string;
    /**
     * Cost of movies.
     */
    movieCost?: string;
    /**
     * Cost of health club services.
     */
    healthClubCost?: string;
    /**
     * Cost of valet parking services.
     */
    valetParkingCost?: string;
    /**
     * Cost of the cash that was disbursed plus any associated service fees
     */
    cashDisbursementCost?: string;
    /**
     * Cost of non-room purchases, such as meals and gifts.
     */
    nonRoomCost?: string;
    /**
     * Cost of business center services.
     */
    businessCenterCost?: string;
    /**
     * Cost of lounge and bar purchases.
     */
    loungeBarCost?: string;
    /**
     * Cost of transportation services.
     */
    transportationCost?: string;
    /**
     * Gratuity.
     */
    gratuityAmount?: string;
    /**
     * Cost of conference room services.
     */
    conferenceRoomCost?: string;
    /**
     * Cost of audio visual services.
     */
    audioVisualCost?: string;
    /**
     * Cost of banquet services.
     */
    banquestCost?: string;
    /**
     * Tax on non-room purchases.
     */
    nonRoomTaxAmount?: string;
    /**
     * Service fee for early departure.
     */
    earlyCheckOutCost?: string;
    /**
     * Cost of Internet access.
     */
    internetAccessCost?: string;
  }
  export interface Ptsv2paymentsTravelInformationLodgingRoom {
    /**
     * Daily cost of the room.
     */
    dailyRate?: string;
    /**
     * Number of nights billed at the rate specified by `travelInformation.lodging.room[].dailyRate`.
     */
    numberOfNights?: number;
  }
  export interface Ptsv2paymentsTravelInformationTransit {
    airline?: Ptsv2paymentsTravelInformationTransitAirline;
  }
  export interface Ptsv2paymentsTravelInformationTransitAirline {
    /**
     * Reference number for the airline booking. Required if ticket numbers are not issued.
     */
    bookingReferenceNumber?: string;
    /**
     * Airline that generated the ticket. Format: English characters only. Optional request field.
     */
    carrierName?: string;
    ticketIssuer?: Ptsv2paymentsTravelInformationTransitAirlineTicketIssuer;
    /**
     * Ticket number. Format: English characters only. Restricted string data type that indicates a sequence of letters, numbers, and spaces; special characters are not included. Optional request field.
     */
    ticketNumber?: string;
    /**
     * Check digit for the ticket number. CyberSource recommends that you validate the check digit. With Discover and Diners Club, a valid ticket number has these characteristics: - The value is numeric. - The first three digits are a valid IATA2 license plate carrier code. - The last digit is a check digit or zero (0). - All remaining digits are nonzero.
     */
    checkDigit?: string;
    /**
     * Flag that indicates whether or not the ticket is restricted (nonrefundable). Possible values: - 0: No restriction (refundable) - 1: Restricted (nonrefundable) Format: English characters only. Restricted string data type that indicates a sequence of letters, numbers, and spaces; special characters are not included. Optional request field.
     */
    restrictedTicketIndicator?: number;
    /**
     * Type of charge. Possible values: - 01: Charge is for an airline ticket - 02: Charge is for an item that is not an airline ticket
     */
    transactionType?: number;
    /**
     * The field is not currently supported.
     */
    extendedPaymentCode?: string;
    /**
     * Name of the passenger to whom the ticket was issued.  This will always be a single passenger's name. If there are more than one passengers, provide only the primary passenger's name. Do not include special characters such as commas, hyphens, or apostrophes. Only ASCII characters are supported. Format: English characters only. Optional request field.
     */
    passengerName?: string;
    /**
     * Reference number or code that identifies the cardholder. Format: English characters only. Restricted string data type that indicates a sequence of letters, numbers, and spaces; special characters are not included. Optional request field.
     */
    customerCode?: string;
    documentType?: string;
    /**
     * The field is not currently supported.
     */
    documentNumber?: string;
    /**
     * The field is not currently supported.
     */
    documentNumberOfParts?: number;
    /**
     * Invoice number for the airline transaction.
     */
    invoiceNumber?: string;
    /**
     * Invoice date. The format is YYYYMMDD. If this value is included in the request, it is used in the creation of the invoice number. See \"Invoice Number,\"
     */
    invoiceDate?: number;
    /**
     * Description of the charge if the charge does not involve an airline ticket. For example: Excess baggage.
     */
    additionalCharges?: string;
    /**
     * Total fee for the ticket. This value cannot exceed `99999999999999999999` (twenty 9s). Format: English characters only. Optional request field.
     */
    totalFeeAmount?: string;
    /**
     * Number that identifies the clearing message when multiple clearing messages are allowed per authorized transaction. Each clearing message linked to one authorization request must include a unique clearing sequence number between 1 and the total number of clearing records. Format: English characters only. Optional request field.
     */
    clearingSequence?: string;
    /**
     * Total number of clearing messages associated with the authorization request. Format: English characters only. Optional request field.
     */
    clearingCount?: string;
    /**
     * Total clearing amount for all transactions in the clearing count set. This value cannot exceed `99999999999999999999` (twenty 9s). Format: English characters only. If this field is not set and if the total amount from the original authorization is not NULL, the total clearing amount is set to the total amount from the original authorization.
     */
    totalClearingAmount?: string;
    /**
     * Number of passengers for whom the ticket was issued. Format: English characters only. Optional request field.
     */
    numberOfPassengers?: number;
    /**
     * Code that specifies the computerized reservation system used to make the reservation and purchase the ticket. Format: English characters only. Restricted string data type that indicates a sequence of letters, numbers, and spaces; special characters are not included. Optional request field.
     */
    reservationSystemCode?: string;
    /**
     * Airline process identifier. This value is the airline’s three-digit IATA1 code which is used to process extended payment airline tickets.
     */
    processIdentifier?: string;
    /**
     * Date on which the transaction occurred. Format: `YYYYMMDD` Format: English characters only. Optional request field.
     */
    ticketIssueDate?: string;
    /**
     * Flag that indicates whether an electronic ticket was issued. Possible values: - `true` - `false` Optional request field.
     */
    electronicTicketIndicator?: boolean;
    /**
     * Original ticket number when the transaction is for a replacement ticket.
     */
    originalTicketNumber?: string;
    /**
     * Type of purchase. Possible values: - `EXC`: Exchange ticket - `MSC`: Miscellaneous (not a ticket purchase and not a transaction related to an exchange ticket) - `REF`: Refund - `TKT`: Ticket Format: English characters only. Optional request field.
     */
    purchaseType?: string;
    /**
     * Reason for the credit. Possible values: - `A`: Cancellation of the ancillary passenger transport purchase. - `B`: Cancellation of the airline ticket and the passenger transport ancillary purchase. - `C`: Cancellation of the airline ticket. - `O`: Other. - `P`: Partial refund of the airline ticket. Format: English characters only.  Optional request field.
     */
    creditReasonIndicator?: string;
    /**
     * Type of update. Possible values: - `C`: Change to the existing ticket. - `N`: New ticket. Format: English characters only Optional request field.
     */
    ticketChangeIndicator?: string;
    /**
     * Plan number based on the fare. This value is provided by the airline. Format: English characters only. Optional request field.
     */
    planNumber?: string;
    /**
     * Date of arrival for the last leg of the trip. Format: `MMDDYYYY` English characters only. Optional request field.
     */
    arrivalDate?: string;
    /**
     * Text that describes the ticket limitations, such as _nonrefundable_. Format: English characters only. Optional request field.
     */
    restrictedTicketDesciption?: string;
    /**
     * Amount of the exchanged ticket. Format: English characters only.
     */
    exchangeTicketAmount?: string;
    /**
     * Fee for exchanging the ticket. Format: English characters only. Optional request field.
     */
    exchangeTicketFeeAmount?: string;
    /**
     * The field is not currently supported.
     */
    reservationType?: string;
    /**
     * Boarding fee.
     */
    boardingFeeAmount?: string;
    legs?: Array<Ptsv2paymentsTravelInformationTransitAirlineLegs>;
    ancillaryInformation?: Ptsv2paymentsTravelInformationTransitAirlineAncillaryInformation;
  }
  export interface Ptsv2paymentsTravelInformationTransitAirlineAncillaryInformation {
    /**
     * Ticket number, which consists of the carrier code, form, and serial number, without the check digit. **Important** This field is required in the U.S. in order for you to qualify for either the custom payment service (CPS) or the electronic interchange reimbursement fee (EIRF) program. Format: English characters only. Optional field for ancillary services.
     */
    ticketNumber?: string;
    /**
     * Name of the passenger. If the passenger’s name is not available, this value is the cardholder’s name. If neither the passenger’s name nor the cardholder’s name is available, this value is a description of the ancillary purchase. **Important** This field is required in the U.S. in order for you to qualify for either the custom payment service (CPS) or the electronic interchange reimbursement fee (EIRF) program. Format: English characters only. Optional field for ancillary service.
     */
    passengerName?: string;
    /**
     * Number for the airline ticket to which the ancillary purchase is connected.  If this purchase has a connection or relationship to another purchase such as a baggage fee for a passenger transport ticket, this field must contain the ticket number for the other purchase.  For a stand-alone purchase, the value for this field must be the same as the value for the `travelInformation.transit.airline.ancillaryInformation.ticketNumber` field. **Important** This field is required in the U.S. in order for you to qualify for either the custom payment service (CPS) or the electronic interchange reimbursement fee (EIRF) program. Format: English characters only. Optional request field for ancillary services.
     */
    connectedTicketNumber?: string;
    /**
     * Reason for the credit. Possible values: - `A`: Cancellation of the ancillary passenger transport purchase. - `B`: Cancellation of the airline ticket and the passenger transport ancillary purchase. - `C`: Cancellation of the airline ticket. - `O`: Other. - `P`: Partial refund of the airline ticket. Format: English characters only. Optional field for ancillary services.
     */
    creditReasonIndicator?: string;
    service?: Array<Ptsv2paymentsTravelInformationTransitAirlineAncillaryInformationService>;
  }
  export interface Ptsv2paymentsTravelInformationTransitAirlineAncillaryInformationService {
    /**
     * Category code for the ancillary service that is provided. Obtain the codes from the International Air Transport Association (IATA). **Note** `#` is either 0, 1, 2, or 3. **Important** This field is required in the U.S. in order for you to qualify for either the custom payment service (CPS) or the electronic interchange reimbursement fee (EIRF)program. Format: English characters only. Optional request field for ancillary services.
     */
    categoryCode?: string;
    /**
     * Subcategory code for the ancillary service category. Obtain the codes from the International Air Transport Association (IATA). **Note** `#` is either 0, 1, 2, or 3. Format  English characters only. Optional request field for ancillary services.
     */
    subCategoryCode?: string;
  }
  export interface Ptsv2paymentsTravelInformationTransitAirlineLegs {
    /**
     * IATA code for the carrier for this leg of the trip. Format: English characters only. Restricted string data type that indicates a sequence of letters, numbers, and spaces; special characters are not included. Optional request field for travel legs.
     */
    carrierCode?: string;
    /**
     * Flight number for this leg of the trip. Restrictions are limitations for the ticket based on the type of fare, such as a nonrefundable ticket or a 3-day minimum stay. Format: English characters only. Optional request field for travel legs.
     */
    flightNumber?: string;
    /**
     * IATA code for the originating airport for this leg of the trip. Format: English characters only. Restricted string data type that indicates a sequence of letters, numbers, and spaces; special characters are not included. Optional request field for travel legs.
     */
    originatingAirportCode?: string;
    /**
     * IATA code for the class of service for this leg of the trip. Format: English characters only. Restricted string data type that indicates a sequence of letters, numbers, and spaces; special characters are not included. Optional request field for travel legs.
     */
    _class?: string;
    /**
     * Code that indicates whether a stopover is allowed on this leg of the trip. Possible values: - `O` (capital letter “O”) (default): Stopover allowed - `X` (capital letter “X”): Stopover not allowed Format: English characters only. Restricted string data type that indicates a sequence of letters, numbers, and spaces; special characters are not included. Optional request field for travel legs.
     */
    stopoverIndicator?: number;
    /**
     * Departure date for the first leg of the trip. Format: `YYYYMMDD`. Format: English characters only. Optional request field for travel legs.
     */
    departureDate?: number;
    /**
     * IATA code for the destination airport for this leg of the trip. Format: English characters only. Restricted string data type that indicates a sequence of letters, numbers, and spaces; special characters are not included. Optional request field for travel legs.
     */
    destinationAirportCode?: string;
    /**
     * Code for the fare basis for this leg of the trip. The fare basis is assigned by the carriers and indicates a particular ticket type, such as business class or discounted/nonrefundable. Restricted string data type that indicates a sequence of letters, numbers, and spaces; special characters are not included. Format: English characters only. Optional request field for travel legs.auto_rental_regular_mileage_cost
     */
    fareBasis?: string;
    /**
     * Amount of departure tax for this leg of the trip.
     */
    departTaxAmount?: string;
    /**
     * Ticket that contains additional coupons for this leg of the trip on an itinerary that has more than four segments. Format: English characters only. Restricted string data type that indicates a sequence of letters, numbers, and spaces; special characters are not included. Optional request field for travel legs.
     */
    conjunctionTicket?: string;
    /**
     * New ticket number that is issued when the ticket is exchanged for this leg of the trip. Restrictions are limitations for the ticket based on the type of fare, such as a nonrefundable ticket or a 3-day minimum stay. Format: English characters only. Optional request field for travel legs.
     */
    exchangeTicketNumber?: string;
    /**
     * Coupon number. Each leg on the ticket requires a separate coupon, and each coupon is identified by the coupon number. Format: English characters only. Restricted string data type that indicates a sequence of letters, numbers, and spaces; special characters are not included. Optional request field for travel legs.
     */
    couponNumber?: string;
    /**
     * Time of departure for this leg of the trip. The format is military time and HHMM: If not all zeros, then the hours must be `00-23` and the minutes must be `00-59`. Format: English characters only. Optional request field for travel legs.
     */
    departureTime?: number;
    /**
     * AM or PM for the departure time. Possible values: - A: 12:00 midnight to 11:59 a.m. - P: 12:00 noon to 11:59 p.m Format: English characters only. Restricted string data type that indicates a sequence of letters, numbers, and spaces; special characters are not included. Optional request field for travel legs.
     */
    departureTimeMeridian?: string;
    /**
     * Time of arrival for this leg of the trip. The format is military time and HHMM: If not all zeros, then the hours must be `00-23` and the minutes must be `00-59` Format: English characters only. Optional request field for travel legs.
     */
    arrivalTime?: number;
    /**
     * AM or PM for the arrival time for this leg of the trip. Possible values: - `A`: 12:00 midnight to 11:59 a.m. - `P`: 12:00 noon to 11:59 p.m. Format: English characters only. Restricted string data type that indicates a sequence of letters, numbers, and spaces; special characters are not included. Optional request field for travel legs.
     */
    arrivalTimeMeridian?: string;
    /**
     * Notes or notations about endorsements and restrictions for this leg of the trip. Endorsements can be notations added by the travel agency, including mandatory government-required notations such as value added tax. Restrictions are limitations for the ticket based on the type of fare, such as a nonrefundable ticket or a 3-day minimum stay. Format: English characters only. Optional request field for travel legs.
     */
    endorsementsRestrictions?: string;
    /**
     * Total fare for this leg of the trip. Format: English characters only. Optional request field for travel legs.
     */
    totalFareAmount?: string;
    /**
     * Fee for this leg of the trip, such as an airport fee or country fee. Format: English characters only. Optional request field for travel legs.
     */
    feeAmount?: string;
    /**
     * Tax for this leg of the trip. Format: English characters only. Optional request field for travel legs.
     */
    taxAmount?: string;
  }
  export interface Ptsv2paymentsTravelInformationTransitAirlineTicketIssuer {
    /**
     * IATA2 airline code. Format: English characters only. Required for Mastercard; optional for all other card types.
     */
    code?: string;
    /**
     * Name of the ticket issuer. If you do not include this field, CyberSource uses the value for your merchant name that is in the CyberSource merchant configuration database.
     */
    name?: string;
    /**
     * Address of the company issuing the ticket.
     */
    address?: string;
    /**
     * City in which the transaction occurred. If the name of the city exceeds 18 characters, use meaningful abbreviations. Format: English characters only. Optional request field.
     */
    locality?: string;
    /**
     * State in which transaction occured.
     */
    administrativeArea?: string;
    /**
     * Zip code of the city in which transaction occured.
     */
    postalCode?: string;
    /**
     * Country in which transaction occured.
     */
    country?: string;
  }
  export interface Ptsv2paymentsidClientReferenceInformation {
    /**
     * Merchant-generated order reference or tracking number. It is recommended that you send a unique value for each transaction so that you can perform meaningful searches for the transaction.  #### Used by **Authorization** Required field.  #### PIN Debit Requests for PIN debit reversals need to use the same merchant reference number that was used in the transaction that is being reversed.  Required field for all PIN Debit requests (purchase, credit, and reversal).  #### FDC Nashville Global Certain circumstances can cause the processor to truncate this value to 15 or 17 characters for Level II and Level III processing, which can cause a discrepancy between the value you submit and the value included in some processor reports.
     */
    code?: string;
    partner?: Ptsv2paymentsidClientReferenceInformationPartner;
    /**
     * The name of the Connection Method client (such as Virtual Terminal or SOAP Toolkit API) that the merchant uses to send a transaction request to CyberSource.
     */
    applicationName?: string;
    /**
     * Version of the CyberSource application or integration used for a transaction.
     */
    applicationVersion?: string;
    /**
     * The entity that is responsible for running the transaction and submitting the processing request to CyberSource. This could be a person, a system, or a connection method.
     */
    applicationUser?: string;
  }
  export interface Ptsv2paymentsidClientReferenceInformationPartner {
    /**
     * Value that links the previous transaction to the current follow-on request. This value is assigned by the client software that is installed on the POS terminal, which makes it available to the terminal’s software and to CyberSource. Therefore, you can use this value to reconcile transactions between CyberSource and the terminal’s software.  CyberSource does not forward this value to the processor. Instead, the value is forwarded to the CyberSource reporting functionality.  This field is supported only on these processors: - American Express Direct - Credit Mutuel-CIC - FDC Nashville Global - OmniPay Direct - SIX  Optional field.
     */
    originalTransactionId?: string;
    /**
     * Identifier for the developer that helped integrate a partner solution to CyberSource.  Send this value in all requests that are sent through the partner solutions built by that developer. CyberSource assigns the ID to the developer.  **Note** When you see a developer ID of 999 in reports, the developer ID that was submitted is incorrect.
     */
    developerId?: string;
    /**
     * Identifier for the partner that is integrated to CyberSource.  Send this value in all requests that are sent through the partner solution. CyberSource assigns the ID to the partner.  **Note** When you see a solutionId of 999 in reports, the solutionId that was submitted is incorrect.
     */
    solutionId?: string;
  }
  export interface Ptsv2paymentsidMerchantInformation {
    /**
     * Date and time at your physical location.  Format: `YYYYMMDDhhmmss`, where:  - `YYYY` = year  - `MM` = month  - `DD` = day  - `hh` = hour  - `mm` = minutes  - `ss` = seconds  #### Used by **Authorization** Required for these processors: - American Express Direct                                                                                                                                                                                                                                                                                                                         - American Express Direct - Credit Mutuel-CIC - FDC Nashville Global - SIX  Optional for all other processors.
     */
    transactionLocalDateTime?: string;
  }
  export interface Ptsv2paymentsidOrderInformation {
    amountDetails?: Ptsv2paymentsidOrderInformationAmountDetails;
  }
  export interface Ptsv2paymentsidOrderInformationAmountDetails {
    /**
     * Additional charges that have to be authorized against a lodging or auto-rental order. This value cannot be negative. You can include a decimal point (.), but no other special characters.
     */
    additionalAmount?: string;
    /**
     * Currency used for the order. Use the three-character [ISO Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf)  #### Used by **Authorization** Required field.  **Authorization Reversal** For an authorization reversal (`reversalInformation`) or a capture (`processingOptions.capture` is set to `true`), you must use the same currency that you used in your payment authorization request.  #### PIN Debit Currency for the amount you requested for the PIN debit purchase. This value is returned for partial authorizations. The issuing bank can approve a partial amount if the balance on the debit card is less than the requested transaction amount. For the possible values, see the [ISO Standard Currency Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/currencies.pdf). Returned by PIN debit purchase.  For PIN debit reversal requests, you must use the same currency that was used for the PIN debit purchase or PIN debit credit that you are reversing. For the possible values, see the [ISO Standard Currency Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/currencies.pdf).  Required field for PIN Debit purchase and PIN Debit credit requests. Optional field for PIN Debit reversal requests.  #### GPX This field is optional for reversing an authorization or credit.  #### DCC for First Data Your local currency. For details, see the `currency` field description in [Dynamic Currency Conversion For First Data Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/DCC_FirstData_SCMP/DCC_FirstData_SCMP_API.pdf).  #### Tax Calculation Required for international tax and value added tax only. Optional for U.S. and Canadian taxes. Your local currency.
     */
    currency?: string;
  }
  export interface Ptsv2paymentsidProcessingInformation {
    authorizationOptions?: Ptsv2paymentsidProcessingInformationAuthorizationOptions;
  }
  export interface Ptsv2paymentsidProcessingInformationAuthorizationOptions {
    initiator?: Ptsv2paymentsidProcessingInformationAuthorizationOptionsInitiator;
  }
  export interface Ptsv2paymentsidProcessingInformationAuthorizationOptionsInitiator {
    /**
     * Indicates to an issuing bank whether a merchant-initiated transaction came from a card that was already stored on file.  Possible values: - **true** means the merchant-initiated transaction came from a card that was already stored on file. - **false**  means the merchant-initiated transaction came from a card that was not stored on file.
     */
    storedCredentialUsed?: boolean;
  }
  export interface Ptsv2paymentsidTravelInformation {
    /**
     * Duration for which the vehicle was rented or lodge/hotel was booked.
     */
    duration?: string;
  }
  export interface Ptsv2paymentsidcapturesAggregatorInformation {
    /**
     * Value that identifies you as a payment aggregator. Get this value from the processor.  #### CyberSource through VisaNet The value for this field corresponds to the following data in the TC 33 capture file5: - Record: CP01 TCR6 - Position: 95-105 - Field: MasterCard Payment Facilitator ID  **FDC Compass**\\ This value must consist of uppercase characters.  For processor-specific information, see the `aggregator_id` field in [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
     */
    aggregatorId?: string;
    /**
     * Your payment aggregator business name.  **American Express Direct**\\ The maximum length of the aggregator name depends on the length of the sub-merchant name. The combined length for both values must not exceed 36 characters.\\  #### CyberSource through VisaNet With American Express, the maximum length of the aggregator name depends on the length of the sub-merchant name. The combined length for both values must not exceed 36 characters. The value for this field does not map to the TC 33 capture file5.  **FDC Compass**\\ This value must consist of uppercase characters.  For processor-specific information, see the aggregator_name field in [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
     */
    name?: string;
    subMerchant?: Ptsv2paymentsidcapturesAggregatorInformationSubMerchant;
  }
  export interface Ptsv2paymentsidcapturesAggregatorInformationSubMerchant {
    /**
     * Sub-merchant’s business name.  #### American Express Direct The maximum length of the sub-merchant name depends on the length of the aggregator name. The combined length for both values must not exceed 36 characters.  #### CyberSource through VisaNet With American Express, the maximum length of the sub-merchant name depends on the length of the aggregator name. The combined length for both values must not exceed 36 characters. The value for this field does not map to the TC 33 capture file5.  #### FDC Compass This value must consist of uppercase characters.  #### FDC Nashville Global With Mastercard, the maximum length of the sub-merchant name depends on the length of the aggregator name: - If aggregator name length is 1 through 3, maximum sub-merchant name length is 21. - If aggregator name length is 4 through 7, maximum sub-merchant name length is 17. - If aggregator name length is 8 through 12, maximum sub-merchant name length is 12.
     */
    name?: string;
    /**
     * First line of the sub-merchant’s street address.  For processor-specific details, see `submerchant_street` field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  #### CyberSource through VisaNet The value for this field does not map to the TC 33 capture file5.  #### FDC Compass This value must consist of uppercase characters.
     */
    address1?: string;
    /**
     * Sub-merchant’s city.  For processor-specific details, see `submerchant_city` request field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  #### CyberSource through VisaNet The value for this field does not map to the TC 33 capture file5.  #### FDC Compass This value must consist of uppercase characters.
     */
    locality?: string;
    /**
     * Sub-merchant’s state or province.  For possible values and also aggregator support, see `submerchant_state` request field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  #### CyberSource through VisaNet The value for this field does not map to the TC 33 capture file5.  #### FDC Compass This value must consist of uppercase characters.
     */
    administrativeArea?: string;
    /**
     * Partial postal code for the sub-merchant’s address.  For processor-specific details, see `submerchant_postal_code` request field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  #### CyberSource through VisaNet The value for this field does not map to the TC 33 capture file5.  #### FDC Compass This value must consist of uppercase characters.
     */
    postalCode?: string;
    /**
     * Sub-merchant’s country. Use the [ISO Standard Country Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/countries_alpha_list.pdf).  #### CyberSource through VisaNet The value for this field does not map to the TC 33 capture file.  #### FDC Compass This value must consist of uppercase characters.  For details, see the `submerchant_country` request-level field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
     */
    country?: string;
    /**
     * Sub-merchant’s email address.  **Maximum length for processors**   - American Express Direct: 40  - CyberSource through VisaNet: 40  - FDC Compass: 40  - FDC Nashville Global: 19  #### CyberSource through VisaNet With American Express, the value for this field corresponds to the following data in the TC 33 capture file: - Record: CP01 TCRB - Position: 25-64 - Field: American Express Seller E-mail Address  **Note** The TC 33 Capture file contains information about the purchases and refunds that a merchant submits to CyberSource. CyberSource through VisaNet creates the TC 33 Capture file at the end of the day and sends it to the merchant’s acquirer, who uses this information to facilitate end-of-day clearing processing with payment card companies.
     */
    email?: string;
    /**
     * Sub-merchant’s telephone number.  **Maximum length for procesors**   - American Express Direct: 20  - CyberSource through VisaNet: 20  - FDC Compass: 13  - FDC Nashville Global: 10  #### CyberSource through VisaNet With American Express, the value for this field corresponds to the following data in the TC 33 capture file5: - Record: CP01 TCRB - Position: 5-24 - Field: American Express Seller Telephone Number  **FDC Compass**\\ This value must consist of uppercase characters. Use one of these recommended formats:\\ `NNN-NNN-NNNN`\\ `NNN-AAAAAAA`
     */
    phoneNumber?: string;
    /**
     * The ID you assigned to your sub-merchant. CyberSource through VisaNet: For American Express transaction, the value for this field corresponds to the following data in the TC 33 capture file: - Record: CP01 TCRB - Position: 65-84 - Field: American Express Seller ID For  Mastercard transactions, the value for this field corresponds to the following data in the TC 33 capture file: - Record: CP01 TCR6 - Position: 117-131 - Field: Mastercard Sub-Merchant ID FDC Compass: This value must consist of uppercase characters.  American Express Direct: String (20) CyberSource through VisaNet with American Express: String (20) CyberSource through VisaNet with Mastercard: String (15) FDC Compass: String (20) FDC Nashville Global: String (14)
     */
    id?: string;
  }
  export interface Ptsv2paymentsidcapturesBuyerInformation {
    /**
     * Your identifier for the customer.  When a subscription or customer profile is being created, the maximum length for this field for most processors is 30. Otherwise, the maximum length is 100.  #### Comercio Latino For recurring payments in Mexico, the value is the customer’s contract number. Note Before you request the authorization, you must inform the issuer of the customer contract numbers that will be used for recurring transactions.  #### Worldpay VAP For a follow-on credit with Worldpay VAP, CyberSource checks the following locations, in the order given, for a customer account ID value and uses the first value it finds: 1. `customer_account_id` value in the follow-on credit request 2. Customer account ID value that was used for the capture that is being credited 3. Customer account ID value that was used for the original authorization If a customer account ID value cannot be found in any of these locations, then no value is used.  For processor-specific information, see the `customer_account_id` field description in [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
     */
    merchantCustomerId?: string;
    /**
     * Customer’s government-assigned tax identification number.  #### Tax Calculation Optional for international and value added taxes only. Not applicable to U.S. and Canadian taxes.  For processor-specific information, see the purchaser_vat_registration_number field in [Level II and Level III Processing Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/Level_2_3_SCMP_API/html)
     */
    vatRegistrationNumber?: string;
  }
  export interface Ptsv2paymentsidcapturesDeviceInformation {
    /**
     * DNS resolved hostname from `ipAddress`.
     */
    hostName?: string;
    /**
     * IP address of the customer.  #### Used by **Authorization, Capture, and Credit** Optional field.
     */
    ipAddress?: string;
    /**
     * Customer’s browser as identified from the HTTP header data. For example, `Mozilla` is the value that identifies the Netscape browser.
     */
    userAgent?: string;
  }
  export interface Ptsv2paymentsidcapturesInstallmentInformation {
    /**
     * Amount for the current installment payment.  This field is supported only for CyberSource through VisaNet.  For details, see `installment_amount` field description in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
     */
    amount?: string;
    /**
     * Frequency of the installment payments. When you do not include this field in a request for a Crediario installment payment, CyberSource sends a space character to the processor.  For details, see `installment_frequency` field description in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  This field is supported only for CyberSource through VisaNet. Possible values: - `B`: Biweekly - `M`: Monthly - `W`: Weekly  For Crediario installment payments, the value for this field corresponds to the following data in the TC 33 capture file5: - Record: CP01 TCR9 - Position: 41 - Field: Installment Frequency  For details, see \"Installment Payments\" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
     */
    frequency?: string;
    /**
     * #### American Express Direct, Cielo, and CyberSource Latin American Processing Flag that indicates the type of funding for the installment plan associated with the payment.  Possible values: - `1`: Merchant-funded installment plan - `2`: Issuer-funded installment plan If you do not include this field in the request, CyberSource uses the value in your CyberSource account.  To change the value in your CyberSource account, contact CyberSource Customer Service. For details, see `installment_plan_type` field description in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  #### CyberSource through VisaNet and American Express Defined code that indicates the type of installment plan for this transaction.  Contact American Express for: - Information about the kinds of installment plans that American Express provides - Values for this field  For installment payments with American Express in Brazil, the value for this field corresponds to the following data in the TC 33 capture file*: - Record: CP07 TCR3 - Position: 5-6 - Field: Plan Type  * The TC 33 Capture file contains information about the purchases and refunds that a merchant submits to CyberSource. CyberSource through VisaNet creates the TC 33 Capture file at the end of the day and sends it to the merchant’s acquirer, who uses this information to facilitate end-of-day clearing processing with payment card companies.  #### CyberSource through VisaNet with Visa or Mastercard Flag indicating the type of funding for the installment plan associated with the payment. Possible values: - 1 or 01: Merchant-funded installment plan - 2 or 02: Issuer-funded installment plan - 43: Crediario installment plan—only with Visa in Brazil For details, see \"Installment Payments on CyberSource through VisaNet\" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  For installment payments with Visa in Brazil, the value for this field corresponds to the following data in the TC 33 capture file5: - Record: CP07 TCR1 - Position: 5-6 - Field: Installment Type  For all other kinds of installment payments, the value for this field corresponds to the following data in the TC 33 capture file5: - Record: CP01 TCR5 - Position: 39-40 - Field: Installment Plan Type (Issuer or Merchant)
     */
    planType?: string;
    /**
     * Installment number when making payments in installments. Used along with `totalCount` to track which payment is being processed.  For example, the second of 5 payments would be passed to CyberSource as `sequence` = 2 and `totalCount` = 5.  For details, see \"Installment Payments\" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  #### Chase Paymentech Solutions and FDC Compass This field is optional because this value is required in the merchant descriptors. For details, see \"Chase Paymentech Solutions Merchant Descriptors\" and \"FDC Compass Merchant Descriptors\" in the [Merchant Descriptors Using the SCMP API] (https://apps.cybersource.com/library/documentation/dev_guides/Merchant_Descriptors_SCMP_API/html/)  #### CyberSource through VisaNet When you do not include this field in a request for a Crediario installment payment, CyberSource sends a value of 0 to the processor.  For Crediario installment payments, the value for this field corresponds to the following data in the TC 33 capture file*: - Record: CP01 TCR9 - Position: 38-40 - Field: Installment Payment Number  * The TC 33 Capture file contains information about the purchases and refunds that a merchant submits to CyberSource. CyberSource through VisaNet creates the TC 33 Capture file at the end of the day and sends it to the merchant’s acquirer, who uses this information to facilitate end-of-day clearing processing with payment card companies.
     */
    sequence?: number;
    /**
     * Total amount of the loan that is being paid in installments. This field is supported only for CyberSource through VisaNet.  For details, see \"Installment Payments\" in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
     */
    totalAmount?: string;
    /**
     * Total number of installments when making payments in installments.  For details, see \"Installment Payments\" in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  #### Chase Paymentech Solutions and FDC Compass This field is optional because this value is required in the merchant descriptors.  For details, see \"Chase Paymentech Solutions Merchant Descriptors\" and \"FDC Compass Merchant Descriptors\" in the [Merchant Descriptors Using the SCMP API.] (https://apps.cybersource.com/library/documentation/dev_guides/Merchant_Descriptors_SCMP_API/html/)  #### American Express Direct, Cielo, and Comercio Latino This value is the total number of installments you approved.  #### CyberSource Latin American Processing in Brazil This value is the total number of installments that you approved. The default is 1.  #### All Other Processors This value is used along with _sequence_ to track which payment is being processed.  For example, the second of 5 payments would be passed to CyberSource as _sequence_ = 2 and _totalCount_ = 5.  #### CyberSource through VisaNet For Crediario installment payments, the value for this field corresponds to the following data in the TC 33 capture file*: - Record: CP01 TCR9 - Position: 23-25 - Field: Number of Installments  For installment payments with American Express in Brazil, the value for this field corresponds to the following data in the TC 33 capture file*: - Record: CP07 TCR3 - Position: 7-8 - Field: Number of Installments  For installment payments with Visa in Brazil, the value for this field corresponds to the following data in the TC 33 capture file*: - Record: CP07 TCR1 - Position: 7-8 - Field: Number of Installments  For all other kinds of installment payments, the value for this field corresponds to the following data in the TC 33 capture file*: - Record: CP01 TCR5 - Position: 20-22 - Field: Installment Total Count  **Note** The TC 33 Capture file contains information about the purchases and refunds that a merchant submits to CyberSource. CyberSource through VisaNet creates the TC 33 Capture file at the end of the day and sends it to the merchant’s acquirer, who uses this information to facilitate end-of-day clearing processing with payment card companies.
     */
    totalCount?: number;
    /**
     * Date of the first installment payment. Format: YYMMDD. When you do not include this field, CyberSource sends a string of six zeros (000000) to the processor. For details, see \"Installment Payments on CyberSource through VisaNet\" in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  This field is supported only for Crediario installment payments in Brazil on CyberSource through VisaNet.  The value for this field corresponds to the following data in the TC 33 capture file: - Record: CP01 TCR9 - Position: 42-47 - Field: Date of First Installment
     */
    firstInstallmentDate?: string;
    /**
     * Amount of the first installment payment. The issuer provides this value when the first installment payment is successful. This field is supported for Mastercard installment payments on CyberSource through VisaNet in all countries except Brazil,Croatia, Georgia, and Greece. The value for this field corresponds to the following data in the TC 33 capture file: - Record: CP01 TCR5 - Position: 23-34 - Field: Amount of Each Installment
     */
    firstInstallmentAmount?: string;
    /**
     * Invoice information that you want to provide to the issuer. This value is similar to a tracking number and is the same for all installment payments for one purchase.  This field is supported only for installment payments with Mastercard on CyberSource through VisaNet in Brazil.  For details, see \"Installment Payments on CyberSource through VisaNet\" in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  The value for this field corresponds to the following data in the TC 33 capture file5: - Record: CP07 TCR4 - Position: 51-70 - Field: Purchase Identification
     */
    invoiceData?: string;
    /**
     * Payment plan for the installments.  Possible values: - 0 (default): Regular installment. This value is not allowed for airline transactions. - 1: Installment payment with down payment. - 2: Installment payment without down payment. This value is supported only for airline transactions. - 3: Installment payment; down payment and boarding fee will follow. This value is supported only for airline transactions. - 4: Down payment only; regular installment payment will follow. - 5: Boarding fee only. This value is supported only for airline transactions.  This field is supported only for installment payments with Visa on CyberSource through VisaNet in Brazil.  For details, see \"Installment Payments on CyberSource through VisaNet\" in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  The value for this field corresponds to the following data in the TC 33 capture file5: - Record: CP07 TCR1 - Position: 9 - Field: Merchant Installment Supporting Information
     */
    paymentType?: string;
    /**
     * Additional costs charged by the issuer to fund the installment payments.  This field is included in the authorization reply for the Crediario eligibility request when the issuer approves the cardholder's request for Crediario installment payments in Brazil.  For details, see \"Installment Payments on CyberSource through VisaNet\" in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  This field is supported only for Crediario installment payments in Brazil on **CyberSource through VisaNet**.  The value for this field corresponds to the following data in the TC 33 capture file1: - Record: CP01 TCR9 - Position: 128-139 - Field: Total Other Costs
     */
    additionalCosts?: string;
    /**
     * Additional costs divided by the amount funded.  For example: - A value of 1.0 specifies 1%. - A value of 4.0 specifies 4%.  This field is included in the authorization reply for the Crediario eligibility request when the issuer approves the cardholder's request for Crediario installment payments in Brazil.  For details, see \"Installment Payments on CyberSource through VisaNet\" in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  This field is supported only for Crediario installment payments in Brazil on **CyberSource through VisaNet**.  The value for this field corresponds to the following data in the TC 33 capture file1: - Record: CP01 TCR9 - Position: 140-143 - Field: Percent of Total Other Costs
     */
    additionalCostsPercentage?: string;
    /**
     * Amount funded.  This field is included in the authorization reply for the Crediario eligibility request when the issuer approves the cardholder's request for Crediario installment payments in Brazil.  For details, see \"Installment Payments on CyberSource through VisaNet\" in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  This field is supported only for Crediario installment payments in Brazil on **CyberSource through VisaNet**.  The value for this field corresponds to the following data in the TC 33 capture file1: - Record: CP01 TCR9 - Position: 48-59 - Field: Total Amount Funded
     */
    amountFunded?: string;
    /**
     * Amount requested divided by the amount funded.  For example: - A value of 90.0 specifies 90%. - A value of 93.7 specifies 93.7%.  This field is included in the authorization reply for the Crediario eligibility request when the issuer approves the cardholder's request for Crediario installment payments in Brazil.  For details, see \"Installment Payments on CyberSource through VisaNet\" in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  This field is supported only for Crediario installment payments in Brazil on **CyberSource through VisaNet**.  The value for this field corresponds to the following data in the TC 33 capture file1: - Record: CP01 TCR9 - Position: 60-63 - Field: Percent of Amount Requested
     */
    amountRequestedPercentage?: string;
    /**
     * Annual cost of financing the installment payments.  This field is included in the authorization reply for the Crediario eligibility request when the issuer approves the cardholder's request for Crediario installment payments in Brazil.  For details, see \"Installment Payments on CyberSource through VisaNet\" in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  This field is supported only for Crediario installment payments in Brazil on **CyberSource through VisaNet**.  The value for this field corresponds to the following data in the TC 33 capture file1: - Record: CP01 TCR9 - Position: 158-164 - Field: Annual Total Cost of Financing
     */
    annualFinancingCost?: string;
    /**
     * Annual interest rate.  For example: - A value of 1.0 specifies 1%. - A value of 4.0 specifies 4%.  This field is included in the authorization reply for the Crediario eligibility request when the issuer approves the cardholder's request for Crediario installment payments in Brazil.  For details, see \"Installment Payments on CyberSource through VisaNet\" in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  This field is supported only for Crediario installment payments in Brazil on **CyberSource through VisaNet**.  The value for this field corresponds to the following data in the TC 33 capture file1: - Record: CP01 TCR9 - Position: 151-157 - Field: Annual Interest Rate
     */
    annualInterestRate?: string;
    /**
     * Expenses charged by the issuer to fund the installment payments.  This field is included in the authorization reply for the Crediario eligibility request when the issuer approves the cardholder's request for Crediario installment payments in Brazil.  For details, see \"Installment Payments on CyberSource through VisaNet\" in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  This field is supported only for Crediario installment payments in Brazil on **CyberSource through VisaNet**.  The value for this field corresponds to the following data in the TC 33 capture file1: - Record: CP01 TCR9 - Position: 64-75 - Field: Total Expenses
     */
    expenses?: string;
    /**
     * Expenses divided by the amount funded.  For example: - A value of 1.0 specifies 1%. - A value of 4.0 specifies 4%.  This field is included in the authorization reply for the Crediario eligibility request when the issuer approves the cardholder's request for Crediario installment payments in Brazil.  For details, see \"Installment Payments on CyberSource through VisaNet\" in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  This field is supported only for Crediario installment payments in Brazil on **CyberSource through VisaNet**.  The value for this field corresponds to the following data in the TC 33 capture file1: - Record: CP01 TCR9 - Position: 76-79 - Field: Percent of Total Expenses
     */
    expensesPercentage?: string;
    /**
     * Fees charged by the issuer to fund the installment payments.  This field is included in the authorization reply for the Crediario eligibility request when the issuer approves the cardholder's request for Crediario installment payments in Brazil.  For details, see \"Installment Payments on CyberSource through VisaNet\" in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  This field is supported only for Crediario installment payments in Brazil on **CyberSource through VisaNet**.  The value for this field corresponds to the following data in the TC 33 capture file1: - Record: CP01 TCR9 - Position: 80-91 - Field: Total Fees
     */
    fees?: string;
    /**
     * Fees divided by the amount funded.  For example: - A value of 1.0 specifies 1%. - A value of 4.0 specifies 4%.  This field is included in the authorization reply for the Crediario eligibility request when the issuer approves the cardholder's request for Crediario installment payments in Brazil.  For details, see \"Installment Payments on CyberSource through VisaNet\" in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  This field is supported only for Crediario installment payments in Brazil on CyberSource through VisaNet.  The value for this field corresponds to the following data in the TC 33 capture file1: - Record: CP01 TCR9 - Position: 92-95 - Field: Percent of Total Fees
     */
    feesPercentage?: string;
    /**
     * Insurance charged by the issuer to fund the installment payments.  This field is included in the authorization reply for the Crediario eligibility request when the issuer approves the cardholder's request for Crediario installment payments in Brazil.  For details, see \"Installment Payments on CyberSource through VisaNet\" in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  This field is supported only for Crediario installment payments in Brazil on **CyberSource through VisaNet**.  The value for this field corresponds to the following data in the TC 33 capture file1: - Record: CP01 TCR9 - Position: 112-123 - Field: Total Insurance
     */
    insurance?: string;
    /**
     * Insurance costs divided by the amount funded.  For example: - A value of 1.0 specifies 1%. - A value of 4.0 specifies 4%.  This field is included in the authorization reply for the Crediario eligibility request when the issuer approves the cardholder's request for Crediario installment payments in Brazil.  For details, see \"Installment Payments on CyberSource through VisaNet\" in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  This field is supported only for Crediario installment payments in Brazil on **CyberSource through VisaNet**.  The value for this field corresponds to the following data in the TC 33 capture file1: - Record: CP01 TCR9 - Position: 124-127 - Field: Percent Of Total Insurance
     */
    insurancePercentage?: string;
    /**
     * Monthly interest rate.  For example: - A value of 1.0 specifies 1%. - A value of 4.0 specifies 4%.  This field is included in the authorization reply for the Crediario eligibility request when the issuer approves the cardholder's request for Crediario installment payments in Brazil.  For details, see \"Installment Payments on CyberSource through VisaNet\" in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  This field is supported only for Crediario installment payments in Brazil on **CyberSource through VisaNet**.  The value for this field corresponds to the following data in the TC 33 capture file1: - Record: CP01 TCR9 - Position: 144-150 - Field: Monthly Interest Rate
     */
    monthlyInterestRate?: string;
    /**
     * Taxes collected by the issuer to fund the installment payments.  This field is included in the authorization reply for the Crediario eligibility request when the issuer approves the cardholder's request for Crediario installment payments in Brazil.  For details, see \"Installment Payments on CyberSource through VisaNet\" in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  This field is supported only for Crediario installment payments in Brazil on **CyberSource through VisaNet**.  The value for this field corresponds to the following data in the TC 33 capture file1: - Record: CP01 TCR9 - Position: 96-107 - Field: Total Taxes
     */
    taxes?: string;
    /**
     * Taxes divided by the amount funded.  For example: - A value of 1.0 specifies 1%. - A value of 4.0 specifies 4%.  This field is included in the authorization reply for the Crediario eligibility request when the issuer approves the cardholder's request for Crediario installment payments in Brazil.  For details, see \"Installment Payments on CyberSource through VisaNet\" in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  This field is supported only for Crediario installment payments in Brazil on **CyberSource through VisaNet**.  The value for this field corresponds to the following data in the TC 33 capture file1: - Record: CP01 TCR9 - Position: 108-111 - Field: Percent of Total Taxes
     */
    taxesPercentage?: string;
  }
  export interface Ptsv2paymentsidcapturesMerchantInformation {
    merchantDescriptor?: Ptsv2paymentsMerchantInformationMerchantDescriptor;
    /**
     * Reference number that facilitates card acceptor/corporation communication and record keeping.  For processor-specific information, see the `card_acceptor_ref_number` field description in [Level II and Level III Processing Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/Level_2_3_SCMP_API/html)
     */
    cardAcceptorReferenceNumber?: string;
    /**
     * The value for this field is a four-digit number that the payment card industry uses to classify merchants into market segments. A payment card company assigned one or more of these values to your business when you started accepting the payment card company’s cards. When you do not include this field in your request, CyberSource uses the value in your CyberSource account.  For processor-specific information, see the `merchant_category_code` field description in [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)  #### CyberSource through VisaNet The value for this field corresponds to the following data in the TC 33 capture file5: - Record: CP01 TCR4 - Position: 150-153 - Field: Merchant Category Code
     */
    categoryCode?: number;
    /**
     * Your government-assigned tax identification number.  #### Tax Calculation Required field for value added tax only. Not applicable to U.S. and Canadian taxes.  #### CyberSource through VisaNet For CtV processors, the maximum length is 20.  For other processor-specific information, see the `merchant_vat_registration_number` field description in [Level II and Level III Processing Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/Level_2_3_SCMP_API/html)
     */
    vatRegistrationNumber?: string;
    serviceFeeDescriptor?: Ptsv2paymentsMerchantInformationServiceFeeDescriptor;
    /**
     * Your Cadastro Nacional da Pessoa Jurídica (CNPJ) number.  This field is supported only for BNDES transactions on CyberSource through VisaNet.  The value for this field corresponds to the following data in the TC 33 capture file5: - Record: CP07 TCR6 - Position: 40-59 - Field: BNDES Reference Field 1  For details, see `bill_merchant_tax_id` field description in the [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
     */
    taxId?: string;
  }
  export interface Ptsv2paymentsidcapturesOrderInformation {
    amountDetails?: Ptsv2paymentsidcapturesOrderInformationAmountDetails;
    billTo?: Ptsv2paymentsidcapturesOrderInformationBillTo;
    shipTo?: Ptsv2paymentsidcapturesOrderInformationShipTo;
    lineItems?: Array<Ptsv2paymentsOrderInformationLineItems>;
    invoiceDetails?: Ptsv2paymentsidcapturesOrderInformationInvoiceDetails;
    shippingDetails?: Ptsv2paymentsidcapturesOrderInformationShippingDetails;
  }
  export interface Ptsv2paymentsidcapturesOrderInformationAmountDetails {
    /**
     * Grand total for the order. This value cannot be negative. You can include a decimal point (.), but no other special characters. CyberSource truncates the amount to the correct number of decimal places.  **Note** For CTV, FDCCompass, Paymentech processors, the maximum length for this field is 12.  **Important** Some processors have specific requirements and limitations, such as maximum amounts and maximum field lengths. For details, see: - \"Authorization Information for Specific Processors\" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/). - \"Capture Information for Specific Processors\" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/). - \"Credit Information for Specific Processors\" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/).  If your processor supports zero amount authorizations, you can set this field to 0 for the authorization to check if the card is lost or stolen. For details, see \"Zero Amount Authorizations,\" \"Credit Information for Specific Processors\" in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  #### Card Present Required to include either this field or `orderInformation.lineItems[].unitPrice` for the order.  #### Invoicing Required for creating a new invoice.  #### PIN Debit Amount you requested for the PIN debit purchase. This value is returned for partial authorizations. The issuing bank can approve a partial amount if the balance on the debit card is less than the requested transaction amount.  Required field for PIN Debit purchase and PIN Debit credit requests. Optional field for PIN Debit reversal requests.  #### GPX This field is optional for reversing an authorization or credit; however, for all other processors, these fields are required.  #### DCC with a Third-Party Provider Set this field to the converted amount that was returned by the DCC provider. You must include either this field or the 1st line item in the order and the specific line-order amount in your request. For details, see `grand_total_amount` field description in [Dynamic Currency Conversion For First Data Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/DCC_FirstData_SCMP/DCC_FirstData_SCMP_API.pdf).  #### FDMS South If you accept IDR or CLP currencies, see the entry for FDMS South in \"Authorization Information for Specific Processors\" of the [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  #### DCC for First Data Not used.
     */
    totalAmount?: number;
    /**
     * Currency used for the order. Use the three-character [ISO Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf)  #### Used by **Authorization** Required field.  **Authorization Reversal** For an authorization reversal (`reversalInformation`) or a capture (`processingOptions.capture` is set to `true`), you must use the same currency that you used in your payment authorization request.  #### PIN Debit Currency for the amount you requested for the PIN debit purchase. This value is returned for partial authorizations. The issuing bank can approve a partial amount if the balance on the debit card is less than the requested transaction amount. For the possible values, see the [ISO Standard Currency Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/currencies.pdf). Returned by PIN debit purchase.  For PIN debit reversal requests, you must use the same currency that was used for the PIN debit purchase or PIN debit credit that you are reversing. For the possible values, see the [ISO Standard Currency Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/currencies.pdf).  Required field for PIN Debit purchase and PIN Debit credit requests. Optional field for PIN Debit reversal requests.  #### GPX This field is optional for reversing an authorization or credit.  #### DCC for First Data Your local currency. For details, see the `currency` field description in [Dynamic Currency Conversion For First Data Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/DCC_FirstData_SCMP/DCC_FirstData_SCMP_API.pdf).  #### Tax Calculation Required for international tax and value added tax only. Optional for U.S. and Canadian taxes. Your local currency.
     */
    currency?: string;
    /**
     * Total discount amount applied to the order.
     */
    discountAmount?: number;
    /**
     * Total charges for any import or export duties included in the order.
     */
    dutyAmount?: string;
    /**
     * Gratuity or tip amount for restaurants when the card is present. Allowed only when `industryDatatype=restaurant`. When your customer uses a debit card or prepaid card, and you receive a partial authorization, the payment networks recommend that you do not submit a capture amount that is higher than the authorized amount. When the capture amount exceeds the partial amount that was approved, the issuer has chargeback rights for the excess amount.  #### Used by **Capture** Optional field.  #### CyberSource through VisaNet Restaurant data is supported only on CyberSource through VisaNet.
     */
    gratuityAmount?: string;
    /**
     * Total tax amount for all the items in the order.
     */
    taxAmount?: string;
    /**
     * Flag that indicates whether a national tax is included in the order total.  Possible values:   - **0**: national tax not included  - **1**: national tax included
     */
    nationalTaxIncluded?: string;
    /**
     * Flag that indicates how the merchant manages discounts.  Possible values:   - **0**: no invoice level discount included  - **1**: tax calculated on the postdiscount invoice total  - **2**: tax calculated on the prediscount invoice total
     */
    taxAppliedAfterDiscount?: string;
    /**
     * Flag that indicates how you calculate tax.  Possible values:   - **0**: net prices with tax calculated at line item level  - **1**: net prices with tax calculated at invoice level  - **2**: gross prices with tax provided at line item level  - **3**: gross prices with tax provided at invoice level  - **4**: no tax applies on the invoice for the transaction
     */
    taxAppliedLevel?: string;
    /**
     * For tax amounts that can be categorized as one tax type.  This field contains the tax type code that corresponds to the entry in the _lineItems.taxAmount_ field.  Possible values:   - **056**: sales tax (U.S only)  - **TX~**: all taxes (Canada only)   Note ~ = space.
     */
    taxTypeCode?: string;
    /**
     * Total freight or shipping and handling charges for the order. When you include this field in your request, you must also include the **totalAmount** field.  For processor-specific information, see the freight_amount field in [Level II and Level III Processing Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/Level_2_3_SCMP_API/html)
     */
    freightAmount?: string;
    /**
     * Set this field to the converted amount that was returned by the DCC provider. For processor-specific information, see the `foreign_amount` field description in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
     */
    foreignAmount?: string;
    /**
     * Set this field to the converted amount that was returned by the DCC provider.
     */
    foreignCurrency?: string;
    /**
     * Exchange rate returned by the DCC service. Includes a decimal point and a maximum of 4 decimal places.  For details, see `exchange_rate` request-level field description in the [Dynamic Currency Conversion For First Data Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/DCC_FirstData_SCMP/DCC_FirstData_SCMP_API.pdf)
     */
    exchangeRate?: string;
    /**
     * Time stamp for the exchange rate. This value is returned by the DCC service.  Format: `YYYYMMDD~HH:MM`  where ~ denotes a space.
     */
    exchangeRateTimeStamp?: string;
    amexAdditionalAmounts?: Array<Ptsv2paymentsOrderInformationAmountDetailsAmexAdditionalAmounts>;
    taxDetails?: Array<Ptsv2paymentsOrderInformationAmountDetailsTaxDetails>;
    /**
     * Service fee. Required for service fee transactions.
     */
    serviceFeeAmount?: string;
    /**
     * Your local pricing currency code.  For the possible values, see the [ISO Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf)
     */
    originalCurrency?: string;
    /**
     * Cashback amount in the acquirer’s currency. If a cashback amount is included in the request, it must be included in the `orderInformation.amountDetails.totalAmount` value.  This field is supported only on CyberSource through VisaNet.  #### Used by **Authorization** Optional. **Authorization Reversal** Optional.  #### PIN debit Required field for PIN debit purchase, PIN debit credit or PIN debit reversal.
     */
    cashbackAmount?: string;
  }
  export interface Ptsv2paymentsidcapturesOrderInformationBillTo {
    /**
     * Customer’s first name. This name must be the same as the name on the card.  **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  #### CyberSource Latin American Processing **Important** For an authorization request, CyberSource Latin American Processing concatenates `orderInformation.billTo.firstName` and `orderInformation.billTo.lastName`. If the concatenated value exceeds 30 characters, CyberSource Latin American Processing declines the authorization request.\\ **Note** CyberSource Latin American Processing is the name of a specific processing connection that CyberSource supports. In the CyberSource API documentation, CyberSource Latin American Processing does not refer to the general topic of processing in Latin America. The information in this field description is for the specific processing connection called _CyberSource Latin American Processing_. It is not for any other Latin American processors that CyberSource supports.  #### CyberSource through VisaNet Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  #### For Payouts: This field may be sent only for FDC Compass.  #### Chase Paymentech Solutions Optional field.  ####  Credit Mutuel-CIC Optional field.  #### OmniPay Direct Optional field.  #### SIX Optional field.  #### TSYS Acquiring Solutions Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.  #### Worldpay VAP Optional field.  #### All other processors Not used.
     */
    firstName?: string;
    /**
     * Customer’s last name. This name must be the same as the name on the card.  **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  #### Chase Paymentech Solutions Optional field.  ####  Credit Mutuel-CIC Optional field.  #### CyberSource Latin American Processing **Important** For an authorization request, CyberSource Latin American Processing concatenates `orderInformation.billTo.firstName` and `orderInformation.billTo.lastName`. If the concatenated value exceeds 30 characters, CyberSource Latin American Processing declines the authorization request.\\ **Note** CyberSource Latin American Processing is the name of a specific processing connection that CyberSource supports. In the CyberSource API documentation, CyberSource Latin American Processing does not refer to the general topic of processing in Latin America. The information in this field description is for the specific processing connection called CyberSource Latin American Processing. It is not for any other Latin American processors that CyberSource supports.  #### CyberSource through VisaNet Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  #### For Payouts: This field may be sent only for FDC Compass.  #### OmniPay Direct Optional field.  #### RBS WorldPay Atlanta Optional field.  #### SIX Optional field.  #### TSYS Acquiring Solutions Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.  #### Worldpay VAP Optional field.  #### All other processors Not used.
     */
    lastName?: string;
    company?: Ptsv2paymentsOrderInformationBillToCompany;
    /**
     * Payment card billing street address as it appears on the credit card issuer’s records.  #### Atos This field must not contain colons (:).  #### CyberSource through VisaNet **Important** When you populate orderInformation.billTo.address1 and orderInformation.billTo.address2, CyberSource through VisaNet concatenates the two values. If the concatenated value exceeds 40 characters, CyberSource through VisaNet truncates the value at 40 characters before sending it to Visa and the issuing bank. Truncating this value affects AVS results and therefore might also affect risk decisions and chargebacks. Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  #### FDMS Nashville When the street name is numeric, it must be sent in numeric format. For example, if the address is _One First Street_, it must be sent as _1 1st Street_.  Required if keyed; not used if swiped.  String (20)  #### TSYS Acquiring Solutions Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.  #### All other processors: Optional. String (60)  #### For Payouts This field may be sent only for FDC Compass.  **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
     */
    address1?: string;
    /**
     * Used for additional address information. For example: _Attention: Accounts Payable_ Optional field.  For Payouts: This field may be sent only for FDC Compass.  #### Atos This field must not contain colons (:).  #### CyberSource through VisaNet **Important** When you populate `orderInformation.billTo.address1` and `orderInformation.billTo.address2`, CyberSource through VisaNet concatenates the two values. If the concatenated value exceeds 40 characters, CyberSource through VisaNet truncates the value at 40 characters before sending it to Visa and the issuing bank. Truncating this value affects AVS results and therefore might also affect risk decisions and chargebacks. Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  #### Chase Paymentech Solutions, FDC Compass, and TSYS Acquiring Solutions This value is used for AVS.  #### FDMS Nashville `orderInformation.billTo.address1` and `orderInformation.billTo.address2` together cannot exceed 20 characters. String (20)  #### All Other Processors String (60)
     */
    address2?: string;
    /**
     * Payment card billing city.  #### Atos This field must not contain colons (:).  #### CyberSource through VisaNet Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  #### For Payouts: This field may be sent only for FDC Compass.  #### Chase Paymentech Solutions Optional field.  ####  Credit Mutuel-CIC Optional field.  #### OmniPay Direct Optional field.  #### SIX Optional field.  #### TSYS Acquiring Solutions Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.  #### Worldpay VAP Optional field.  #### All other processors Not used.
     */
    locality?: string;
    /**
     * State or province of the billing address. Use the [State, Province, and Territory Codes for the United States and Canada](https://developer.cybersource.com/library/documentation/sbc/quickref/states_and_provinces.pdf).  For Payouts: This field may be sent only for FDC Compass.  ##### CyberSource through VisaNet Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  #### Chase Paymentech Solutions Optional field.  ####  Credit Mutuel-CIC Optional field.  #### OmniPay Direct Optional field.  #### SIX Optional field.  #### TSYS Acquiring Solutions Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.  #### Worldpay VAP Optional field.  #### All other processors Not used.
     */
    administrativeArea?: string;
    /**
     * Postal code for the billing address. The postal code must consist of 5 to 9 digits.  When the billing country is the U.S., the 9-digit postal code must follow this format: [5 digits][dash][4 digits]  **Example** `12345-6789`  When the billing country is Canada, the 6-digit postal code must follow this format: [alpha][numeric][alpha][space][numeric][alpha][numeric]  **Example** `A1B 2C3`  **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  #### For Payouts:  This field may be sent only for FDC Compass.  #### American Express Direct Before sending the postal code to the processor, CyberSource removes all nonalphanumeric characters and, if the remaining value is longer than nine characters, truncates the value starting from the right side.  #### Atos This field must not contain colons (:).  #### CyberSource through VisaNet Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  #### FDMS Nashville Required if `pointOfSaleInformation.entryMode=keyed` and the address is in the U.S. or Canada. Optional if `pointOfSaleInformation.entryMode=keyed` and the address is **not** in the U.S. or Canada. Not used if swiped.  #### RBS WorldPay Atlanta: For best card-present keyed rates, send the postal code if `pointOfSaleInformation.entryMode=keyed`.  #### TSYS Acquiring Solutions Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.  #### All other processors: Optional field.
     */
    postalCode?: string;
    /**
     * Payment card billing country. Use the two-character [ISO Standard Country Codes](http://apps.cybersource.com/library/documentation/sbc/quickref/countries_alpha_list.pdf).  #### CyberSource through VisaNet Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  #### Chase Paymentech Solutions Optional field.  ####  Credit Mutuel-CIC Optional field.  #### OmniPay Direct Optional field.  #### SIX Optional field.  #### TSYS Acquiring Solutions Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.  #### Worldpay VAP Optional field.  #### All other processors Not used.
     */
    country?: string;
    /**
     * Customer's email address, including the full domain name.  #### CyberSource through VisaNet Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  For processor-specific information, see the `customer_email` request-level field description in [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)  #### Invoicing Email address for the customer for sending the invoice. If the invoice is in SENT status and email is updated, the old email customer payment link won't work and you must resend the invoice with the new payment link.  #### Chase Paymentech Solutions Optional field.  ####  Credit Mutuel-CIC Optional field.  #### OmniPay Direct Optional field.  #### SIX Optional field.  #### TSYS Acquiring Solutions Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.  #### Worldpay VAP Optional field.  #### All other processors Not used.
     */
    email?: string;
    /**
     * Customer’s phone number.  It is recommended that you include the country code when the order is from outside the U.S.  #### Chase Paymentech Solutions Optional field.  ####  Credit Mutuel-CIC Optional field.  #### CyberSource through VisaNet Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  #### For Payouts: This field may be sent only for FDC Compass.  #### OmniPay Direct Optional field.  #### SIX Optional field.  #### TSYS Acquiring Solutions Optional field.  #### Worldpay VAP Optional field.  #### All other processors Not used.
     */
    phoneNumber?: string;
  }
  export interface Ptsv2paymentsidcapturesOrderInformationInvoiceDetails {
    /**
     * Value used by your customer to identify the order. This value is typically a purchase order number. CyberSource recommends that you do not populate the field with all zeros or nines.  For processor-specific information, see the `user_po` field in [Level II and Level III Processing Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/Level_2_3_SCMP_API/html)
     */
    purchaseOrderNumber?: string;
    /**
     * Date the order was processed. `Format: YYYY-MM-DD`.  For processor-specific information, see the `purchaser_order_date` field in [Level II and Level III Processing Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/Level_2_3_SCMP_API/html)
     */
    purchaseOrderDate?: string;
    /**
     * The name of the individual or the company contacted for company authorized purchases.  For processor-specific information, see the `authorized_contact_name` field in [Level II and Level III Processing Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/Level_2_3_SCMP_API/html)
     */
    purchaseContactName?: string;
    /**
     * Flag that indicates whether an order is taxable. This value must be true if the sum of all _lineItems[].taxAmount_ values > 0.  If you do not include any `lineItems[].taxAmount` values in your request, CyberSource does not include `invoiceDetails.taxable` in the data it sends to the processor.  For processor-specific information, see the `tax_indicator` field in [Level II and Level III Processing Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/Level_2_3_SCMP_API/html)  Possible values:  - **true**  - **false**
     */
    taxable?: boolean;
    /**
     * VAT invoice number associated with the transaction.  For processor-specific information, see the `vat_invoice_ref_number` field in [Level II and Level III Processing Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/Level_2_3_SCMP_API/html)
     */
    vatInvoiceReferenceNumber?: string;
    /**
     * International description code of the overall order’s goods or services or the Categorizes purchases for VAT reporting. Contact your acquirer for a list of codes.  For processor-specific information, see the `summary_commodity_code` field in [Level II and Level III Processing Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/Level_2_3_SCMP_API/html)
     */
    commodityCode?: string;
    transactionAdviceAddendum?: Array<Ptsv2paymentsOrderInformationInvoiceDetailsTransactionAdviceAddendum>;
  }
  export interface Ptsv2paymentsidcapturesOrderInformationShipTo {
    /**
     * State or province of the shipping address. Use the [State, Province, and Territory Codes for the United States and Canada](https://developer.cybersource.com/library/documentation/sbc/quickref/states_and_provinces.pdf)  Required field for authorization if any shipping address information is included in the request and shipping to the U.S. or Canada; otherwise, optional.  #### Tax Calculation Optional field for U.S. and Canadian taxes. Not applicable to international and value added taxes. Billing address objects will be used to determine the cardholder’s location when shipTo objects are not present.
     */
    administrativeArea?: string;
    /**
     * Country of the shipping address. Use the two-character [ISO Standard Country Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/countries_alpha_list.pdf)  Required field for authorization if any shipping address information is included in the request; otherwise, optional.  #### Tax Calculation Optional field for U.S., Canadian, international tax, and value added taxes. Billing address objects will be used to determine the cardholder’s location when shipTo objects are not present.
     */
    country?: string;
    /**
     * Postal code for the shipping address. The postal code must consist of 5 to 9 digits.  Required field for authorization if any shipping address information is included in the request and shipping to the U.S. or Canada; otherwise, optional.  When the billing country is the U.S., the 9-digit postal code must follow this format: [5 digits][dash][4 digits]  Example 12345-6789  When the billing country is Canada, the 6-digit postal code must follow this format: [alpha][numeric][alpha][space][numeric][alpha][numeric]  Example A1B 2C3  #### American Express Direct Before sending the postal code to the processor, all nonalphanumeric characters are removed and, if the remaining value is longer than nine characters, the value is truncated starting from the right side. #### Tax Calculation Optional field for U.S. and Canadian taxes. Not applicable to international and value added taxes. Billing address objects will be used to determine the cardholder’s location when shipTo objects are not present.
     */
    postalCode?: string;
  }
  export interface Ptsv2paymentsidcapturesOrderInformationShippingDetails {
    /**
     * Postal code for the address from which the goods are shipped, which is used to establish nexus. The default is the postal code associated with your CyberSource account.  The postal code must consist of 5 to 9 digits. When the billing country is the U.S., the 9-digit postal code must follow this format:  `[5 digits][dash][4 digits]`  Example 12345-6789  When the billing country is Canada, the 6-digit postal code must follow this format:  `[alpha][numeric][alpha][space] [numeric][alpha][numeric]`  Example A1B 2C3  This field is frequently used for Level II and Level III transactions.
     */
    shipFromPostalCode?: string;
  }
  export interface Ptsv2paymentsidcapturesPaymentInformation {
    customer?: Ptsv2paymentsPaymentInformationCustomer;
    card?: Ptsv2paymentsidcapturesPaymentInformationCard;
  }
  export interface Ptsv2paymentsidcapturesPaymentInformationCard {
    /**
     * Flag that specifies the type of account associated with the card. The cardholder provides this information during the payment process.  This field is required in the following cases:   - Debit transactions on Cielo and Comercio Latino.   - Transactions with Brazilian-issued cards on CyberSource through VisaNet.   - Applicable only for CyberSource through VisaNet (CtV).      **Note** Combo cards in Brazil contain credit and debit functionality in a single card. Visa systems use a credit bank identification number (BIN) for this type of card. Using the BIN to determine whether a card is debit or credit can cause transactions with these cards to be processed incorrectly. CyberSource strongly recommends that you include this field for combo card transactions.  Possible values include the following.   - `CHECKING`: Checking account  - `CREDIT`: Credit card account  - `SAVING`: Saving account  - `LINE_OF_CREDIT`: Line of credit or credit portion of combo card  - `PREPAID`: Prepaid card account or prepaid portion of combo card  - `UNIVERSAL`: Universal account
     */
    sourceAccountType?: string;
    /**
     * Type of account that is being used when the value for the override_payment_method field is line of credit (LI) or prepaid card (PP). Possible values for line of credit: - `AGRC`: Visa Agro Custeio - `AGRE`: Visa Agro Electron - `AGRI`: Visa Agro Investimento - `AGRO`: Visa Agro Possible values for prepaid card: - `VVA`: Visa Vale Alimentacao - `VVF`: Visa Vale Flex - `VVR`: Visa Vale Refeicao This field is supported only for combo card transactions in Brazil on CyberSource through VisaNet.
     */
    sourceAccountTypeDetails?: string;
  }
  export interface Ptsv2paymentsidcapturesPointOfSaleInformation {
    emv?: Ptsv2paymentsidcapturesPointOfSaleInformationEmv;
    /**
     * Point-of-sale details for the transaction. This value is returned only for **American Express Direct**. CyberSource generates this value, which consists of a series of codes that identify terminal capability, security data, and specific conditions present at the time the transaction occurred. To comply with the CAPN requirements, this value must be included in all subsequent follow-on requests, such as captures and follow-on credits.  When you perform authorizations, captures, and credits through CyberSource, CyberSource passes this value from the authorization service to the subsequent services for you. However, when you perform authorizations through CyberSource and perform subsequent services through other financial institutions, you must ensure that your requests for captures and credits include this value.  For details, see `auth_pos_data` field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
     */
    amexCapnData?: string;
  }
  export interface Ptsv2paymentsidcapturesPointOfSaleInformationEmv {
    /**
     * EMV data that is transmitted from the chip card to the issuer, and from the issuer to the chip card. The EMV data is in the tag-length-value format and includes chip card tags, terminal tags, and transaction detail tags.  For information about the individual tags, see the “Application Specification” section in the EMV 4.3 Specifications: http://emvco.com  **Note** Card present information about EMV applies only to credit card processing and PIN debit processing. All other card present information applies only to credit card processing. PIN debit processing is available only on FDC Nashville Global.  **Important** The following tags contain sensitive information and **must not** be included in this field:   - `56`: Track 1 equivalent data  - `57`: Track 2 equivalent data  - `5A`: Application PAN  - `5F20`: Cardholder name  - `5F24`: Application expiration date (This sensitivity has been relaxed for Credit Mutuel-CIC, American Express Direct, FDC Nashville Global, First Data Merchant Solutions, and SIX)  - `99`: Transaction PIN  - `9F0B`: Cardholder name (extended)  - `9F1F`: Track 1 discretionary data  - `9F20`: Track 2 discretionary data  For captures, this field is required for contact EMV transactions. Otherwise, it is optional.  For credits, this field is required for contact EMV stand-alone credits and contactless EMV stand-alone credits. Otherwise, it is optional.  **Important** For contact EMV captures, contact EMV stand-alone credits, and contactless EMV stand-alone credits, you must include the following tags in this field. For all other types of EMV transactions, the following tags are optional.   - `95`: Terminal verification results  - `9F10`: Issuer application data  - `9F26`: Application cryptogram   #### CyberSource through VisaNet - In Japan: 199 bytes - In other countries: String (252)  #### GPX This field only supports transactions from the following card types: - Visa - Mastercard - AMEX - Discover - Diners - JCB - Union Pay International  #### JCN Gateway The following tags must be included: - `4F`: Application identifier - `84`: Dedicated file name  Data length: 199 bytes  #### All other processors: String (999)  #### Used by Authorization: Optional Authorization Reversal: Optional Credit: Optional PIN Debit processing (purchase, credit and reversal): Optional
     */
    tags?: string;
    /**
     * Indicates whether a fallback method was used to enter credit card information into the POS terminal. When a technical problem prevents a successful exchange of information between a chip card and a chip-capable terminal:   1. Swipe the card or key the credit card information into the POS terminal.  2. Use the pointOfSaleInformation.entryMode field to indicate whether the information was swiped or keyed.   Possible values: - `true`: Fallback method was used. - `false` (default): Fallback method was not used.  This field is supported only on American Express Direct, Chase Paymentech Solutions, CyberSource through VisaNet, FDC Nashville Global, GPN, JCN Gateway, OmniPay Direct, and SIX.
     */
    fallback?: boolean;
  }
  export interface Ptsv2paymentsidcapturesProcessingInformation {
    /**
     * Type of digital payment solution for the transaction. Possible Values:   - `visacheckout`: Visa Checkout. This value is required for Visa Checkout transactions. For details, see `payment_solution` field description in [Visa Checkout Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/VCO_SCMP_API/html/)  - `001`: Apple Pay.  - `004`: Cybersource In-App Solution.  - `005`: Masterpass. This value is required for Masterpass transactions on OmniPay Direct. For details, see \"Masterpass\" in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  - `006`: Android Pay.  - `007`: Chase Pay.  - `008`: Samsung Pay.  - `012`: Google Pay.
     */
    paymentSolution?: string;
    /**
     * Please check with Cybersource customer support to see if your merchant account is configured correctly so you can include this field in your request. * For Payouts: max length for FDCCompass is String (22).
     */
    reconciliationId?: string;
    /**
     * Value that links the current authorization request to the original authorization request. Set this value to the ID that was returned in the reply message from the original authorization request.  This value is used for:  - Partial authorizations - Split shipments  For details, see `link_to_request` field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
     */
    linkId?: string;
    /**
     * Attribute that lets you define custom grouping for your processor reports. This field is supported only for **Worldpay VAP**.  For details, see `report_group` field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
     */
    reportGroup?: string;
    /**
     * Identifier for the **Visa Checkout** order. Visa Checkout provides a unique order ID for every transaction in the Visa Checkout **callID** field.
     */
    visaCheckoutId?: string;
    /**
     * Set this field to 3 to indicate that the request includes Level III data.
     */
    purchaseLevel?: string;
    /**
     * Indicates that the transaction includes industry-specific data.  Possible Values: - `airline` - `restaurant` - `lodging` - `auto_rental` - `transit` - `healthcare_medical` - `healthcare_transit` - `transit`  #### Card Present, Airlines and Auto Rental You must set this field to `airline` in order for airline data to be sent to the processor. For example, if this field is not set to `airline` or is not included in the request, no airline data is sent to the processor.  You must set this field to `restaurant` in order for restaurant data to be sent to the processor. When this field is not set to `restaurant` or is not included in the request, no restaurant data is sent to the processor.  You must set this field to `auto_rental` in order for auto rental data to be sent to the processor. For example, if this field is not set to `auto_rental` or is not included in the request, no auto rental data is sent to the processor.  Restaurant data is supported only on CyberSource through VisaNet.
     */
    industryDataType?: string;
    issuer?: Ptsv2paymentsIssuerInformation;
    authorizationOptions?: Ptsv2paymentsidcapturesProcessingInformationAuthorizationOptions;
    captureOptions?: Ptsv2paymentsidcapturesProcessingInformationCaptureOptions;
    loanOptions?: Ptsv2paymentsProcessingInformationLoanOptions;
  }
  export interface Ptsv2paymentsidcapturesProcessingInformationAuthorizationOptions {
    /**
     * Authorization type. Possible values:   - `AUTOCAPTURE`: automatic capture.  - `STANDARDCAPTURE`: standard capture.  - `VERBAL`: forced capture. Include it in the payment request for a forced capture. Include it in the capture request for a verbal payment.  #### Asia, Middle East, and Africa Gateway; Cielo; Comercio Latino; and CyberSource Latin American Processing Set this field to `AUTOCAPTURE` and include it in a bundled request to indicate that you are requesting an automatic capture. If your account is configured to enable automatic captures, set this field to `STANDARDCAPTURE` and include it in a standard authorization or bundled request to indicate that you are overriding an automatic capture. For more information, see the `auth_type` field description in [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  #### Forced Capture Set this field to `VERBAL` and include it in the authorization request to indicate that you are performing a forced capture; therefore, you receive the authorization code outside the CyberSource system.  #### Verbal Authorization Set this field to `VERBAL` and include it in the capture request to indicate that the request is for a verbal authorization. For more information, see \"Verbal Authorizations\" in [Credit Card Services Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html).
     */
    authType?: string;
    /**
     * Authorization code.  #### Forced Capture Use this field to send the authorization code you received from a payment that you authorized outside the CyberSource system.  #### PIN debit Authorization code that is returned by the processor.  Returned by PIN debit purchase.  #### Verbal Authorization Use this field in CAPTURE API to send the verbally received authorization code.  For processor-specific information, see the `auth_code` field description in [Credit Card Services Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html).
     */
    verbalAuthCode?: string;
    /**
     * Transaction ID (TID).  #### FDMS South This field is required for verbal authorizations and forced captures with the American Express card type to comply with the CAPN requirements: - Forced capture: Obtain the value for this field from the authorization response. - Verbal authorization: You cannot obtain a value for this field so CyberSource uses the default value of `000000000000000` (15 zeros).
     */
    verbalAuthTransactionId?: string;
  }
  export interface Ptsv2paymentsidcapturesProcessingInformationCaptureOptions {
    /**
     * Capture number when requesting multiple partial captures for one authorization. Used along with `totalCaptureCount` to track which capture is being processed.  For example, the second of five captures would be passed to CyberSource as:   - `captureSequenceNumber_ = 2`, and   - `totalCaptureCount = 5`
     */
    captureSequenceNumber?: number;
    /**
     * Total number of captures when requesting multiple partial captures for one payment. Used along with `captureSequenceNumber` field to track which capture is being processed.  For example, the second of five captures would be passed to CyberSource as:   - `captureSequenceNumber = 2`, and   - `totalCaptureCount = 5`
     */
    totalCaptureCount?: number;
  }
  export interface Ptsv2paymentsidrefundsMerchantInformation {
    merchantDescriptor?: Ptsv2paymentsMerchantInformationMerchantDescriptor;
    /**
     * The value for this field is a four-digit number that the payment card industry uses to classify merchants into market segments. A payment card company assigned one or more of these values to your business when you started accepting the payment card company’s cards. When you do not include this field in your request, CyberSource uses the value in your CyberSource account.  For processor-specific information, see the `merchant_category_code` field description in [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)  #### CyberSource through VisaNet The value for this field corresponds to the following data in the TC 33 capture file5: - Record: CP01 TCR4 - Position: 150-153 - Field: Merchant Category Code
     */
    categoryCode?: number;
    /**
     * Your government-assigned tax identification number.  #### Tax Calculation Required field for value added tax only. Not applicable to U.S. and Canadian taxes.  #### CyberSource through VisaNet For CtV processors, the maximum length is 20.  For other processor-specific information, see the `merchant_vat_registration_number` field description in [Level II and Level III Processing Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/Level_2_3_SCMP_API/html)
     */
    vatRegistrationNumber?: string;
    /**
     * Reference number that facilitates card acceptor/corporation communication and record keeping.  For processor-specific information, see the `card_acceptor_ref_number` field description in [Level II and Level III Processing Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/Level_2_3_SCMP_API/html)
     */
    cardAcceptorReferenceNumber?: string;
    /**
     * Your Cadastro Nacional da Pessoa Jurídica (CNPJ) number.  This field is supported only for BNDES transactions on CyberSource through VisaNet.  The value for this field corresponds to the following data in the TC 33 capture file5: - Record: CP07 TCR6 - Position: 40-59 - Field: BNDES Reference Field 1  For details, see `bill_merchant_tax_id` field description in the [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
     */
    taxId?: string;
  }
  export interface Ptsv2paymentsidrefundsOrderInformation {
    amountDetails?: Ptsv2paymentsidcapturesOrderInformationAmountDetails;
    billTo?: Ptsv2paymentsidcapturesOrderInformationBillTo;
    shipTo?: Ptsv2paymentsidcapturesOrderInformationShipTo;
    lineItems?: Array<Ptsv2paymentsidrefundsOrderInformationLineItems>;
    invoiceDetails?: Ptsv2paymentsidcapturesOrderInformationInvoiceDetails;
    shippingDetails?: Ptsv2paymentsidcapturesOrderInformationShippingDetails;
  }
  export interface Ptsv2paymentsidrefundsOrderInformationLineItems {
    /**
     * Type of product. The value for this field is used to identify the product category (electronic, handling, physical, service, or shipping). The default value is `default`.  If you are performing an authorization transaction (`processingOptions.capture` is set to `false`), and you set this field to a value other than `default` or one of the values related to shipping and/or handling, then `orderInformation.lineItems[].quantity`, `orderInformation.lineItems[].productName`, and `orderInformation.lineItems[].productSku` fields are required.  Optional field.  For details, see the `product_code` field description in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/).  #### Tax Calculation Optional field for U.S., Canadian, international tax, and value added taxes.  To use the tax calculation service, use values listed in the Tax Product Code Guide. For information about this document, contact customer support. See \"Product Codes,\" page 14, for more information.
     */
    productCode?: string;
    /**
     * For an authorization or capture transaction (`processingOptions.capture` is `true` or `false`), this field is required when `orderInformation.lineItems[].productCode` is not `default` or one of the other values that are related to shipping and/or handling.  #### Tax Calculation Optional field for U.S., Canadian, international tax, and value added taxes.
     */
    productName?: string;
    /**
     * Product identifier code. Also known as the Stock Keeping Unit (SKU) code for the product.  For an authorization or capture transaction (`processingOptions.capture` is set to `true` or `false`), this field is required when `orderInformation.lineItems[].productCode` is not set to **default** or one of the other values that are related to shipping and/or handling.  #### Tax Calculation Optional field for U.S. and Canadian taxes. Not applicable to international and value added taxes. For an authorization or capture transaction (`processingOptions.capture` is set to `true` or `false`), this field is required when `orderInformation.lineItems[].productCode` is not `default` or one of the values related to shipping and/or handling.
     */
    productSku?: string;
    /**
     * Number of units for this order. Must be a non-negative integer.  The default is `1`. For an authorization or capture transaction (`processingOptions.capture` is set to `true` or `false`), this field is required when `orderInformation.lineItems[].productCode` is not `default` or one of the other values related to shipping and/or handling.  #### Tax Calculation Optional field for U.S., Canadian, international tax, and value added taxes.
     */
    quantity?: number;
    /**
     * Per-item price of the product. This value for this field cannot be negative.  You must include either this field or the request-level field `orderInformation.amountDetails.totalAmount` in your request.  You can include a decimal point (.), but you cannot include any other special characters. The value is truncated to the correct number of decimal places.  #### DCC with a Third-Party Provider Set this field to the converted amount that was returned by the DCC provider. You must include either the 1st line item in the order and this field, or the request-level field `orderInformation.amountDetails.totalAmount` in your request.  #### FDMS South If you accept IDR or CLP currencies, see the entry for FDMS South in the [Merchant Descriptors Using the SCMP API Guide.] (https://apps.cybersource.com/library/documentation/dev_guides/Merchant_Descriptors_SCMP_API/html/)  #### Tax Calculation Required field for U.S., Canadian, international and value added taxes.  #### Zero Amount Authorizations If your processor supports zero amount authorizations, you can set this field to 0 for the authorization to check if the card is lost or stolen.  #### Maximum Field Lengths For GPN and JCN Gateway: Decimal (10) All other processors: Decimal (15)
     */
    unitPrice?: number;
    /**
     * Unit of measure, or unit of measure code, for the item.
     */
    unitOfMeasure?: string;
    /**
     * Total amount for the item. Normally calculated as the unit price times quantity.  When `orderInformation.lineItems[].productCode` is \"gift_card\", this is the purchase amount total for prepaid gift cards in major units.  Example: 123.45 USD = 123
     */
    totalAmount?: string;
    /**
     * Total tax to apply to the product. This value cannot be negative. The tax amount and the offer amount must be in the same currency. The tax amount field is additive.  The following example uses a two-exponent currency such as USD:   1. You include each line item in your request.  ..- 1st line item has amount=10.00, quantity=1, and taxAmount=0.80  ..- 2nd line item has amount=20.00, quantity=1, and taxAmount=1.60  2. The total amount authorized will be 32.40, not 30.00 with 2.40 of tax included.  Optional field.  #### Airlines processing Tax portion of the order amount. This value cannot exceed 99999999999999 (fourteen 9s). Format: English characters only. Optional request field for a line item.  #### Tax Calculation Optional field for U.S., Canadian, international tax, and value added taxes.  Note if you send this field in your tax request, the value in the field will override the tax engine
     */
    taxAmount?: string;
    /**
     * Tax rate applied to the item.  For details, see `tax_rate` field description in the [Level II and Level III Processing Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/Level_2_3_SCMP_API/html/)  **Visa**: Valid range is 0.01 to 0.99 (1% to 99%, with only whole percentage values accepted; values with additional decimal places will be truncated).  **Mastercard**: Valid range is 0.00001 to 0.99999 (0.001% to 99.999%).
     */
    taxRate?: string;
    /**
     * Flag to indicate how you handle discount at the line item level.   - 0: no line level discount provided  - 1: tax was calculated on the post-discount line item total  - 2: tax was calculated on the pre-discount line item total  `Note` Visa will inset 0 (zero) if an invalid value is included in this field.  This field relates to the value in the _lineItems[].discountAmount_ field.
     */
    taxAppliedAfterDiscount?: string;
    /**
     * Flag to indicate whether tax is exempted or not included.   - 0: tax not included  - 1: tax included  - 2: transaction is not subject to tax
     */
    taxStatusIndicator?: string;
    /**
     * Type of tax being applied to the item.  For possible values, see the processor-specific field descriptions in [Level II and Level III Processing Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/Level_2_3_SCMP_API/html/):  #### FDC Nashville Global - `alternate_tax_type_applied` - `alternate_tax_type_identifier`  #### Worldpay VAP - `alternate_tax_type_identifier`  #### RBS WorldPay Atlanta - `tax_type_applied`  #### TSYS Acquiring Solutions - `tax_type_applied` - `local_tax_indicator`  #### Chase Paymentech Solutions - `tax_type_applied`  #### Elavon Americas - `local_tax_indicator`  #### FDC Compass - `tax_type_applied`  #### OmniPay Direct - `local_tax_indicator`
     */
    taxTypeCode?: string;
    /**
     * Flag that indicates whether the tax amount is included in the Line Item Total.  Possible values:  - **true**  - **false**
     */
    amountIncludesTax?: boolean;
    /**
     * Flag to indicate whether the purchase is categorized as goods or services. Possible values:   - 00: goods  - 01: services
     */
    typeOfSupply?: string;
    /**
     * Commodity code or International description code used to classify the item. Contact your acquirer for a list of codes.
     */
    commodityCode?: string;
    /**
     * Discount applied to the item.
     */
    discountAmount?: number;
    /**
     * Flag that indicates whether the amount is discounted.  If you do not provide a value but you set Discount Amount to a value greater than zero, then CyberSource sets this field to **true**.  Possible values:  - **true**  - **false**
     */
    discountApplied?: boolean;
    /**
     * Rate the item is discounted. Maximum of 2 decimal places.  Example 5.25 (=5.25%)
     */
    discountRate?: string;
    /**
     * Field to support an invoice number for a transaction. You must specify the number of line items that will include an invoice number. By default, the first line item will include an invoice number field. The invoice number field can be included for up to 10 line items.
     */
    invoiceNumber?: string;
    taxDetails?: Array<Ptsv2paymentsOrderInformationAmountDetailsTaxDetails>;
  }
  export interface Ptsv2paymentsidrefundsPaymentInformation {
    card?: Ptsv2paymentsidrefundsPaymentInformationCard;
    bank?: Ptsv2paymentsPaymentInformationBank;
    tokenizedCard?: Ptsv2paymentsPaymentInformationTokenizedCard;
    fluidData?: Ptsv2paymentsPaymentInformationFluidData;
    customer?: Ptsv2paymentsPaymentInformationCustomer;
    paymentInstrument?: Ptsv2paymentsPaymentInformationPaymentInstrument;
    instrumentIdentifier?: Ptsv2paymentsPaymentInformationInstrumentIdentifier;
    shippingAddress?: Ptsv2paymentsPaymentInformationShippingAddress;
    legacyToken?: Ptsv2paymentsPaymentInformationLegacyToken;
    paymentType?: Ptsv2paymentsPaymentInformationPaymentType;
  }
  export interface Ptsv2paymentsidrefundsPaymentInformationCard {
    /**
     * The customer’s payment card number, also known as the Primary Account Number (PAN). You can also use this field for encoded account numbers.  #### FDMS Nashville Required. String (19)  #### GPX Required if `pointOfSaleInformation.entryMode=keyed`. However, this field is optional if your account is configured for relaxed requirements for address data and expiration date. **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  #### All other processors Required if `pointOfSaleInformation.entryMode=keyed`. However, this field is optional if your account is configured for relaxed requirements for address data and expiration date. **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
     */
    number?: string;
    /**
     * Two-digit month in which the payment card expires.  Format: `MM`.  Valid values: `01` through `12`. Leading 0 is required.  #### Barclays and Streamline For Maestro (UK Domestic) and Maestro (International) cards on Barclays and Streamline, this must be a valid value (`01` through `12`) but is not required to be a valid expiration date. In other words, an expiration date that is in the past does not cause CyberSource to reject your request. However, an invalid expiration date might cause the issuer to reject your request.  #### Encoded Account Numbers For encoded account numbers (_type_=039), if there is no expiration date on the card, use `12`.  #### FDMS Nashville Required field.  #### GPX Required if `pointOfSaleInformation.entryMode=keyed`. However, this field is optional if your account is configured for relaxed requirements for address data and expiration date. **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  #### All other processors Required if `pointOfSaleInformation.entryMode=keyed`. However, this field is optional if your account is configured for relaxed requirements for address data and expiration date. **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
     */
    expirationMonth?: string;
    /**
     * Four-digit year in which the payment card expires.  Format: `YYYY`.  #### Barclays and Streamline For Maestro (UK Domestic) and Maestro (International) cards on Barclays and Streamline, this must be a valid value (`1900` through `3000`) but is not required to be a valid expiration date. In other words, an expiration date that is in the past does not cause CyberSource to reject your request. However, an invalid expiration date might cause the issuer to reject your request.  #### Encoded Account Numbers For encoded account numbers (**_type_**`=039`), if there is no expiration date on the card, use `2021`.  #### FDMS Nashville Required field.  #### FDC Nashville Global and FDMS South You can send in 2 digits or 4 digits. If you send in 2 digits, they must be the last 2 digits of the year.  #### GPX Required if `pointOfSaleInformation.entryMode=keyed`. However, this field is optional if your account is configured for relaxed requirements for address data and expiration date. **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  #### All other processors Required if `pointOfSaleInformation.entryMode=keyed`. However, this field is optional if your account is configured for relaxed requirements for address data and expiration date. **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
     */
    expirationYear?: string;
    /**
     * Three-digit value that indicates the card type.  **IMPORTANT** It is strongly recommended that you include the card type field in request messages even if it is optional for your processor and card type. Omitting the card type can cause the transaction to be processed with the wrong card type.  Possible values: - `001`: Visa. For card-present transactions on all processors except SIX, the Visa Electron card type is processed the same way that the Visa debit card is processed. Use card type value `001` for Visa Electron. - `002`: Mastercard, Eurocard[^1], which is a European regional brand of Mastercard. - `003`: American Express - `004`: Discover - `005`: Diners Club - `006`: Carte Blanche[^1] - `007`: JCB[^1] - `014`: Enroute[^1] - `021`: JAL[^1] - `024`: Maestro (UK Domestic)[^1] - `031`: Delta[^1]: Use this value only for Ingenico ePayments. For other processors, use `001` for all Visa card types. - `033`: Visa Electron[^1]. Use this value only for Ingenico ePayments and SIX. For other processors, use `001` for all Visa card types. - `034`: Dankort[^1] - `036`: Cartes Bancaires[^1] - `037`: Carta Si[^1] - `039`: Encoded account number[^1] - `040`: UATP[^1] - `042`: Maestro (International)[^1] - `050`: Hipercard[^2,3] - `051`: Aura - `054`: Elo[^3] - `062`: China UnionPay  [^1]: For this card type, you must include the `paymentInformation.card.type` or `paymentInformation.tokenizedCard.type` field in your request for an authorization or a stand-alone credit. [^2]: For this card type on Cielo 3.0, you must include the `paymentInformation.card.type` or `paymentInformation.tokenizedCard.type` field in a request for an authorization or a stand-alone credit. This card type is not supported on Cielo 1.5. [^3]: For this card type on Getnet and Rede, you must include the `paymentInformation.card.type` or `paymentInformation.tokenizedCard.type` field in a request for an authorization or a stand-alone credit.  #### Used by **Authorization** Required for Carte Blanche and JCB. Optional for all other card types.  #### Card Present reply This field is included in the reply message when the client software that is installed on the POS terminal uses the token management service (TMS) to retrieve tokenized payment details. You must contact customer support to have your account enabled to receive these fields in the credit reply message.  Returned by the Credit service.  This reply field is only supported by the following processors: - American Express Direct - Credit Mutuel-CIC - FDC Nashville Global - OmniPay Direct - SIX  #### GPX This field only supports transactions from the following card types: - Visa - Mastercard - AMEX - Discover - Diners - JCB - Union Pay International
     */
    type?: string;
    /**
     * Identifier for the issuing bank that provided the customer’s encoded account number. Contact your processor for the bank’s ID.
     */
    accountEncoderId?: string;
    /**
     * Number of times a Maestro (UK Domestic) card has been issued to the account holder. The card might or might not have an issue number. The number can consist of one or two digits, and the first digit might be a zero. When you include this value in your request, include exactly what is printed on the card. A value of 2 is different than a value of 02. Do not include the field, even with a blank value, if the card is not a Maestro (UK Domestic) card.  **Note** The issue number is not required for Maestro (UK Domestic) transactions.
     */
    issueNumber?: string;
    /**
     * Month of the start of the Maestro (UK Domestic) card validity period. Do not include the field, even with a blank value, if the card is not a Maestro (UK Domestic) card. `Format: MM`. Possible values: 01 through 12.  **Note** The start date is not required for Maestro (UK Domestic) transactions.
     */
    startMonth?: string;
    /**
     * Year of the start of the Maestro (UK Domestic) card validity period. Do not include the field, even with a blank value, if the card is not a Maestro (UK Domestic) card. `Format: YYYY`.  **Note** The start date is not required for Maestro (UK Domestic) transactions.
     */
    startYear?: string;
    /**
     * Flag that specifies the type of account associated with the card. The cardholder provides this information during the payment process.  This field is required in the following cases:   - Debit transactions on Cielo and Comercio Latino.   - Transactions with Brazilian-issued cards on CyberSource through VisaNet.   - Applicable only for CyberSource through VisaNet (CtV).      **Note** Combo cards in Brazil contain credit and debit functionality in a single card. Visa systems use a credit bank identification number (BIN) for this type of card. Using the BIN to determine whether a card is debit or credit can cause transactions with these cards to be processed incorrectly. CyberSource strongly recommends that you include this field for combo card transactions.  Possible values include the following.   - `CHECKING`: Checking account  - `CREDIT`: Credit card account  - `SAVING`: Saving account  - `LINE_OF_CREDIT`: Line of credit or credit portion of combo card  - `PREPAID`: Prepaid card account or prepaid portion of combo card  - `UNIVERSAL`: Universal account
     */
    sourceAccountType?: string;
    /**
     * Type of account that is being used when the value for the override_payment_method field is line of credit (LI) or prepaid card (PP). Possible values for line of credit: - `AGRC`: Visa Agro Custeio - `AGRE`: Visa Agro Electron - `AGRI`: Visa Agro Investimento - `AGRO`: Visa Agro Possible values for prepaid card: - `VVA`: Visa Vale Alimentacao - `VVF`: Visa Vale Flex - `VVR`: Visa Vale Refeicao This field is supported only for combo card transactions in Brazil on CyberSource through VisaNet.
     */
    sourceAccountTypeDetails?: string;
  }
  export interface Ptsv2paymentsidrefundsPointOfSaleInformation {
    emv?: Ptsv2paymentsidcapturesPointOfSaleInformationEmv;
  }
  export interface Ptsv2paymentsidrefundsProcessingInformation {
    /**
     * Type of digital payment solution for the transaction. Possible Values:   - `visacheckout`: Visa Checkout. This value is required for Visa Checkout transactions. For details, see `payment_solution` field description in [Visa Checkout Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/VCO_SCMP_API/html/)  - `001`: Apple Pay.  - `004`: Cybersource In-App Solution.  - `005`: Masterpass. This value is required for Masterpass transactions on OmniPay Direct. For details, see \"Masterpass\" in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  - `006`: Android Pay.  - `007`: Chase Pay.  - `008`: Samsung Pay.  - `012`: Google Pay.
     */
    paymentSolution?: string;
    /**
     * Please check with Cybersource customer support to see if your merchant account is configured correctly so you can include this field in your request. * For Payouts: max length for FDCCompass is String (22).
     */
    reconciliationId?: string;
    /**
     * Value that links the current authorization request to the original authorization request. Set this value to the ID that was returned in the reply message from the original authorization request.  This value is used for:  - Partial authorizations - Split shipments  For details, see `link_to_request` field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
     */
    linkId?: string;
    /**
     * Attribute that lets you define custom grouping for your processor reports. This field is supported only for **Worldpay VAP**.  For details, see `report_group` field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
     */
    reportGroup?: string;
    /**
     * Identifier for the **Visa Checkout** order. Visa Checkout provides a unique order ID for every transaction in the Visa Checkout **callID** field.
     */
    visaCheckoutId?: string;
    /**
     * Set this field to 3 to indicate that the request includes Level III data.
     */
    purchaseLevel?: string;
    recurringOptions?: Ptsv2paymentsidrefundsProcessingInformationRecurringOptions;
    /**
     * Indicates that the transaction includes industry-specific data.  Possible Values: - `airline` - `restaurant` - `lodging` - `auto_rental` - `transit` - `healthcare_medical` - `healthcare_transit` - `transit`  #### Card Present, Airlines and Auto Rental You must set this field to `airline` in order for airline data to be sent to the processor. For example, if this field is not set to `airline` or is not included in the request, no airline data is sent to the processor.  You must set this field to `restaurant` in order for restaurant data to be sent to the processor. When this field is not set to `restaurant` or is not included in the request, no restaurant data is sent to the processor.  You must set this field to `auto_rental` in order for auto rental data to be sent to the processor. For example, if this field is not set to `auto_rental` or is not included in the request, no auto rental data is sent to the processor.  Restaurant data is supported only on CyberSource through VisaNet.
     */
    industryDataType?: string;
    bankTransferOptions?: Ptsv2creditsProcessingInformationBankTransferOptions;
    commerceIndicator?: string;
  }
  export interface Ptsv2paymentsidrefundsProcessingInformationRecurringOptions {
    /**
     * Flag that indicates whether this is a payment towards an existing contractual loan.  Possible values: - `true`: Loan payment - `false`: (default) Not a loan payment  For processor-specific details, see `debt_indicator` field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
     */
    loanPayment?: boolean;
  }
  export interface Ptsv2paymentsidreversalsClientReferenceInformation {
    /**
     * Merchant-generated order reference or tracking number. It is recommended that you send a unique value for each transaction so that you can perform meaningful searches for the transaction.  #### Used by **Authorization** Required field.  #### PIN Debit Requests for PIN debit reversals need to use the same merchant reference number that was used in the transaction that is being reversed.  Required field for all PIN Debit requests (purchase, credit, and reversal).  #### FDC Nashville Global Certain circumstances can cause the processor to truncate this value to 15 or 17 characters for Level II and Level III processing, which can cause a discrepancy between the value you submit and the value included in some processor reports. 
     */
    code?: string;
    /**
     * Used to resume a transaction that was paused for an order modification rule to allow for payer authentication to complete. To resume and continue with the authorization/decision service flow, call the services and include the request id from the prior decision call. 
     */
    pausedRequestId?: string;
    /**
     * Comments
     */
    comments?: string;
    partner?: Ptsv2paymentsidreversalsClientReferenceInformationPartner;
    /**
     * The name of the Connection Method client (such as Virtual Terminal or SOAP Toolkit API) that the merchant uses to send a transaction request to CyberSource. 
     */
    applicationName?: string;
    /**
     * Version of the CyberSource application or integration used for a transaction. 
     */
    applicationVersion?: string;
    /**
     * The entity that is responsible for running the transaction and submitting the processing request to CyberSource. This could be a person, a system, or a connection method. 
     */
    applicationUser?: string;
    /**
     * Reference number for the transaction. Depending on how your Cybersource account is configured, this value could either be provided in the API request or generated by CyberSource. The actual value used in the request to the processor is provided back to you by Cybersource in the response. 
     */
    reconciliationId?: string;
    /**
     * Identifier that you assign to the transaction. Normally generated by a client server to identify a unique API request.  **Note** Use this field only if you want to support merchant-initiated reversal and void operations.  #### Used by **Authorization, Authorization Reversal, Capture, Credit, and Void** Optional field.  #### PIN Debit For a PIN debit reversal, your request must include a request ID or a merchant transaction identifier. Optional field for PIN debit purchase or credit requests. 
     */
    transactionId?: string;
  }
  export interface Ptsv2paymentsidreversalsClientReferenceInformationPartner {
    /**
     * Identifier for the developer that helped integrate a partner solution to CyberSource.  Send this value in all requests that are sent through the partner solutions built by that developer. CyberSource assigns the ID to the developer.  **Note** When you see a developer ID of 999 in reports, the developer ID that was submitted is incorrect.
     */
    developerId?: string;
    /**
     * Identifier for the partner that is integrated to CyberSource.  Send this value in all requests that are sent through the partner solution. CyberSource assigns the ID to the partner.  **Note** When you see a solutionId of 999 in reports, the solutionId that was submitted is incorrect.
     */
    solutionId?: string;
    /**
     * Value that identifies the application vendor and application version for a third party gateway. CyberSource provides you with this value during testing and validation. This field is supported only on CyberSource through VisaNet.  #### Used by **Authorization, Authorization Reversal, Capture, Credit, Incremental Authorization, and Void** Optional field.  #### PIN debit Required field for PIN debit credit, PIN debit purchase, or PIN debit reversal request.
     */
    thirdPartyCertificationNumber?: string;
    originalTransactionId?: string;
  }
  export interface Ptsv2paymentsidreversalsOrderInformation {
    amountDetails?: Ptsv2paymentsidreversalsOrderInformationAmountDetails;
    lineItems?: Array<Ptsv2paymentsidreversalsOrderInformationLineItems>;
  }
  export interface Ptsv2paymentsidreversalsOrderInformationAmountDetails {
    /**
     * Service fee. Required for service fee transactions.
     */
    serviceFeeAmount?: string;
    totalAmount?: number;
    currency?: string;
  }
  export interface Ptsv2paymentsidreversalsOrderInformationLineItems {
    totalAmount?: Ptsv2paymentsidreversalsOrderInformationLineItems | undefined;
    /**
     * Number of units for this order. Must be a non-negative integer.  The default is `1`. For an authorization or capture transaction (`processingOptions.capture` is set to `true` or `false`), this field is required when `orderInformation.lineItems[].productCode` is not `default` or one of the other values related to shipping and/or handling.  #### Tax Calculation Optional field for U.S., Canadian, international tax, and value added taxes.
     */
    quantity?: number;
    /**
     * Per-item price of the product. This value for this field cannot be negative.  You must include either this field or the request-level field `orderInformation.amountDetails.totalAmount` in your request.  You can include a decimal point (.), but you cannot include any other special characters. The value is truncated to the correct number of decimal places.  #### DCC with a Third-Party Provider Set this field to the converted amount that was returned by the DCC provider. You must include either the 1st line item in the order and this field, or the request-level field `orderInformation.amountDetails.totalAmount` in your request.  #### FDMS South If you accept IDR or CLP currencies, see the entry for FDMS South in the [Merchant Descriptors Using the SCMP API Guide.] (https://apps.cybersource.com/library/documentation/dev_guides/Merchant_Descriptors_SCMP_API/html/)  #### Tax Calculation Required field for U.S., Canadian, international and value added taxes.  #### Zero Amount Authorizations If your processor supports zero amount authorizations, you can set this field to 0 for the authorization to check if the card is lost or stolen.  #### Maximum Field Lengths For GPN and JCN Gateway: Decimal (10) All other processors: Decimal (15)
     */
    unitPrice?: number;
    productSKU?: string;
    /**
     * Indicates the level of risk for the product. This field can contain one of the following values: - `low`: The product is associated with few chargebacks. - `normal`: The product is associated with a normal number of chargebacks. - `high`: The product is associated with many chargebacks.
     */
    productRisk?: string;
    /**
     * For an authorization or capture transaction (`processingOptions.capture` is `true` or `false`), this field is required when `orderInformation.lineItems[].productCode` is not `default` or one of the other values that are related to shipping and/or handling.  #### Tax Calculation Optional field for U.S., Canadian, international tax, and value added taxes.
     */
    productName?: string;
    /**
     * Type of product. The value for this field is used to identify the product category (electronic, handling, physical, service, or shipping). The default value is `default`.  If you are performing an authorization transaction (`processingOptions.capture` is set to `false`), and you set this field to a value other than `default` or one of the values related to shipping and/or handling, then `orderInformation.lineItems[].quantity`, `orderInformation.lineItems[].productName`, and `orderInformation.lineItems[].productSku` fields are required.  Optional field.  For details, see the `product_code` field description in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/).  #### Tax Calculation Optional field for U.S., Canadian, international tax, and value added taxes.  To use the tax calculation service, use values listed in the Tax Product Code Guide. For information about this document, contact customer support. See \"Product Codes,\" page 14, for more information.
     */
    productCode?: string;
    productSku?: string;
    discountAmount?: number;
    taxRate?: string;
  }
  export interface Ptsv2paymentsidreversalsPointOfSaleInformation {
    emv?: Ptsv2paymentsidreversalsPointOfSaleInformationEmv;
  }
  export interface Ptsv2paymentsidreversalsPointOfSaleInformationEmv {
    /**
     * EMV data that is transmitted from the chip card to the issuer, and from the issuer to the chip card. The EMV data is in the tag-length-value format and includes chip card tags, terminal tags, and transaction detail tags.  For information about the individual tags, see the “Application Specification” section in the EMV 4.3 Specifications: http://emvco.com  **Note** Card present information about EMV applies only to credit card processing and PIN debit processing. All other card present information applies only to credit card processing. PIN debit processing is available only on FDC Nashville Global.  **Important** The following tags contain sensitive information and **must not** be included in this field:   - `56`: Track 1 equivalent data  - `57`: Track 2 equivalent data  - `5A`: Application PAN  - `5F20`: Cardholder name  - `5F24`: Application expiration date (This sensitivity has been relaxed for Credit Mutuel-CIC, American Express Direct, FDC Nashville Global, First Data Merchant Solutions, and SIX)  - `99`: Transaction PIN  - `9F0B`: Cardholder name (extended)  - `9F1F`: Track 1 discretionary data  - `9F20`: Track 2 discretionary data  For captures, this field is required for contact EMV transactions. Otherwise, it is optional.  For credits, this field is required for contact EMV stand-alone credits and contactless EMV stand-alone credits. Otherwise, it is optional.  **Important** For contact EMV captures, contact EMV stand-alone credits, and contactless EMV stand-alone credits, you must include the following tags in this field. For all other types of EMV transactions, the following tags are optional.   - `95`: Terminal verification results  - `9F10`: Issuer application data  - `9F26`: Application cryptogram   #### CyberSource through VisaNet - In Japan: 199 bytes - In other countries: String (252)  #### GPX This field only supports transactions from the following card types: - Visa - Mastercard - AMEX - Discover - Diners - JCB - Union Pay International  #### JCN Gateway The following tags must be included: - `4F`: Application identifier - `84`: Dedicated file name  Data length: 199 bytes  #### All other processors: String (999)  #### Used by Authorization: Optional Authorization Reversal: Optional Credit: Optional PIN Debit processing (purchase, credit and reversal): Optional
     */
    tags?: string;
  }
  export interface Ptsv2paymentsidreversalsProcessingInformation {
    /**
     * Type of digital payment solution for the transaction. Possible Values:   - `visacheckout`: Visa Checkout. This value is required for Visa Checkout transactions. For details, see `payment_solution` field description in [Visa Checkout Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/VCO_SCMP_API/html/)  - `001`: Apple Pay.  - `004`: Cybersource In-App Solution.  - `005`: Masterpass. This value is required for Masterpass transactions on OmniPay Direct. For details, see \"Masterpass\" in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  - `006`: Android Pay.  - `007`: Chase Pay.  - `008`: Samsung Pay.  - `012`: Google Pay.
     */
    paymentSolution?: string;
    /**
     * Please check with Cybersource customer support to see if your merchant account is configured correctly so you can include this field in your request. * For Payouts: max length for FDCCompass is String (22).
     */
    reconciliationId?: string;
    /**
     * Value that links the current authorization request to the original authorization request. Set this value to the ID that was returned in the reply message from the original authorization request.  This value is used for:  - Partial authorizations - Split shipments  For details, see `link_to_request` field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
     */
    linkId?: string;
    /**
     * Attribute that lets you define custom grouping for your processor reports. This field is supported only for **Worldpay VAP**.  For details, see `report_group` field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
     */
    reportGroup?: string;
    /**
     * Identifier for the **Visa Checkout** order. Visa Checkout provides a unique order ID for every transaction in the Visa Checkout **callID** field.
     */
    visaCheckoutId?: string;
    issuer?: Ptsv2paymentsIssuerInformation;
    bankTransferOptions?: Ptsv2creditsProcessingInformationBankTransferOptions;
    /**
     * Commerce indicator for cards not enrolled. This field contains one of these values: - `internet`: Card not enrolled, or card type not supported by payer authentication. No liability shift. - `js_attempted`: Card not enrolled, but attempt to authenticate is recorded. Liability shift. - `js_failure`: J/Secure directory service is not available. No liability shift. - `spa`: Mastercard card not enrolled in the SecureCode program. No liability shift. - `vbv_attempted`: Card not enrolled, but attempt to authenticate is recorded. Liability shift. - `vbv_failure`: For payment processor Barclays, Streamline, AIBMS, or FDC Germany, you receive this result if Visa’s directory service is not available. No liability shift.
     */
    commerceIndicator?: string;

  }
  export interface Ptsv2paymentsidreversalsReversalInformation {
    amountDetails?: Ptsv2paymentsidreversalsReversalInformationAmountDetails;
    /**
     * Reason for the authorization reversal. Possible value:   - `34`: Suspected fraud  This field is ignored for processors that do not support this value.  Returned by authorization reversal.
     */
    reason?: string;
  }
  export interface Ptsv2paymentsidreversalsReversalInformationAmountDetails {
    /**
     * Grand total for the order. This value cannot be negative. You can include a decimal point (.), but no other special characters. CyberSource truncates the amount to the correct number of decimal places.  **Note** For CTV, FDCCompass, Paymentech processors, the maximum length for this field is 12.  **Important** Some processors have specific requirements and limitations, such as maximum amounts and maximum field lengths. For details, see: - \"Authorization Information for Specific Processors\" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/). - \"Capture Information for Specific Processors\" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/). - \"Credit Information for Specific Processors\" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/).  If your processor supports zero amount authorizations, you can set this field to 0 for the authorization to check if the card is lost or stolen. For details, see \"Zero Amount Authorizations,\" \"Credit Information for Specific Processors\" in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  #### Card Present Required to include either this field or `orderInformation.lineItems[].unitPrice` for the order.  #### Invoicing Required for creating a new invoice.  #### PIN Debit Amount you requested for the PIN debit purchase. This value is returned for partial authorizations. The issuing bank can approve a partial amount if the balance on the debit card is less than the requested transaction amount.  Required field for PIN Debit purchase and PIN Debit credit requests. Optional field for PIN Debit reversal requests.  #### GPX This field is optional for reversing an authorization or credit; however, for all other processors, these fields are required.  #### DCC with a Third-Party Provider Set this field to the converted amount that was returned by the DCC provider. You must include either this field or the 1st line item in the order and the specific line-order amount in your request. For details, see `grand_total_amount` field description in [Dynamic Currency Conversion For First Data Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/DCC_FirstData_SCMP/DCC_FirstData_SCMP_API.pdf).  #### FDMS South If you accept IDR or CLP currencies, see the entry for FDMS South in \"Authorization Information for Specific Processors\" of the [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  #### DCC for First Data Not used.
     */
    totalAmount?: string;
    /**
     * Currency used for the order. Use the three-character [ISO Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf)  #### Used by **Authorization** Required field.  **Authorization Reversal** For an authorization reversal (`reversalInformation`) or a capture (`processingOptions.capture` is set to `true`), you must use the same currency that you used in your payment authorization request.  #### PIN Debit Currency for the amount you requested for the PIN debit purchase. This value is returned for partial authorizations. The issuing bank can approve a partial amount if the balance on the debit card is less than the requested transaction amount. For the possible values, see the [ISO Standard Currency Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/currencies.pdf). Returned by PIN debit purchase.  For PIN debit reversal requests, you must use the same currency that was used for the PIN debit purchase or PIN debit credit that you are reversing. For the possible values, see the [ISO Standard Currency Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/currencies.pdf).  Required field for PIN Debit purchase and PIN Debit credit requests. Optional field for PIN Debit reversal requests.  #### GPX This field is optional for reversing an authorization or credit.  #### DCC for First Data Your local currency. For details, see the `currency` field description in [Dynamic Currency Conversion For First Data Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/DCC_FirstData_SCMP/DCC_FirstData_SCMP_API.pdf).  #### Tax Calculation Required for international tax and value added tax only. Optional for U.S. and Canadian taxes. Your local currency.
     */
    currency?: string;
  }
  export interface Ptsv2paymentsidvoidsPaymentInformation {
    paymentType?: Ptsv2paymentsPaymentInformationPaymentType;
  }
  export interface Ptsv2payoutsClientReferenceInformation {
    /**
     * Merchant-generated order reference or tracking number. It is recommended that you send a unique value for each transaction so that you can perform meaningful searches for the transaction.  #### Used by **Authorization** Required field.  #### PIN Debit Requests for PIN debit reversals need to use the same merchant reference number that was used in the transaction that is being reversed.  Required field for all PIN Debit requests (purchase, credit, and reversal).  #### FDC Nashville Global Certain circumstances can cause the processor to truncate this value to 15 or 17 characters for Level II and Level III processing, which can cause a discrepancy between the value you submit and the value included in some processor reports.
     */
    code?: string;
    /**
     * The name of the Connection Method client (such as Virtual Terminal or SOAP Toolkit API) that the merchant uses to send a transaction request to CyberSource.
     */
    applicationName?: string;
    /**
     * Version of the CyberSource application or integration used for a transaction.
     */
    applicationVersion?: string;
    /**
     * The entity that is responsible for running the transaction and submitting the processing request to CyberSource. This could be a person, a system, or a connection method.
     */
    applicationUser?: string;
  }
  export interface Ptsv2payoutsMerchantInformation {
    /**
     * The value for this field is a four-digit number that the payment card industry uses to classify merchants into market segments. A payment card company assigned one or more of these values to your business when you started accepting the payment card company’s cards. When you do not include this field in your request, CyberSource uses the value in your CyberSource account.  For processor-specific information, see the `merchant_category_code` field description in [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)  #### CyberSource through VisaNet The value for this field corresponds to the following data in the TC 33 capture file5: - Record: CP01 TCR4 - Position: 150-153 - Field: Merchant Category Code
     */
    categoryCode?: number;
    /**
     * Time that the transaction was submitted in local time. The time is in hhmmss format.
     */
    submitLocalDateTime?: string;
    /**
     * Your government-assigned tax identification number.  #### Tax Calculation Required field for value added tax only. Not applicable to U.S. and Canadian taxes.  #### CyberSource through VisaNet For CtV processors, the maximum length is 20.  For other processor-specific information, see the `merchant_vat_registration_number` field description in [Level II and Level III Processing Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/Level_2_3_SCMP_API/html)
     */
    vatRegistrationNumber?: string;
    merchantDescriptor?: Ptsv2payoutsMerchantInformationMerchantDescriptor;
  }
  export interface Ptsv2payoutsMerchantInformationMerchantDescriptor {
    /**
     * Your merchant name.  **Note** For Paymentech processor using Cybersource Payouts, the maximum data length is 22.  #### PIN debit Your business name. This name is displayed on the cardholder’s statement. When you include more than one consecutive space, extra spaces are removed.  When you do not include this value in your PIN debit request, the merchant name from your account is used. **Important** This value must consist of English characters.  Optional field for PIN debit credit or PIN debit purchase requests.  #### Airline processing Your merchant name. This name is displayed on the cardholder’s statement. When you include more than one consecutive space, extra spaces are removed.  **Note** Some airline fee programs may require the original ticket number (ticket identifier) or the ancillary service description in positions 13 through 23 of this field.  **Important** This value must consist of English characters.  Required for captures and credits.
     */
    name?: string;
    /**
     * Merchant's City.  #### PIN debit City for your business location. This value might be displayed on the cardholder’s statement.  When you do not include this value in your PIN debit request, the merchant name from your account is used. **Important** This value must consist of English characters.  Optional field for PIN debit credit or PIN debit purchase requests.
     */
    locality?: string;
    /**
     * Merchant's country.  #### PIN debit Country code for your business location. Use the [ISO Standard Country Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/countries_alpha_list.pdf) This value might be displayed on the cardholder’s statement.  When you do not include this value in your PIN debit request, the merchant name from your account is used. **Important** This value must consist of English characters. **Note** If your business is located in the U.S. or Canada and you include this field in a request, you must also include `merchantInformation.merchantDescriptor.administrativeArea`.  Optional field for PIN debit credit or PIN debit purchase.
     */
    country?: string;
    /**
     * The state where the merchant is located.  #### PIN debit State code or region code for your business. Use the Use the [State, Province, and Territory Codes for the United States and Canada](https://developer.cybersource.com/library/documentation/sbc/quickref/states_and_provinces.pdf) This value might be displayed on the cardholder’s statement.  When you do not include this value in your PIN debit request, the merchant name from your account is used. **Important** This value must consist of English characters.  **Note** This field is supported only for businesses located in the U.S. or Canada.  Optional field for PIN debit credit or PIN debit purchase.
     */
    administrativeArea?: string;
    /**
     * Merchant's postal code.  #### PIN debit Postal code for your business location. This value might be displayed on the cardholder’s statement.  If your business is domiciled in the U.S., you can use a 5-digit or 9-digit postal code. A 9-digit postal code must follow this format: [5 digits][dash][4 digits] Example: `12345-6789`  If your business is domiciled in Canada, you can use a 6-digit or 9-digit postal code. A 6-digit postal code must follow this format: [alpha][numeric][alpha][space] [numeric][alpha][numeric] Example: `A1B 2C3`  When you do not include this value in your PIN debit request, the merchant name from your account is used. **Important** This value must consist of English characters.  **Note** This field is supported only for businesses located in the U.S. or Canada. **Important** Mastercard requires a postal code for any country that uses postal codes. You can provide the postal code in your account or you can include this field in your request.  Optional field for PIN debit credit or PIN debit purchase.
     */
    postalCode?: string;
    /**
     * For the descriptions, used-by information, data types, and lengths for these fields, see `merchant_descriptor_contact` field description in [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)--> Contact information for the merchant.  **Note** These are the maximum data lengths for the following payment processors: - FDCCompass (13) - Paymentech (13)
     */
    contact?: string;
  }
  export interface Ptsv2payoutsOrderInformation {
    amountDetails?: Ptsv2payoutsOrderInformationAmountDetails;
    billTo?: Ptsv2payoutsOrderInformationBillTo;
  }
  export interface Ptsv2payoutsOrderInformationAmountDetails {
    /**
     * Grand total for the order. This value cannot be negative. You can include a decimal point (.), but no other special characters. CyberSource truncates the amount to the correct number of decimal places.  **Note** For CTV, FDCCompass, Paymentech processors, the maximum length for this field is 12.  **Important** Some processors have specific requirements and limitations, such as maximum amounts and maximum field lengths. For details, see: - \"Authorization Information for Specific Processors\" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/). - \"Capture Information for Specific Processors\" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/). - \"Credit Information for Specific Processors\" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/).  If your processor supports zero amount authorizations, you can set this field to 0 for the authorization to check if the card is lost or stolen. For details, see \"Zero Amount Authorizations,\" \"Credit Information for Specific Processors\" in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  #### Card Present Required to include either this field or `orderInformation.lineItems[].unitPrice` for the order.  #### Invoicing Required for creating a new invoice.  #### PIN Debit Amount you requested for the PIN debit purchase. This value is returned for partial authorizations. The issuing bank can approve a partial amount if the balance on the debit card is less than the requested transaction amount.  Required field for PIN Debit purchase and PIN Debit credit requests. Optional field for PIN Debit reversal requests.  #### GPX This field is optional for reversing an authorization or credit; however, for all other processors, these fields are required.  #### DCC with a Third-Party Provider Set this field to the converted amount that was returned by the DCC provider. You must include either this field or the 1st line item in the order and the specific line-order amount in your request. For details, see `grand_total_amount` field description in [Dynamic Currency Conversion For First Data Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/DCC_FirstData_SCMP/DCC_FirstData_SCMP_API.pdf).  #### FDMS South If you accept IDR or CLP currencies, see the entry for FDMS South in \"Authorization Information for Specific Processors\" of the [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  #### DCC for First Data Not used.
     */
    totalAmount?: string;
    /**
     * Currency used for the order. Use the three-character [ISO Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf)  #### Used by **Authorization** Required field.  **Authorization Reversal** For an authorization reversal (`reversalInformation`) or a capture (`processingOptions.capture` is set to `true`), you must use the same currency that you used in your payment authorization request.  #### PIN Debit Currency for the amount you requested for the PIN debit purchase. This value is returned for partial authorizations. The issuing bank can approve a partial amount if the balance on the debit card is less than the requested transaction amount. For the possible values, see the [ISO Standard Currency Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/currencies.pdf). Returned by PIN debit purchase.  For PIN debit reversal requests, you must use the same currency that was used for the PIN debit purchase or PIN debit credit that you are reversing. For the possible values, see the [ISO Standard Currency Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/currencies.pdf).  Required field for PIN Debit purchase and PIN Debit credit requests. Optional field for PIN Debit reversal requests.  #### GPX This field is optional for reversing an authorization or credit.  #### DCC for First Data Your local currency. For details, see the `currency` field description in [Dynamic Currency Conversion For First Data Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/DCC_FirstData_SCMP/DCC_FirstData_SCMP_API.pdf).  #### Tax Calculation Required for international tax and value added tax only. Optional for U.S. and Canadian taxes. Your local currency.
     */
    currency?: string;
    surcharge?: Ptsv2payoutsOrderInformationAmountDetailsSurcharge;
  }
  export interface Ptsv2payoutsOrderInformationAmountDetailsSurcharge {
    /**
     * The surcharge amount is included in the total transaction amount but is passed in a separate field to the issuer and acquirer for tracking. The issuer can provide information about the surcharge amount to the customer.  If the amount is positive, then it is a debit for the customer. If the amount is negative, then it is a credit for the customer.  **NOTE**: This field is supported only for CyberSource through VisaNet (CtV) for Payouts. For CtV, the maximum string length is 8.  #### PIN debit Surcharge amount that you are charging the customer for this transaction. If you include a surcharge amount in the request, you must also include the surcharge amount in the value for `orderInformation.amountDetails.totalAmount`.  Optional field for transactions that use PIN debit credit or PIN debit purchase.
     */
    amount?: string;
  }
  export interface Ptsv2payoutsOrderInformationBillTo {
    /**
     * Customer’s first name. This name must be the same as the name on the card.  **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  #### CyberSource Latin American Processing **Important** For an authorization request, CyberSource Latin American Processing concatenates `orderInformation.billTo.firstName` and `orderInformation.billTo.lastName`. If the concatenated value exceeds 30 characters, CyberSource Latin American Processing declines the authorization request.\\ **Note** CyberSource Latin American Processing is the name of a specific processing connection that CyberSource supports. In the CyberSource API documentation, CyberSource Latin American Processing does not refer to the general topic of processing in Latin America. The information in this field description is for the specific processing connection called _CyberSource Latin American Processing_. It is not for any other Latin American processors that CyberSource supports.  #### CyberSource through VisaNet Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  #### For Payouts: This field may be sent only for FDC Compass.  #### Chase Paymentech Solutions Optional field.  ####  Credit Mutuel-CIC Optional field.  #### OmniPay Direct Optional field.  #### SIX Optional field.  #### TSYS Acquiring Solutions Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.  #### Worldpay VAP Optional field.  #### All other processors Not used.
     */
    firstName?: string;
    /**
     * Customer’s last name. This name must be the same as the name on the card.  **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  #### Chase Paymentech Solutions Optional field.  ####  Credit Mutuel-CIC Optional field.  #### CyberSource Latin American Processing **Important** For an authorization request, CyberSource Latin American Processing concatenates `orderInformation.billTo.firstName` and `orderInformation.billTo.lastName`. If the concatenated value exceeds 30 characters, CyberSource Latin American Processing declines the authorization request.\\ **Note** CyberSource Latin American Processing is the name of a specific processing connection that CyberSource supports. In the CyberSource API documentation, CyberSource Latin American Processing does not refer to the general topic of processing in Latin America. The information in this field description is for the specific processing connection called CyberSource Latin American Processing. It is not for any other Latin American processors that CyberSource supports.  #### CyberSource through VisaNet Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  #### For Payouts: This field may be sent only for FDC Compass.  #### OmniPay Direct Optional field.  #### RBS WorldPay Atlanta Optional field.  #### SIX Optional field.  #### TSYS Acquiring Solutions Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.  #### Worldpay VAP Optional field.  #### All other processors Not used.
     */
    lastName?: string;
    /**
     * Payment card billing street address as it appears on the credit card issuer’s records.  #### Atos This field must not contain colons (:).  #### CyberSource through VisaNet **Important** When you populate orderInformation.billTo.address1 and orderInformation.billTo.address2, CyberSource through VisaNet concatenates the two values. If the concatenated value exceeds 40 characters, CyberSource through VisaNet truncates the value at 40 characters before sending it to Visa and the issuing bank. Truncating this value affects AVS results and therefore might also affect risk decisions and chargebacks. Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  #### FDMS Nashville When the street name is numeric, it must be sent in numeric format. For example, if the address is _One First Street_, it must be sent as _1 1st Street_.  Required if keyed; not used if swiped.  String (20)  #### TSYS Acquiring Solutions Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.  #### All other processors: Optional. String (60)  #### For Payouts This field may be sent only for FDC Compass.  **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
     */
    address1?: string;
    /**
     * Used for additional address information. For example: _Attention: Accounts Payable_ Optional field.  For Payouts: This field may be sent only for FDC Compass.  #### Atos This field must not contain colons (:).  #### CyberSource through VisaNet **Important** When you populate `orderInformation.billTo.address1` and `orderInformation.billTo.address2`, CyberSource through VisaNet concatenates the two values. If the concatenated value exceeds 40 characters, CyberSource through VisaNet truncates the value at 40 characters before sending it to Visa and the issuing bank. Truncating this value affects AVS results and therefore might also affect risk decisions and chargebacks. Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  #### Chase Paymentech Solutions, FDC Compass, and TSYS Acquiring Solutions This value is used for AVS.  #### FDMS Nashville `orderInformation.billTo.address1` and `orderInformation.billTo.address2` together cannot exceed 20 characters. String (20)  #### All Other Processors String (60)
     */
    address2?: string;
    /**
     * Payment card billing country. Use the two-character [ISO Standard Country Codes](http://apps.cybersource.com/library/documentation/sbc/quickref/countries_alpha_list.pdf).  #### CyberSource through VisaNet Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  #### Chase Paymentech Solutions Optional field.  ####  Credit Mutuel-CIC Optional field.  #### OmniPay Direct Optional field.  #### SIX Optional field.  #### TSYS Acquiring Solutions Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.  #### Worldpay VAP Optional field.  #### All other processors Not used.
     */
    country?: string;
    /**
     * Payment card billing city.  #### Atos This field must not contain colons (:).  #### CyberSource through VisaNet Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  #### For Payouts: This field may be sent only for FDC Compass.  #### Chase Paymentech Solutions Optional field.  ####  Credit Mutuel-CIC Optional field.  #### OmniPay Direct Optional field.  #### SIX Optional field.  #### TSYS Acquiring Solutions Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.  #### Worldpay VAP Optional field.  #### All other processors Not used.
     */
    locality?: string;
    /**
     * State or province of the billing address. Use the [State, Province, and Territory Codes for the United States and Canada](https://developer.cybersource.com/library/documentation/sbc/quickref/states_and_provinces.pdf).  For Payouts: This field may be sent only for FDC Compass.  ##### CyberSource through VisaNet Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  #### Chase Paymentech Solutions Optional field.  ####  Credit Mutuel-CIC Optional field.  #### OmniPay Direct Optional field.  #### SIX Optional field.  #### TSYS Acquiring Solutions Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.  #### Worldpay VAP Optional field.  #### All other processors Not used.
     */
    administrativeArea?: string;
    /**
     * Postal code for the billing address. The postal code must consist of 5 to 9 digits.  When the billing country is the U.S., the 9-digit postal code must follow this format: [5 digits][dash][4 digits]  **Example** `12345-6789`  When the billing country is Canada, the 6-digit postal code must follow this format: [alpha][numeric][alpha][space][numeric][alpha][numeric]  **Example** `A1B 2C3`  **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  #### For Payouts:  This field may be sent only for FDC Compass.  #### American Express Direct Before sending the postal code to the processor, CyberSource removes all nonalphanumeric characters and, if the remaining value is longer than nine characters, truncates the value starting from the right side.  #### Atos This field must not contain colons (:).  #### CyberSource through VisaNet Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  #### FDMS Nashville Required if `pointOfSaleInformation.entryMode=keyed` and the address is in the U.S. or Canada. Optional if `pointOfSaleInformation.entryMode=keyed` and the address is **not** in the U.S. or Canada. Not used if swiped.  #### RBS WorldPay Atlanta: For best card-present keyed rates, send the postal code if `pointOfSaleInformation.entryMode=keyed`.  #### TSYS Acquiring Solutions Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.  #### All other processors: Optional field.
     */
    postalCode?: string;
    /**
     * Customer’s phone number.  It is recommended that you include the country code when the order is from outside the U.S.  #### Chase Paymentech Solutions Optional field.  ####  Credit Mutuel-CIC Optional field.  #### CyberSource through VisaNet Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  #### For Payouts: This field may be sent only for FDC Compass.  #### OmniPay Direct Optional field.  #### SIX Optional field.  #### TSYS Acquiring Solutions Optional field.  #### Worldpay VAP Optional field.  #### All other processors Not used.
     */
    phoneNumber?: string;
    /**
     * Customer's phone number type.  #### For Payouts: This field may be sent only for FDC Compass.  Possible Values: * day * home * night * work
     */
    phoneType?: string;
  }
  export interface Ptsv2payoutsPaymentInformation {
    card?: Ptsv2payoutsPaymentInformationCard;
    customer?: Ptsv2paymentsPaymentInformationCustomer;
  }
  export interface Ptsv2payoutsPaymentInformationCard {
    /**
     * Three-digit value that indicates the card type.  **IMPORTANT** It is strongly recommended that you include the card type field in request messages even if it is optional for your processor and card type. Omitting the card type can cause the transaction to be processed with the wrong card type.  Possible values: - `001`: Visa. For card-present transactions on all processors except SIX, the Visa Electron card type is processed the same way that the Visa debit card is processed. Use card type value `001` for Visa Electron. - `002`: Mastercard, Eurocard[^1], which is a European regional brand of Mastercard. - `003`: American Express - `004`: Discover - `005`: Diners Club - `006`: Carte Blanche[^1] - `007`: JCB[^1] - `014`: Enroute[^1] - `021`: JAL[^1] - `024`: Maestro (UK Domestic)[^1] - `031`: Delta[^1]: Use this value only for Ingenico ePayments. For other processors, use `001` for all Visa card types. - `033`: Visa Electron[^1]. Use this value only for Ingenico ePayments and SIX. For other processors, use `001` for all Visa card types. - `034`: Dankort[^1] - `036`: Cartes Bancaires[^1] - `037`: Carta Si[^1] - `039`: Encoded account number[^1] - `040`: UATP[^1] - `042`: Maestro (International)[^1] - `050`: Hipercard[^2,3] - `051`: Aura - `054`: Elo[^3] - `062`: China UnionPay  [^1]: For this card type, you must include the `paymentInformation.card.type` or `paymentInformation.tokenizedCard.type` field in your request for an authorization or a stand-alone credit. [^2]: For this card type on Cielo 3.0, you must include the `paymentInformation.card.type` or `paymentInformation.tokenizedCard.type` field in a request for an authorization or a stand-alone credit. This card type is not supported on Cielo 1.5. [^3]: For this card type on Getnet and Rede, you must include the `paymentInformation.card.type` or `paymentInformation.tokenizedCard.type` field in a request for an authorization or a stand-alone credit.  #### Used by **Authorization** Required for Carte Blanche and JCB. Optional for all other card types.  #### Card Present reply This field is included in the reply message when the client software that is installed on the POS terminal uses the token management service (TMS) to retrieve tokenized payment details. You must contact customer support to have your account enabled to receive these fields in the credit reply message.  Returned by the Credit service.  This reply field is only supported by the following processors: - American Express Direct - Credit Mutuel-CIC - FDC Nashville Global - OmniPay Direct - SIX  #### GPX This field only supports transactions from the following card types: - Visa - Mastercard - AMEX - Discover - Diners - JCB - Union Pay International
     */
    type?: string;
    /**
     * The customer’s payment card number, also known as the Primary Account Number (PAN). You can also use this field for encoded account numbers.  #### FDMS Nashville Required. String (19)  #### GPX Required if `pointOfSaleInformation.entryMode=keyed`. However, this field is optional if your account is configured for relaxed requirements for address data and expiration date. **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  #### All other processors Required if `pointOfSaleInformation.entryMode=keyed`. However, this field is optional if your account is configured for relaxed requirements for address data and expiration date. **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
     */
    number?: string;
    /**
     * Two-digit month in which the payment card expires.  Format: `MM`.  Valid values: `01` through `12`. Leading 0 is required.  #### Barclays and Streamline For Maestro (UK Domestic) and Maestro (International) cards on Barclays and Streamline, this must be a valid value (`01` through `12`) but is not required to be a valid expiration date. In other words, an expiration date that is in the past does not cause CyberSource to reject your request. However, an invalid expiration date might cause the issuer to reject your request.  #### Encoded Account Numbers For encoded account numbers (_type_=039), if there is no expiration date on the card, use `12`.  #### FDMS Nashville Required field.  #### GPX Required if `pointOfSaleInformation.entryMode=keyed`. However, this field is optional if your account is configured for relaxed requirements for address data and expiration date. **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  #### All other processors Required if `pointOfSaleInformation.entryMode=keyed`. However, this field is optional if your account is configured for relaxed requirements for address data and expiration date. **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
     */
    expirationMonth?: string;
    /**
     * Four-digit year in which the payment card expires.  Format: `YYYY`.  #### Barclays and Streamline For Maestro (UK Domestic) and Maestro (International) cards on Barclays and Streamline, this must be a valid value (`1900` through `3000`) but is not required to be a valid expiration date. In other words, an expiration date that is in the past does not cause CyberSource to reject your request. However, an invalid expiration date might cause the issuer to reject your request.  #### Encoded Account Numbers For encoded account numbers (**_type_**`=039`), if there is no expiration date on the card, use `2021`.  #### FDMS Nashville Required field.  #### FDC Nashville Global and FDMS South You can send in 2 digits or 4 digits. If you send in 2 digits, they must be the last 2 digits of the year.  #### GPX Required if `pointOfSaleInformation.entryMode=keyed`. However, this field is optional if your account is configured for relaxed requirements for address data and expiration date. **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  #### All other processors Required if `pointOfSaleInformation.entryMode=keyed`. However, this field is optional if your account is configured for relaxed requirements for address data and expiration date. **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
     */
    expirationYear?: string;
    /**
     * Flag that specifies the type of account associated with the card. The cardholder provides this information during the payment process.  This field is required in the following cases:   - Debit transactions on Cielo and Comercio Latino.   - Transactions with Brazilian-issued cards on CyberSource through VisaNet.   - Applicable only for CyberSource through VisaNet (CtV).      **Note** Combo cards in Brazil contain credit and debit functionality in a single card. Visa systems use a credit bank identification number (BIN) for this type of card. Using the BIN to determine whether a card is debit or credit can cause transactions with these cards to be processed incorrectly. CyberSource strongly recommends that you include this field for combo card transactions.  Possible values include the following.   - `CHECKING`: Checking account  - `CREDIT`: Credit card account  - `SAVING`: Saving account  - `LINE_OF_CREDIT`: Line of credit or credit portion of combo card  - `PREPAID`: Prepaid card account or prepaid portion of combo card  - `UNIVERSAL`: Universal account
     */
    sourceAccountType?: string;
  }
  export interface Ptsv2payoutsProcessingInformation {
    /**
     * Payouts transaction type.  Applicable Processors: FDC Compass, Paymentech, CtV  Possible values:  **Credit Card Bill Payment**   - **CP**: credit card bill payment  **Funds Disbursement**   - **FD**: funds disbursement  - **GD**: government disbursement  - **MD**: merchant disbursement  **Money Transfer**   - **AA**: account to account. Sender and receiver are same person.  - **PP**: person to person. Sender and receiver are different.  **Prepaid Load**   - **TU**: top up
     */
    businessApplicationId?: string;
    /**
     * This field is optionally used by Push Payments Gateway participants (merchants and acquirers) to get the attributes for specified networks only. The networks specified in this field must be a subset of the information provided during program enrollment. Refer to Sharing Group Code/Network Routing Order. Note: Supported only in US for domestic transactions involving Push Payments Gateway Service.  VisaNet checks to determine if there are issuer routing preferences for any of the networks specified by the network routing order. If an issuer preference exists for one of the specified debit networks, VisaNet makes a routing selection based on the issuer’s preference.  If an issuer preference exists for more than one of the specified debit networks, or if no issuer preference exists, VisaNet makes a selection based on the acquirer’s routing priorities.   For details, see the `network_order` field description in [BIN Lookup Service Using the SCMP API.](http://apps.cybersource.com/library/documentation/BIN_Lookup/BIN_Lookup_SCMP_API/html/)
     */
    networkRoutingOrder?: string;
    /**
     * Type of transaction.  Value for an OCT transaction: - `internet`  For details, see the `e_commerce_indicator` field description in [Payouts Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/payouts_SCMP/html/)
     */
    commerceIndicator?: string;
    /**
     * Please check with Cybersource customer support to see if your merchant account is configured correctly so you can include this field in your request. * For Payouts: max length for FDCCompass is String (22).
     */
    reconciliationId?: string;
    payoutsOptions?: Ptsv2payoutsProcessingInformationPayoutsOptions;
  }
  export interface Ptsv2payoutsProcessingInformationPayoutsOptions {
    /**
     * This field identifies the card acceptor for defining the point of service terminal in both local and interchange environments. An acquirer-assigned code identifying the card acceptor for the transaction.  Depending on the acquirer and merchant billing and reporting requirements, the code can represent a merchant, a specific merchant location, or a specific merchant location terminal. Acquiring Institution Identification Code uniquely identifies the merchant. The value from the original is required in any subsequent messages, including reversals, chargebacks, and representments. * Applicable only for CTV for Payouts.
     */
    acquirerMerchantId?: string;
    /**
     * This code identifies the financial institution acting as the acquirer of this customer transaction. The acquirer is the member or system user that signed the merchant or ADM or dispensed cash.  This number is usually Visa-assigned. * Applicable only for CTV for Payouts.
     */
    acquirerBin?: string;
    /**
     * This field contains a number that is used with other data elements as a key to identify and track all messages related to a given cardholder transaction; that is, to a given transaction set.  Format:   Positions 1-4: The `yddd` equivalent of the date, where `y` = 0-9 and `ddd` = 001 – 366.   Positions 5-12: A unique identification number generated by the merchant  * Applicable only for CTV for Payouts.
     */
    retrievalReferenceNumber?: string;
    /**
     * Visa-generated transaction identifier (TID) that is unique for each original authorization and financial request. * Applicable only for CTV for Payouts.
     */
    accountFundingReferenceId?: string;
  }
  export interface Ptsv2payoutsRecipientInformation {
    /**
     * First name of recipient. characters. * CTV (14) * Paymentech (30)
     */
    firstName?: string;
    /**
     * Middle Initial of recipient. Required only for FDCCompass.
     */
    middleInitial?: string;
    /**
     * Last name of recipient. characters. * CTV (14) * Paymentech (30)
     */
    lastName?: string;
    /**
     * Recipient address information. Required only for FDCCompass.
     */
    address1?: string;
    /**
     * Recipient city. Required only for FDCCompass.
     */
    locality?: string;
    /**
     * Recipient State. Required only for FDCCompass.
     */
    administrativeArea?: string;
    /**
     * Recipient country code. Required only for FDCCompass.
     */
    country?: string;
    /**
     * Recipient postal code. Required only for FDCCompass.
     */
    postalCode?: string;
    /**
     * Recipient phone number. Required only for FDCCompass.
     */
    phoneNumber?: string;
    /**
     * Recipient date of birth in YYYYMMDD format. Required only for FDCCompass.
     */
    dateOfBirth?: string;
  }
  export interface Ptsv2payoutsSenderInformation {
    /**
     * Reference number generated by you that uniquely identifies the sender.
     */
    referenceNumber?: string;
    account?: Ptsv2payoutsSenderInformationAccount;
    /**
     * First name of sender (Optional). * CTV (14) * Paymentech (30)
     */
    firstName?: string;
    /**
     * Recipient middle initial (Optional).
     */
    middleInitial?: string;
    /**
     * Recipient last name (Optional). * CTV (14) * Paymentech (30)
     */
    lastName?: string;
    /**
     * Name of sender.  **Funds Disbursement**  This value is the name of the originator sending the funds disbursement. * CTV, Paymentech (30)
     */
    name?: string;
    /**
     * Street address of sender.  **Funds Disbursement**  This value is the address of the originator sending the funds disbursement.
     */
    address1?: string;
    /**
     * City of sender.  **Funds Disbursement**  This value is the city of the originator sending the funds disbursement.
     */
    locality?: string;
    /**
     * Sender’s state. Use the [State, Province, and Territory Codes for the United States and Canada](https://developer.cybersource.com/library/documentation/sbc/quickref/states_and_provinces.pdf).
     */
    administrativeArea?: string;
    /**
     * Country of sender. Use the [ISO Standard Country Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/countries_alpha_list.pdf). * CTV (3)
     */
    countryCode?: string;
    /**
     * Sender’s postal code. Required only for FDCCompass.
     */
    postalCode?: string;
    /**
     * Sender’s phone number. Required only for FDCCompass.
     */
    phoneNumber?: string;
    /**
     * Sender’s date of birth in YYYYMMDD format. Required only for FDCCompass.
     */
    dateOfBirth?: string;
    /**
     * Customer's government-assigned tax identification number.
     */
    vatRegistrationNumber?: string;
  }
  export interface Ptsv2payoutsSenderInformationAccount {
    /**
     * Source of funds. Possible values:    Paymentech, CTV, FDC Compass:  - 01: Credit card  - 02: Debit card  - 03: Prepaid card    Paymentech, CTV -  - 04: Cash  - 05: Debit or deposit account that is not linked to a Visa card. Includes checking accounts, savings        accounts, and proprietary debit or ATM cards.  - 06: Credit account that is not linked to a Visa card. Includes credit cards and proprietary lines        of credit.    FDCCompass -   - 04: Deposit Account  **Funds Disbursement**  This value is most likely 05 to identify that the originator used a deposit account to fund the disbursement.  **Credit Card Bill Payment**  This value must be 02, 03, 04, or 05.
     */
    fundsSource?: string;
    /**
     * The account number of the entity funding the transaction. It is the sender’s account number. It can be a debit/credit card account number or bank account number.  **Funds disbursements**  This field is optional.  **All other transactions**  This field is required when the sender funds the transaction with a financial instrument, for example debit card. Length: * FDCCompass (<= 19) * Paymentech (<= 16)
     */
    number?: string;
  }
  export interface RefundCaptureRequest {
    clientReferenceInformation?: Ptsv2paymentsClientReferenceInformation;
    processingInformation?: Ptsv2paymentsidrefundsProcessingInformation;
    paymentInformation?: Ptsv2paymentsidrefundsPaymentInformation;
    orderInformation?: Ptsv2paymentsidrefundsOrderInformation;
    buyerInformation?: Ptsv2paymentsidcapturesBuyerInformation;
    deviceInformation?: Ptsv2paymentsidcapturesDeviceInformation;
    merchantInformation?: Ptsv2paymentsidrefundsMerchantInformation;
    aggregatorInformation?: Ptsv2paymentsidcapturesAggregatorInformation;
    pointOfSaleInformation?: Ptsv2paymentsidrefundsPointOfSaleInformation;
    /**
     * The object containing the custom data that the merchant defines.
     */
    merchantDefinedInformation?: Array<Ptsv2paymentsMerchantDefinedInformation>;
    travelInformation?: Ptsv2paymentsTravelInformation;
    promotionInformation?: Ptsv2paymentsPromotionInformation;
  }
  export interface RefundPaymentRequest {
    clientReferenceInformation?: Ptsv2paymentsClientReferenceInformation;
    processingInformation?: Ptsv2paymentsidrefundsProcessingInformation;
    paymentInformation?: Ptsv2paymentsidrefundsPaymentInformation;
    orderInformation?: Ptsv2paymentsidrefundsOrderInformation;
    buyerInformation?: Ptsv2paymentsidcapturesBuyerInformation;
    deviceInformation?: Ptsv2paymentsidcapturesDeviceInformation;
    merchantInformation?: Ptsv2paymentsidrefundsMerchantInformation;
    aggregatorInformation?: Ptsv2paymentsidcapturesAggregatorInformation;
    pointOfSaleInformation?: Ptsv2paymentsidrefundsPointOfSaleInformation;
    /**
     * The object containing the custom data that the merchant defines.
     */
    merchantDefinedInformation?: Array<Ptsv2paymentsMerchantDefinedInformation>;
    travelInformation?: Ptsv2paymentsTravelInformation;
    promotionInformation?: Ptsv2paymentsPromotionInformation;
  }
  export interface ReportingV3ConversionDetailsGet200Response {
    /**
     * Merchant Id
     */
    httpCode?: number
    organizationId?: string;
    startTime?: Date;
    endTime?: Date;
    conversionDetails?: Array<ReportingV3ConversionDetailsGet200ResponseConversionDetails>;
  }
  export interface ReportingV3ConversionDetailsGet200ResponseConversionDetails {
    /**
     * Merchant reference number of a merchant
     */
    merchantReferenceNumber?: string;
    /**
     * Date of conversion
     */
    conversionTime?: Date;
    /**
     * Cybersource Transation request id
     */
    requestId?: string;
    /**
     * Original decision
     */
    originalDecision?: string;
    /**
     * New decision
     */
    newDecision?: string;
    /**
     * User name of the reviewer
     */
    reviewer?: string;
    /**
     * Comments of the reviewer
     */
    reviewerComments?: string;
    /**
     * Name of the queue
     */
    queue?: string;
    /**
     * Name of the profile
     */
    profile?: string;
    notes?: Array<ReportingV3ConversionDetailsGet200ResponseNotes>;
  }
  export interface ReportingV3ConversionDetailsGet200ResponseNotes {
    /**
     * Time of the note added by reviewer
     */
    time?: Date;
    /**
     * Note added by reviewer
     */
    addedBy?: string;
    /**
     * Comments given by the reviewer
     */
    comments?: string;
  }
  export interface ReportingV3NetFundingsGet200Response {
    /**
     * Valid report Start Date in **ISO 8601 format**. Please refer the following link to know more about ISO 8601 format.[Rfc Date Format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)  **Example:** - yyyy-MM-dd'T'HH:mm:ss.SSSZZ
     */
    startTime?: Date;
    /**
     * Valid report End Date in **ISO 8601 format** **Example date format:** - yyyy-MM-dd'T'HH:mm:ss.SSSZZ
     */
    endTime?: Date;
    /**
     * List of Netfunding summary objects
     */
    netFundingSummaries?: Array<ReportingV3NetFundingsGet200ResponseNetFundingSummaries>;
    /**
     * List of total purchases currency wise
     */
    totalPurchases?: Array<ReportingV3NetFundingsGet200ResponseTotalPurchases>;
    /**
     * List of total refunds currency wise
     */
    totalRefunds?: Array<ReportingV3NetFundingsGet200ResponseTotalPurchases>;
    /**
     * List of total fees currency wise
     */
    totalFees?: Array<ReportingV3NetFundingsGet200ResponseTotalPurchases>;
    /**
     * List of total chargebacks currency wise
     */
    totalChargebacks?: Array<ReportingV3NetFundingsGet200ResponseTotalPurchases>;
    /**
     * List of new total currency wise
     */
    netTotal?: Array<ReportingV3NetFundingsGet200ResponseTotalPurchases>;
  }
  export interface ReportingV3NetFundingsGet200ResponseNetFundingSummaries {
    /**
     * Valid values: - PURCHASES - REFUNDS - FEES - CHARGEBACKS
     */
    type?: string;
    paymentSubType?: string;
    conveyedCount?: number;
    conveyedAmount?: string;
    settledCount?: number;
    fundedCount?: number;
    fundedAmount?: string;
    /**
     * Valid ISO 4217 ALPHA-3 currency code
     */
    currencyCode?: string;
  }
  export interface ReportingV3NetFundingsGet200ResponseTotalPurchases {
    /**
     * Valid ISO 4217 ALPHA-3 currency code
     */
    currency: string;
    value: string;
  }
  export interface ReportingV3NotificationofChangesGet200Response {
    /**
     * List of Notification Of Change Info values
     */
    notificationOfChanges?: Array<ReportingV3NotificationofChangesGet200ResponseNotificationOfChanges>;
  }
  /**
   * Notification Of Change
   */
  export interface ReportingV3NotificationofChangesGet200ResponseNotificationOfChanges {
    /**
     * Merchant Reference Number
     */
    merchantReferenceNumber?: string;
    /**
     * Transaction Reference Number
     */
    transactionReferenceNumber?: string;
    /**
     * Notification Of Change Date(ISO 8601 Extended)
     */
    time?: Date;
    /**
     * Merchant Reference Number
     */
    code?: string;
    /**
     * Account Type
     */
    accountType?: string;
    /**
     * Routing Number
     */
    routingNumber?: string;
    /**
     * Account Number
     */
    accountNumber?: string;
    /**
     * Consumer Name
     */
    consumerName?: string;
  }
  export interface ReportingV3PaymentBatchSummariesGet200Response {
    startTime?: Date;
    endTime?: Date;
    paymentBatchSummaries?: Array<ReportingV3PaymentBatchSummariesGet200ResponsePaymentBatchSummaries>;
  }
  export interface ReportingV3PaymentBatchSummariesGet200ResponsePaymentBatchSummaries {
    currencyCode?: string;
    paymentSubTypeDescription?: string;
    startTime?: Date;
    endTime?: Date;
    salesCount?: number;
    salesAmount?: string;
    creditCount?: number;
    creditAmount?: string;
    accountName?: string;
    accountId?: string;
    merchantId?: string;
    merchantName?: string;
  }
  export interface ReportingV3PurchaseRefundDetailsGet200Response {
    offset?: number;
    limit?: number;
    pageResults?: number;
    /**
     * List of Request Info values
     */
    requestDetails?: Array<ReportingV3PurchaseRefundDetailsGet200ResponseRequestDetails>;
    /**
     * List of Settlement Info values
     */
    settlements?: Array<ReportingV3PurchaseRefundDetailsGet200ResponseSettlements>;
    /**
     * List of Authorization Info values
     */
    authorizations?: Array<ReportingV3PurchaseRefundDetailsGet200ResponseAuthorizations>;
    /**
     * List of Fee Funding Info values
     */
    feeAndFundingDetails?: Array<ReportingV3PurchaseRefundDetailsGet200ResponseFeeAndFundingDetails>;
    /**
     * List of Other Info values
     */
    others?: Array<ReportingV3PurchaseRefundDetailsGet200ResponseOthers>;
    /**
     * List of Settlement Status Info values
     */
    settlementStatuses?: Array<ReportingV3PurchaseRefundDetailsGet200ResponseSettlementStatuses>;
  }
  /**
   * Authorization Info Values
   */
  export interface ReportingV3PurchaseRefundDetailsGet200ResponseAuthorizations {
    /**
     * An unique identification number assigned by CyberSource to identify the submitted request.
     */
    requestId?: string;
    /**
     * Authorization Transaction Reference Number
     */
    transactionReferenceNumber?: string;
    /**
     * Authorization Date
     */
    time?: Date;
    /**
     * Authorization Request Id
     */
    authorizationRequestId?: string;
    /**
     * Authorization Amount
     */
    amount?: string;
    /**
     * Valid ISO 4217 ALPHA-3 currency code
     */
    currencyCode?: string;
    /**
     * Authorization Code
     */
    code?: string;
    /**
     * Authorization RCode
     */
    rcode?: string;
  }
  /**
   * Fee Funding Section
   */
  export interface ReportingV3PurchaseRefundDetailsGet200ResponseFeeAndFundingDetails {
    /**
     * An unique identification number assigned by CyberSource to identify the submitted request.
     */
    requestId?: string;
    /**
     * interchange Per Item Fee
     */
    interchangePerItemFee?: string;
    /**
     * interchange Description
     */
    interchangeDescription?: string;
    /**
     * interchange Percentage
     */
    interchangePercentage?: string;
    /**
     * interchange Percentage Amount
     */
    interchangePercentageAmount?: string;
    /**
     * Discount Percentage
     */
    discountPercentage?: string;
    /**
     * Discount Amount
     */
    discountAmount?: string;
    /**
     * Discount Per Item Fee
     */
    discountPerItemFee?: string;
    /**
     * Total Fee
     */
    totalFee?: string;
    /**
     * Fee Currency
     */
    feeCurrency?: string;
    /**
     * Dues Assessments
     */
    duesAssessments?: string;
    /**
     * Funding Amount
     */
    fundingAmount?: string;
    /**
     * Funding Currency (ISO 4217)
     */
    fundingCurrency?: string;
  }
  /**
   * Other Merchant Details Values.
   */
  export interface ReportingV3PurchaseRefundDetailsGet200ResponseOthers {
    /**
     * An unique identification number assigned by CyberSource to identify the submitted request.
     */
    requestId?: string;
    /**
     * Merchant Defined Data
     */
    merchantData1?: string;
    /**
     * Merchant Defined Data
     */
    merchantData2?: string;
    /**
     * Merchant Defined Data
     */
    merchantData3?: string;
    /**
     * Merchant Defined Data
     */
    merchantData4?: string;
    /**
     * First Name
     */
    firstName?: string;
    /**
     * Last Name
     */
    lastName?: string;
  }
  /**
   * Request Info Section
   */
  export interface ReportingV3PurchaseRefundDetailsGet200ResponseRequestDetails {
    /**
     * An unique identification number assigned by CyberSource to identify the submitted request.
     */
    requestId?: string;
    /**
     * Cybersource Merchant Id
     */
    cybersourceMerchantId?: string;
    /**
     * Cybersource Processor Merchant Id
     */
    processorMerchantId?: string;
    /**
     * Group Name
     */
    groupName?: string;
    /**
     * Transaction Reference Number
     */
    transactionReferenceNumber?: string;
    /**
     * Merchant Reference Number
     */
    merchantReferenceNumber?: string;
  }
  /**
   * Settlement Status Section Values.
   */
  export interface ReportingV3PurchaseRefundDetailsGet200ResponseSettlementStatuses {
    /**
     * An unique identification number assigned by CyberSource to identify the submitted request.
     */
    requestId?: string;
    /**
     * Settlement Status
     */
    status?: string;
    /**
     * Settlement Date
     */
    settlementTime?: Date;
    /**
     * ReasonCode
     */
    reasonCode?: string;
    /**
     * errorText
     */
    errorText?: string;
  }
  export interface ReportingV3PurchaseRefundDetailsGet200ResponseSettlements {
    /**
     * An unique identification number assigned by CyberSource to identify the submitted request.
     */
    requestId?: string;
    /**
     * Transaction Type
     */
    transactionType?: string;
    /**
     * Submission Date
     */
    submissionTime?: Date;
    /**
     * Amount
     */
    amount?: string;
    /**
     * Valid ISO 4217 ALPHA-3 currency code
     */
    currencyCode?: string;
    /**
     * payment method
     */
    paymentMethod?: string;
    /**
     * Solution Type (Wallet)
     */
    walletType?: string;
    /**
     * Payment Type
     */
    paymentType?: string;
    /**
     * Account Suffix
     */
    accountSuffix?: string;
    /**
     * Cybersource Batch Time
     */
    cybersourceBatchTime?: Date;
    /**
     * Cybersource Batch Id
     */
    cybersourceBatchId?: string;
    /**
     * Card Type
     */
    cardType?: string;
    /**
     * Debit Network
     */
    debitNetwork?: string;
  }
  export interface ReportingV3ReportDefinitionsGet200Response {
    reportDefinitions?: Array<ReportingV3ReportDefinitionsGet200ResponseReportDefinitions>;
  }
  export interface ReportingV3ReportDefinitionsGet200ResponseReportDefinitions {
    type?: string;
    /**
     * | Id  |         Definition Class          | | --- | --------------------------------- | | 210 | TransactionRequestClass           | | 211 | PaymentBatchDetailClass           | | 212 | ExceptionDetailClass              | | 213 | ProcessorSettlementDetailClass    | | 214 | ProcessorEventsDetailClass        | | 215 | FundingDetailClass                | | 216 | AgingDetailClass                  | | 217 | ChargebackAndRetrievalDetailClass | | 218 | DepositDetailClass                | | 219 | FeeDetailClass                    | | 220 | InvoiceSummaryClass               | | 221 | PayerAuthDetailClass              | | 222 | ConversionDetailClass             | | 270 | JPTransactionDetailClass          | | 271 | ServiceFeeDetailClass             | | 310 | GatewayTransactionRequestClass    | | 400 | DecisionManagerEventDetailClass   | | 401 | DecisionManagerDetailClass        | | 410 | FeeSummaryClass                   | | 420 | TaxCalculationClass               | | 520 | POSTerminalExceptionClass         | | 620 | SubscriptionDetailClass           |
     */
    reportDefinitionId?: number;
    reportDefintionName?: string;
    supportedFormats?: Array<string>;
    description?: string;
    defaultSettings?: ReportingV3ReportDefinitionsNameGet200ResponseDefaultSettings;
    /**
     * 'The subscription type for which report definition is required. By default the type will be CUSTOM.' Valid Values: - CLASSIC - CUSTOM - STANDARD
     */
    subscriptionType?: string;
  }
  export interface ReportingV3ReportDefinitionsNameGet200Response {
    type?: string;
    reportDefinitionId?: number;
    reportDefintionName?: string;
    attributes?: Array<ReportingV3ReportDefinitionsNameGet200ResponseAttributes>;
    supportedFormats?: Array<string>;
    description?: string;
    defaultSettings?: ReportingV3ReportDefinitionsNameGet200ResponseDefaultSettings;
    /**
     * 'The subscription type for which report definition is required. By default the type will be CUSTOM.' Valid Values: - 'CLASSIC' - 'CUSTOM' - 'STANDARD'
     */
    subscriptionType?: string;
  }
  export interface ReportingV3ReportDefinitionsNameGet200ResponseAttributes {
    id?: string;
    name?: string;
    description?: string;
    /**
     * Attribute Filter Type.
     */
    filterType?: string;
    _default?: boolean;
    required?: boolean;
    /**
     * Valid values for the filter.
     */
    supportedType?: string;
  }
  export interface ReportingV3ReportDefinitionsNameGet200ResponseDefaultSettings {
    /**
     * Report Format Valid values:   - application/xml   - text/csv
     */
    reportMimeType?: string;
    /**
     * Report Frequency Value Valid Values:   - DAILY   - WEEKLY   - MONTHLY   - ADHOC
     */
    reportFrequency?: string;
    /**
     * Report Name
     */
    reportName?: string;
    /**
     * Time Zone
     */
    timezone?: string;
    /**
     * Start Time
     */
    startTime?: string;
    /**
     * Start Day
     */
    startDay?: number;
    /**
     * List of filters to apply
     */
    reportFilters?: { [key: string]: Array<string> };
    reportPreferences?: Reportingv3reportsReportPreferences;
  }
  export interface ReportingV3ReportSubscriptionsGet200Response {
    subscriptions?: Array<ReportingV3ReportSubscriptionsGet200ResponseSubscriptions>;
  }
  /**
   * Subscription Details
   */
  export interface ReportingV3ReportSubscriptionsGet200ResponseSubscriptions {
    /**
     * Selected Organization Id
     */
    organizationId?: string;
    /**
     * Report Definition Id
     */
    reportDefinitionId?: string;
    /**
     * Report Definition Class
     */
    reportDefinitionName?: string;
    /**
     * Report Format                          Valid values: - application/xml - text/csv
     */
    reportMimeType?: string;
    /**
     * 'Report Frequency' **NOTE: Do not document USER_DEFINED Frequency field in developer center**  Valid values: - DAILY - WEEKLY - MONTHLY - USER_DEFINED
     */
    reportFrequency?: string;
    /**
     * If the reportFrequency is User-defined, reportInterval should be in **ISO 8601 time format** Please refer the following link to know more about ISO 8601 format.[Rfc Time Format](https://en.wikipedia.org/wiki/ISO_8601#Durations)  **Example time format for 2 hours and 30 Mins:**   - PT2H30M **NOTE: Do not document reportInterval field in developer center**
     */
    reportInterval?: string;
    /**
     * Report Name
     */
    reportName?: string;
    /**
     * Time Zone
     */
    timezone?: string;
    /**
     * Start Time
     */
    startTime?: Date;
    /**
     * Start Day
     */
    startDay?: number;
    /**
     * List of all fields String values
     */
    reportFields?: Array<string>;
    /**
     * List of filters to apply
     */
    reportFilters?: { [key: string]: Array<string> };
    reportPreferences?: Reportingv3reportsReportPreferences;
    /**
     * Id for the selected group.
     */
    groupId?: string;
  }
  export interface ReportingV3ReportsGet200Response {
    reportSearchResults?: Array<ReportingV3ReportsGet200ResponseReportSearchResults>;
  }
  export interface ReportingV3ReportsGet200ResponseLink {
    reportDownload?: ReportingV3ReportsGet200ResponseLinkReportDownload;
  }
  export interface ReportingV3ReportsGet200ResponseLinkReportDownload {
    href?: string;
    method?: string;
  }
  /**
   * Report Search Result Bean
   */
  export interface ReportingV3ReportsGet200ResponseReportSearchResults {
    link?: ReportingV3ReportsGet200ResponseLink;
    /**
     * Unique Report Identifier of each report type
     */
    reportDefinitionId?: string;
    /**
     * Name of the report specified by merchant while creating the report
     */
    reportName?: string;
    /**
     * Format of the report to get generated Valid Values: - application/xml - text/csv
     */
    reportMimeType?: string;
    /**
     * Frequency of the report to get generated Valid Values: - DAILY - WEEKLY - MONTHLY - ADHOC
     */
    reportFrequency?: string;
    /**
     * Status of the report Valid Values: - COMPLETED - PENDING - QUEUED - RUNNING - ERROR - NO_DATA
     */
    status?: string;
    /**
     * Specifies the report start time in ISO 8601 format
     */
    reportStartTime?: Date;
    /**
     * Specifies the report end time in ISO 8601 format
     */
    reportEndTime?: Date;
    /**
     * Time Zone
     */
    timezone?: string;
    /**
     * Unique identifier generated for every reports
     */
    reportId?: string;
    /**
     * CyberSource Merchant Id
     */
    organizationId?: string;
    /**
     * Specifies the time of the report in queued  in ISO 8601 format
     */
    queuedTime?: Date;
    /**
     * Specifies the time of the report started to generate  in ISO 8601 format
     */
    reportGeneratingTime?: Date;
    /**
     * Specifies the time of the report completed the generation  in ISO 8601 format
     */
    reportCompletedTime?: Date;
    /**
     * Specifies whether the subscription created is either Custom, Standard or Classic
     */
    subscriptionType?: string;
    /**
     * Id for selected group.
     */
    groupId?: string;
  }
  /**
   * Report Log
   */
  export interface ReportingV3ReportsIdGet200Response {
    /**
     * CyberSource merchant id
     */
    organizationId?: string;
    /**
     * Report ID Value
     */
    reportId?: string;
    /**
     * Report definition Id
     */
    reportDefinitionId?: string;
    /**
     * Report Name
     */
    reportName?: string;
    /**
     * Report Format  Valid values: - application/xml - text/csv
     */
    reportMimeType?: string;
    /**
     * Report Frequency Value  Valid values: - DAILY - WEEKLY - MONTHLY - ADHOC
     */
    reportFrequency?: string;
    /**
     * List of Integer Values
     */
    reportFields?: Array<string>;
    /**
     * Report Status Value  Valid values: - COMPLETED - PENDING - QUEUED - RUNNING - ERROR - NO_DATA - RERUN
     */
    reportStatus?: string;
    /**
     * Report Start Time Value
     */
    reportStartTime?: Date;
    /**
     * Report End Time Value
     */
    reportEndTime?: Date;
    /**
     * Time Zone Value
     */
    timezone?: string;
    /**
     * List of filters to apply
     */
    reportFilters?: { [key: string]: Array<string> };
    reportPreferences?: Reportingv3reportsReportPreferences;
    /**
     * Id for selected group.
     */
    groupId?: string;
  }
  /**
   * HTTP status code for client application
   */
  export interface Reportingv3ReportDownloadsGet400Response {
    /**
     * Time of request in UTC.
     */
    submitTimeUtc: Date;
    /**
     * Documented reason code
     */
    reason: string;
    /**
     * Short descriptive message to the user.
     */
    message: string;
    /**
     * Error field list
     */
    details: Array<Reportingv3ReportDownloadsGet400ResponseDetails>;
  }
  /**
   * Provides failed validation input field detail
   */
  export interface Reportingv3ReportDownloadsGet400ResponseDetails {
    /**
     * Field in request that caused an error
     */
    field?: string;
    /**
     * Documented reason code
     */
    reason?: string;
  }
  /**
   * Report Preferences
   */
  export interface Reportingv3reportsReportPreferences {
    /**
     * Indicator to determine whether negative sign infront of amount for all refunded transaction
     */
    signedAmounts?: boolean;
    /**
     * Specify the field naming convention to be followed in reports (applicable to only csv report formats)  Valid values: - SOAPI - SCMP
     */
    fieldNameConvention?: string;
  }
  export interface RiskV1AddressVerificationsPost201Response {
    links?: PtsV2IncrementalAuthorizationPatch201ResponseLinks;
    /**
     * An unique identification number to identify the submitted request. It is also appended to the endpoint of the resource.  On incremental authorizations, this value with be the same as the identification number returned in the original authorization response.  #### PIN debit Returned for all PIN debit services.
     */
    id?: string;
    /**
     * Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ` **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The `T` separates the date and the time. The `Z` indicates UTC.  Returned by authorization service.  #### PIN debit Time when the PIN debit credit, PIN debit purchase or PIN debit reversal was requested.  Returned by PIN debit credit, PIN debit purchase or PIN debit reversal.
     */
    submitTimeUtc?: string;
    /**
     * Time that the transaction was submitted in local time.
     */
    submitTimeLocal?: string;
    /**
     * The status for the call can be: - COMPLETED - INVALID_REQUEST - DECLINED
     */
    status?: string;
    /**
     * The message describing the reason of the status. Value can be   - Apartment number missing or not found.   - Insufficient address information.   - House/Box number not found on street.   - Multiple address matches were found.   - P.O. Box identifier not found or out of range.   - Route service identifier not found or out of range.   - Street name not found in Postal code.   - Postal code not found in database.   - Unable to verify or correct address.   - Multiple addres matches were found (international)   - Address match not found (no reason given)   - Unsupported character set
     */
    message?: string;
    clientReferenceInformation?: PtsV2IncrementalAuthorizationPatch201ResponseClientReferenceInformation;
    addressVerificationInformation?: RiskV1AddressVerificationsPost201ResponseAddressVerificationInformation;
    errorInformation?: RiskV1AddressVerificationsPost201ResponseErrorInformation;
  }
  export interface RiskV1AddressVerificationsPost201ResponseAddressVerificationInformation {
    /**
     * Contains the record type of the postal code with which the address was matched.  #### U.S. Addresses Depending on the quantity and quality of the address information provided, this field contains one or two characters:  - One character: sufficient correct information was provided to result in accurate matching. - Two characters: standardization would provide a better address if more or better input address information were available. The second character is D (default).  Blank fields are unassigned. When an address cannot be standardized, how the input data was parsed determines the address type. In this case, standardization may indicate a street, rural route, highway contract, general delivery, or PO box. For possible values, see the description for the `dav_address_type` reply field in [CyberSource Verification Services Using the SCMP API](https://apps.cybersource.com/library/documentation/dev_guides/Verification_Svcs_SCMP_API/html/)  #### All Other Countries This field contains one of the following values: - P: Post. - S: Street. - x: Unknown.
     */
    addressType?: string;
    barCode?: RiskV1AddressVerificationsPost201ResponseAddressVerificationInformationBarCode;
    /**
     * Value can be - Canada - US - International The values of errorCode and statusCode mean different things depending on the applicable region. Refer to the guide for more info.
     */
    applicableRegion?: string;
    /**
     * Four-character error code returned for Canadian, US and international addresses. For possible values, see Verification Services guide. The meaning of the errorCode depends on value of applicableRegion.
     */
    errorCode?: string;
    /**
     * Four-to-ten character status code returned for Canadian, US and international addresses. For possible values, see Verification Services guide. The meaning of the errorCode depends on value of applicableRegion.
     */
    statusCode?: string;
    /**
     * Care of data dropped from the standard address.
     */
    careOf?: string;
    /**
     * Indicates the probable correctness of the address match. Returned for U.S. and Canadian addresses. Returns a value from 0-9, where 0 is most likely to be correct and 9 is least likely to be correct, or -1 if there is no address match.
     */
    matchScore?: number;
    standardAddress?: RiskV1AddressVerificationsPost201ResponseAddressVerificationInformationStandardAddress;
  }
  export interface RiskV1AddressVerificationsPost201ResponseAddressVerificationInformationBarCode {
    /**
     * Delivery point bar code determined from the input address.
     */
    value?: string;
    /**
     * Check digit for the 11-digit delivery point bar code.
     */
    checkDigit?: number;
  }
  export interface RiskV1AddressVerificationsPost201ResponseAddressVerificationInformationStandardAddress {
    address1?: RiskV1AddressVerificationsPost201ResponseAddressVerificationInformationStandardAddressAddress1;
    /**
     * Second line of the standardized address.
     */
    address2?: string;
    /**
     * Third line of the standardized address.
     */
    address3?: string;
    /**
     * Fourth line of the standardized address.
     */
    address4?: string;
    /**
     * Standardized city name.
     */
    locality?: string;
    /**
     * U.S. county if available.
     */
    county?: string;
    /**
     * Standardized country name.
     */
    country?: string;
    /**
     * Standardized city, state or province, and ZIP +4 code or postal code line.
     */
    csz?: string;
    /**
     * Standardized two-character ISO country code.
     */
    isoCountry?: string;
    /**
     * U.S.P.S. standardized state or province abbreviation.
     */
    administrativeArea?: string;
    /**
     * Standardized U.S. ZIP + 4 postal code.
     */
    postalCode?: string;
  }
  export interface RiskV1AddressVerificationsPost201ResponseAddressVerificationInformationStandardAddressAddress1 {
    /**
     * First line of the standardized address, including apartment information.
     */
    withApartment?: string;
    /**
     * First line of the standardized address, without apartment information. Returned for U.S. and Canadian addresses.
     */
    withoutApartment?: string;
  }
  export interface RiskV1AddressVerificationsPost201ResponseErrorInformation {
    /**
     * The reason of the status. Value can be   - `APARTMENT_NUMBER_NOT_FOUND`   - `INSUFFICIENT_ADDRESS_INFORMATION`   - `HOUSE_OR_BOX_NUMBER_NOT_FOUND`   - `MULTIPLE_ADDRESS_MATCHES`   - `BOX_NUMBER_NOT_FOUND`   - `ROUTE_SERVICE_NOT_FOUND`   - `STREET_NAME_NOT_FOUND`   - `POSTAL_CODE_NOT_FOUND`   - `UNVERIFIABLE_ADDRESS`   - `MULTIPLE_ADDRESS_MATCHES_INTERNATIONAL`   - `ADDRESS_MATCH_NOT_FOUND`   - `UNSUPPORTED_CHARACTER_SET`   - `INVALID_MERCHANT_CONFIGURATION`
     */
    reason?: string;
    /**
     * The detail message related to the status and reason listed above.
     */
    message?: string;
    details?: Array<PtsV2PaymentsPost201ResponseErrorInformationDetails>;
  }
  export interface RiskV1AuthenticationResultsPost201Response {
    links?: PtsV2IncrementalAuthorizationPatch201ResponseLinks;
    /**
     * An unique identification number to identify the submitted request. It is also appended to the endpoint of the resource.  On incremental authorizations, this value with be the same as the identification number returned in the original authorization response.  #### PIN debit Returned for all PIN debit services.
     */
    id?: string;
    /**
     * Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ` **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The `T` separates the date and the time. The `Z` indicates UTC.  Returned by authorization service.  #### PIN debit Time when the PIN debit credit, PIN debit purchase or PIN debit reversal was requested.  Returned by PIN debit credit, PIN debit purchase or PIN debit reversal.
     */
    submitTimeUtc?: string;
    /**
     * Time that the transaction was submitted in local time.
     */
    submitTimeLocal?: string;
    /**
     * The status for payerAuthentication 201 enroll and validate calls. Possible values are: - `AUTHENTICATION_SUCCESSFUL` - `PENDING_AUTHENTICATION` - `INVALID_REQUEST` - `AUTHENTICATION_FAILED`
     */
    status?: string;
    /**
     * The message describing the reason of the status. Value is: - The cardholder is enrolled in Payer Authentication. Please authenticate the cardholder before continuing with the transaction.
     */
    message?: string;
    clientReferenceInformation?: PtsV2IncrementalAuthorizationPatch201ResponseClientReferenceInformation;
    consumerAuthenticationInformation?: RiskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation;
    errorInformation?: RiskV1AuthenticationsPost201ResponseErrorInformation;
  }
  export interface RiskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation {
    /**
     * Identifies the UI Type the ACS will use to complete the challenge. **NOTE**: Only available for App transactions using the Cardinal Mobile SDK.
     */
    acsRenderingType?: string;
    /**
     * Unique transaction identifier assigned by the ACS to identify a single transaction.
     */
    acsTransactionId?: string;
    /**
     * Raw authentication data that comes from the cardissuing bank. Primary authentication field that indicates if authentication was successful and if liability shift occurred. You should examine first the result of this field. This field contains one of these values: - `-1`: Invalid PARes. - `0`: Successful validation. - `1`: Cardholder is not participating, but the attempt to authenticate was recorded. - `6`: Issuer unable to perform authentication. - `9`: Cardholder did not complete authentication.
     */
    authenticationResult?: string;
    /**
     * Message that explains the authenticationResult reply field.
     */
    authenticationStatusMsg?: string;
    /**
     * The Base64 encoded JSON Payload of CB specific Authorization Values returned in the challenge Flow
     */
    authorizationPayload?: string;
    /**
     * Unique identifier generated by the card-issuing bank for Visa, American Express, JCB, Diners Club, and Discover transactions after the customer is authenticated. The value is in base64. When you request the card authorization service, CyberSource automatically converts the value, not the field name, to the format required by your payment processor.
     */
    cavv?: string;
    /**
     * Field that is returned only when the CAVV is generated, which occurs when paresStatus contains the values Y (successful authentication) or A (attempted authentication). If you use the ATOS processor, send the value of this field in the `cavv_algorithm` request field of the authorization service. This field contains one of these values: - `2`: Visa, American Express, JCB, Diners Club, and Discover - `3`: Mastercard
     */
    cavvAlgorithm?: string;
    /**
     * The directory server error code indicating a problem with this transaction.
     */
    directoryServerErrorCode?: string;
    /**
     * Directory server text and additional detail about the error for this transaction.
     */
    directoryServerErrorDescription?: string;
    /**
     * Indicator used to differentiate Internet transactions from other types. The authentication failed if this field is not returned. For Visa, if your payment processor is Streamline, Barclays, AIBMS, or FDC Germany, you receive the value vbv_failure instead of internet when eci is 07. The value of this field is passed automatically to the authorization service if you request the services together. This field contains one of these values: - `aesk`: American Express SafeKey authentication verified successfully. - `aesk_attempted`: Card not enrolled in American Express SafeKey, but the attempt to authenticate was recorded. - `dipb`: Discover ProtectBuy authentication verified successfully. - `dipb_attempted`: Card not enrolled in Discover ProtectBuy, but the attempt to authenticate was recorded. - `internet`: Authentication was not verified successfully. - `js`: J/Secure authentication verified successfully. - `js_attempted`: Card not enrolled in J/Secure, but the attempt to authenticate was recorded. - `moto`: Mail or telephone order. - `pb_attempted`: Card not enrolled in Diners Club ProtectBuy, but the attempt to authenticate was recorded. - `recurring`: Recurring transaction. - `spa`: Mastercard Identity Check authentication verified successfully. - `spa_failure`: Mastercard Identity Check failed authentication. - `vbv`: Visa Secure authentication verified successfully. - `vbv_attempted`: Card not enrolled in Visa Secure, but the attempt to authenticate was recorded. - `vbv_failure`: Visa Secure authentication unavailable.
     */
    indicator?: string;
    /**
     * Indicates the number of authentication cycles attempted by the cardholder and is tracked by the Issuing Banks ACS.Example: if customer gets the challenge window and enter in their one time password and hit submit then that interaction counter should just be 1. When customer gets the challenge window and the bank asks if they want to have the one time password  sent to their phone or their email and they have to choose before going to the next screen to enter in their one time password then this interaction count would be 2. One for the selection of how they want the one time password delivered and another with them actually entering in the one time password and hitting the submit button.
     */
    interactionCounter?: string;
    /**
     * Note This field applies only to non-U.S-issued cards.  For enroll, Numeric electronic commerce indicator (ECI) returned only for Visa, American Express, JCB, Diners Club, and Discover transactions when the card is not enrolled. For more information, see \"Interpreting the Reply,\" page 22.  If you are not using the CyberSource payment services, you must send this value to your payment processor in the subsequent request for card authorization. This field contains one of these values: - `06`: The card can be enrolled. Liability shift. - `07`: The card cannot be enrolled. No liability shift.  For validate, Numeric electronic commerce indicator (ECI) returned only for Visa, American Express, JCB, Diners Club, and Discover transactions. The field is absent when authentication fails. You must send this value to your payment processor in the subsequent request for card authorization. This field contains one of these values: - `05`: Successful authentication - `06`: Authentication attempted - `07`: Failed authentication (No response from the merchant because of a problem.)
     */
    eci?: string;
    eciRaw?: string;
    /**
     * Raw result of the authentication check. If you are configured for Asia, Middle East, and Africa Gateway Processing, you need to send the value of this field in your authorization request. This field can contain one of these values: - `A`: Proof of authentication attempt was generated. - `N`: Customer failed or canceled authentication. Transaction denied. - `U`: Authentication not completed regardless of the reason. - `Y`: Customer was successfully authenticated.
     */
    paresStatus?: string;
    /**
     * SDK unique transaction identifier that is generated on each new transaction.
     */
    sdkTransactionId?: string;
    /**
     * This field contains the 3D Secure version that was used to process the transaction. For example, 1.0.2 or 2.0.0.
     */
    specificationVersion?: string;
    /**
     * Unique transaction identifier assigned by the 3DS Server to identify a single transaction.
     */
    threeDSServerTransactionId?: string;
    /**
     * AAV is a unique identifier generated by the card-issuing bank for Mastercard Identity Check transactions after the customer is authenticated. The value is in base64. Include the data in the card authorization request.
     */
    ucafAuthenticationData?: string;
    /**
     * For enroll, Returned only for Mastercard transactions. Indicates that authentication is not required because the customer is not enrolled. Add the value of this field to the authorization field ucaf_collection_indicator. This field can contain these values: 0, 1.  For validate, Numeric electronic commerce indicator (ECI) returned only for Mastercard Identity Check transactions. The field is absent when authentication fails. You must send this value to your payment processor in the request for card authorization. This field contain one of these values: - `0`: Authentication data not collected, and customer authentication was not completed. - `1`: Authentication data not collected because customer authentication was not completed. - `2`: Authentication data collected because customer completed authentication.
     */
    ucafCollectionIndicator?: string;
    /**
     * Enables the communication of trusted beneficiary/whitelist status between the ACS, the DS and the 3DS Requestor.  Possible Values:  Y - 3DS Requestor is whitelisted by cardholder  N - 3DS Requestor is not whitelisted by cardholder
     */
    whiteListStatus?: string;
    /**
     * This data element will be populated by the system setting Whitelist Status. Possible Values: 01 - 3DS/ Server/ 02 – DS/03 - ACS
     */
    whiteListStatusSource?: string;
    /**
     * Transaction identifier generated by CyberSource for successful enrollment or validation checks. Use this value, which is in base64, to match an outgoing PAReq with an incoming PARes. CyberSource forwards the XID with the card authorization service to these payment processors in these cases: - Barclays - Streamline (when the **ecommerceIndicator**`=spa`)
     */
    xid?: string;
    /**
     * The Directory Server Transaction ID is generated by the Mastercard Directory Server during the authentication transaction and passed back to the merchant with the authentication results. For Cybersource Through Visanet Gateway: The value for this field corresponds to the following data in the TC 33 capture file3: Record: CP01 TCR7, Position: 114-149, Field: MC AVV Verification—Directory Server Transaction ID
     */
    directoryServerTransactionId?: string;
  }
  export interface RiskV1AuthenticationSetupsPost201Response {
    links?: PtsV2IncrementalAuthorizationPatch201ResponseLinks;
    /**
     * An unique identification number to identify the submitted request. It is also appended to the endpoint of the resource.  On incremental authorizations, this value with be the same as the identification number returned in the original authorization response.  #### PIN debit Returned for all PIN debit services.
     */
    id?: string;
    /**
     * Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ` **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The `T` separates the date and the time. The `Z` indicates UTC.  Returned by authorization service.  #### PIN debit Time when the PIN debit credit, PIN debit purchase or PIN debit reversal was requested.  Returned by PIN debit credit, PIN debit purchase or PIN debit reversal.
     */
    submitTimeUtc?: string;
    /**
     * The status for payerAuthentication 201 setup calls. Possible value is: - COMPLETED - FAILED
     */
    status?: string;
    consumerAuthenticationInformation?: RiskV1AuthenticationSetupsPost201ResponseConsumerAuthenticationInformation;
    errorInformation?: RiskV1AuthenticationSetupsPost201ResponseErrorInformation;
  }
  export interface RiskV1AuthenticationSetupsPost201ResponseConsumerAuthenticationInformation {
    /**
     * JSON Web Token (JWT) used to authenticate the consumer with the authentication provider, such as, CardinalCommerce or Rupay.
     */
    accessToken?: string;
    /**
     * This identifier represents cardinal has started device data collection session and this must be passed in Authentication JWT to Cardinal when invoking the deviceDataCollectionUrl.
     */
    referenceId?: string;
    /**
     * The deviceDataCollectionUrl is the location to send the Authentication JWT when invoking the Device Data collection process.
     */
    deviceDataCollectionUrl?: string;
  }
  export interface RiskV1AuthenticationSetupsPost201ResponseErrorInformation {
    /**
     * The reason of the status.  Possible values:  - EXPIRED_CARD  - GENERAL_DECLINE
     */
    reason?: string;
    /**
     * The detail message related to the status and reason listed above.
     */
    message?: string;
    details?: Array<PtsV2PaymentsPost201ResponseErrorInformationDetails>;
  }
  export interface RiskV1AuthenticationsPost201Response {
    links?: PtsV2IncrementalAuthorizationPatch201ResponseLinks;
    /**
     * An unique identification number to identify the submitted request. It is also appended to the endpoint of the resource.  On incremental authorizations, this value with be the same as the identification number returned in the original authorization response.  #### PIN debit Returned for all PIN debit services.
     */
    id?: string;
    /**
     * Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ` **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The `T` separates the date and the time. The `Z` indicates UTC.  Returned by authorization service.  #### PIN debit Time when the PIN debit credit, PIN debit purchase or PIN debit reversal was requested.  Returned by PIN debit credit, PIN debit purchase or PIN debit reversal.
     */
    submitTimeUtc?: string;
    /**
     * Time that the transaction was submitted in local time.
     */
    submitTimeLocal?: string;
    /**
     * The status for payerAuthentication 201 enroll and validate calls. Possible values are: - `AUTHENTICATION_SUCCESSFUL` - `PENDING_AUTHENTICATION` - `INVALID_REQUEST` - `AUTHENTICATION_FAILED`
     */
    status?: string;
    /**
     * The message describing the reason of the status. Value is: - The cardholder is enrolled in Payer Authentication. Please authenticate the cardholder before continuing with the transaction.
     */
    message?: string;
    clientReferenceInformation?: PtsV2IncrementalAuthorizationPatch201ResponseClientReferenceInformation;
    orderInformation?: RiskV1DecisionsPost201ResponseOrderInformation;
    consumerAuthenticationInformation?: RiskV1DecisionsPost201ResponseConsumerAuthenticationInformation;
    errorInformation?: RiskV1AuthenticationsPost201ResponseErrorInformation;
  }
  export interface RiskV1AuthenticationsPost201ResponseErrorInformation {
    /**
     * The reason of the status. Possible values are: - `INVALID_MERCHANT_CONFIGURATION` - `PENDING_AUTHENTICATION` - `AUTHENTICATION_FAILED`
     */
    reason?: string;
    /**
     * The detail message related to the status and reason listed above.
     */
    message?: string;
    details?: Array<PtsV2PaymentsPost201ResponseErrorInformationDetails>;
  }
  export interface RiskV1AuthenticationsPost400Response {
    /**
     * Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ` **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The `T` separates the date and the time. The `Z` indicates UTC.  Returned by authorization service.  #### PIN debit Time when the PIN debit credit, PIN debit purchase or PIN debit reversal was requested.  Returned by PIN debit credit, PIN debit purchase or PIN debit reversal.
     */
    submitTimeUtc?: string;
    /**
     * The status for payerAuthentication 400 setup calls. Possible values are: - INVALID_REQUEST
     */
    status?: string;
    /**
     * The reason of the status.
     */
    reason?: string;
    /**
     * The message describing the reason of the status. Value is: - Encountered a Payer Authentication problem. Payer could not be setup.
     */
    message?: string;
    details?: Array<PtsV2PaymentsPost201ResponseErrorInformationDetails>;
  }
  export interface RiskV1AuthenticationsPost400Response1 {
    /**
     * Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ` **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The `T` separates the date and the time. The `Z` indicates UTC.  Returned by authorization service.  #### PIN debit Time when the PIN debit credit, PIN debit purchase or PIN debit reversal was requested.  Returned by PIN debit credit, PIN debit purchase or PIN debit reversal.
     */
    submitTimeUtc?: string;
    /**
     * The status for payerAuthentication 201 enroll and validate calls. Value is: - `INVALID_REQUEST`
     */
    status?: string;
    /**
     * The reason of the status.  Possible Values: - `MISSING_FIELD` - `INVALID_DATA`
     */
    reason?: string;
    /**
     * The message describing the reason of the status. Value is: - Encountered a Payer Authentication problem. Payer could not be authenticated.
     */
    message?: string;
    details?: Array<PtsV2PaymentsPost201ResponseErrorInformationDetails>;
  }
  export interface RiskV1DecisionsPost201Response {
    links?: PtsV2PaymentsPost201ResponseLinks;
    /**
     * An unique identification number to identify the submitted request. It is also appended to the endpoint of the resource.  On incremental authorizations, this value with be the same as the identification number returned in the original authorization response.  #### PIN debit Returned for all PIN debit services.
     */
    id?: string;
    /**
     * Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ` **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The `T` separates the date and the time. The `Z` indicates UTC.  Returned by authorization service.  #### PIN debit Time when the PIN debit credit, PIN debit purchase or PIN debit reversal was requested.  Returned by PIN debit credit, PIN debit purchase or PIN debit reversal.
     */
    submitTimeUtc?: string;
    /**
     * Time that the transaction was submitted in local time.
     */
    submitTimeLocal?: string;
    /**
     * The status of the submitted transaction.  Possible values:   - `ACCEPTED`   - `REJECTED`   - `PENDING_REVIEW`   - `DECLINED`   - `PENDING_AUTHENTICATION`   - `INVALID_REQUEST`   - `AUTHENTICATION_FAILED`   - `CHALLENGE`
     */
    status?: string;
    riskInformation?: PtsV2PaymentsPost201ResponseRiskInformation;
    paymentInformation?: RiskV1DecisionsPost201ResponsePaymentInformation;
    clientReferenceInformation?: PtsV2IncrementalAuthorizationPatch201ResponseClientReferenceInformation;
    orderInformation?: RiskV1DecisionsPost201ResponseOrderInformation;
    consumerAuthenticationInformation?: RiskV1DecisionsPost201ResponseConsumerAuthenticationInformation;
    errorInformation?: RiskV1DecisionsPost201ResponseErrorInformation;
  }
  export interface RiskV1DecisionsPost201ResponseConsumerAuthenticationInformation {
    /**
     * JSON Web Token (JWT) used to authenticate the consumer with the authentication provider, such as, CardinalCommerce or Rupay.
     */
    accessToken?: string;
    /**
     * Identifies the UI Type the ACS will use to complete the challenge. **NOTE**: Only available for App transactions using the Cardinal Mobile SDK.
     */
    acsRenderingType?: string;
    /**
     * Unique transaction identifier assigned by the ACS to identify a single transaction.
     */
    acsTransactionId?: string;
    /**
     * URL for the card-issuing bank’s authentication form that you receive when the card is enrolled. The value can be very large.
     */
    acsUrl?: string;
    /**
     * Indicates what displays to the customer during the authentication process. This field can contain one of these values: - `ADS`: (Card not enrolled) customer prompted to activate the card during the checkout process. - `ATTEMPTS`: (Attempts processing) Processing briefly displays before the checkout process is completed. - `ENROLLED`: (Card enrolled) the card issuer’s authentication window displays. - `UNKNOWN`: Card enrollment status cannot be determined. - `NOREDIRECT`: (Card not enrolled, authentication unavailable, or error occurred) nothing displays to the customer.  The following values can be returned if you are using rules-based payer authentication. - `RIBA`: The card-issuing bank supports risk-based authentication, but whether the cardholder is likely to be challenged cannot be determined. - `RIBA_PASS`: The card-issuing bank supports risk-based authentication and it is likely that the cardholder will not be challenged to provide credentials, also known as _silent authentication_.  For details about possible values, see `pa_enroll_authentication_path` field description and \"Rules-Based Payer Authentication\" in [CyberSource Payer Authentication Using the SCMP API.] (https://apps.cybersource.com/library/documentation/dev_guides/Payer_Authentication_SCMP_API/html/)
     */
    authenticationPath?: string;
    /**
     * The Base64 encoded JSON Payload of CB specific Authorization Values returned in the challenge Flow
     */
    authorizationPayload?: string;
    /**
     * Payer authentication transaction identifier passed to link the check enrollment and validate authentication messages.
     */
    authenticationTransactionId?: string;
    /**
     * Text provided by the ACS/Issuer to Cardholder during a Frictionless or Decoupled transaction.The Issuer can provide information to Cardholder. For example, “Additional authentication is needed for this transaction, please contact (Issuer Name) at xxx-xxx-xxxx.”. The Issuing Bank can optionally support this value.
     */
    cardholderMessage?: string;
    /**
     * Unique identifier generated by the card-issuing bank for Visa, American Express, JCB, Diners Club, and Discover transactions after the customer is authenticated. The value is in base64. When you request the card authorization service, CyberSource automatically converts the value, not the field name, to the format required by your payment processor.
     */
    cavv?: string;
    /**
     * Field that is returned only when the CAVV is generated, which occurs when paresStatus contains the values Y (successful authentication) or A (attempted authentication). If you use the ATOS processor, send the value of this field in the `cavv_algorithm` request field of the authorization service. This field contains one of these values: - `2`: Visa, American Express, JCB, Diners Club, and Discover - `3`: Mastercard
     */
    cavvAlgorithm?: string;
    /**
     * An indicator as to why the transaction was canceled. Possible Values:  - `01`: Cardholder selected Cancel. - `02`: Reserved for future EMVCo use (values invalid until defined by EMVCo). - `03`: Transaction Timed Out—Decoupled Authentication - `04`: Transaction timed out at ACS—other timeouts - `05`: Transaction Timed out at ACS - First CReq not received by ACS - `06`: Transaction Error - `07`: Unknown - `08`: Transaction Timed Out at SDK
     */
    challengeCancelCode?: string;
    /**
     * Indicates whether a challenge is required in order to complete authentication. **Note** Regional mandates might determine that a challenge is required.  Possible values: - `Y`: Challenge required - `N`: Challenge not required **Note**  Used by the Hybrid integration.
     */
    challengeRequired?: string;
    /**
     * Indicates whether the 3DS Requestor requests the ACS to utilize Decoupled Authentication and agrees to utilize Decoupled Authentication if the ACS confirms its use.  Possible Values:  Y - Decoupled Authentication is supported and preferred if challenge is necessary  N - Do not use Decoupled Authentication  **Default Value**: N
     */
    decoupledAuthenticationIndicator?: string;
    /**
     * The directory server error code indicating a problem with this transaction.
     */
    directoryServerErrorCode?: string;
    /**
     * Directory server text and additional detail about the error for this transaction.
     */
    directoryServerErrorDescription?: string;
    /**
     * Commerce indicator for cards not enrolled. This field contains one of these values: - `internet`: Card not enrolled, or card type not supported by payer authentication. No liability shift. - `js_attempted`: Card not enrolled, but attempt to authenticate is recorded. Liability shift. - `js_failure`: J/Secure directory service is not available. No liability shift. - `spa`: Mastercard card not enrolled in the SecureCode program. No liability shift. - `vbv_attempted`: Card not enrolled, but attempt to authenticate is recorded. Liability shift. - `vbv_failure`: For payment processor Barclays, Streamline, AIBMS, or FDC Germany, you receive this result if Visa’s directory service is not available. No liability shift.
     */
    ecommerceIndicator?: string;
    /**
     * Note This field applies only to non-U.S-issued cards.  For enroll, Numeric electronic commerce indicator (ECI) returned only for Visa, American Express, JCB, Diners Club, and Discover transactions when the card is not enrolled. For more information, see \"Interpreting the Reply,\" page 22.  If you are not using the CyberSource payment services, you must send this value to your payment processor in the subsequent request for card authorization. This field contains one of these values: - `06`: The card can be enrolled. Liability shift. - `07`: The card cannot be enrolled. No liability shift.  For validate, Numeric electronic commerce indicator (ECI) returned only for Visa, American Express, JCB, Diners Club, and Discover transactions. The field is absent when authentication fails. You must send this value to your payment processor in the subsequent request for card authorization. This field contains one of these values: - `05`: Successful authentication - `06`: Authentication attempted - `07`: Failed authentication (No response from the merchant because of a problem.)
     */
    eci?: string;
    eciRaw?: string;
    /**
     * This field describes the type of 3DS transaction flow that took place.  It can be one of three possible flows; CH - Challenge FR - Frictionless FD - Frictionless with delegation, (challenge not generated by the issuer but by the scheme on behalf of the issuer).
     */
    effectiveAuthenticationType?: string;
    ivr?: PtsV2PaymentsPost201ResponseConsumerAuthenticationInformationIvr;
    /**
     * The global score calculated by the CB scoring platform and returned to merchants.
     */
    networkScore?: string;
    /**
     * Payer authentication request (PAReq) message that you need to forward to the ACS. The value can be very large. The value is in base64.
     */
    pareq?: string;
    /**
     * Raw result of the authentication check. If you are configured for Asia, Middle East, and Africa Gateway Processing, you need to send the value of this field in your authorization request. This field can contain one of these values: - `A`: Proof of authentication attempt was generated. - `N`: Customer failed or canceled authentication. Transaction denied. - `U`: Authentication not completed regardless of the reason. - `Y`: Customer was successfully authenticated.
     */
    paresStatus?: string;
    /**
     * Date and time of the enrollment check combined with the VEReq and VERes elements. If you ever need to show proof of enrollment checking, you may need to parse the string for the information required by the payment card company. The value can be very large. For details about possible values, see the `pa_enroll_proofxml` field description in [CyberSource Payer Authentication Using the SCMP API.] (https://apps.cybersource.com/library/documentation/dev_guides/Payer_Authentication_SCMP_API/html/) - For cards issued in the U.S. or Canada, Visa may require this data for specific merchant category codes. - For cards not issued in the U.S. or Canada, your bank may require this data as proof of enrollment checking for any payer authentication transaction that you re-present because of a chargeback.
     */
    proofXml?: string;
    /**
     * Encrypted version of the card number used in the payer authentication request message.
     */
    proxyPan?: string;
    /**
     * SDK unique transaction identifier that is generated on each new transaction.
     */
    sdkTransactionId?: string;
    /**
     * Provides additional information as to why the PAResStatus has a specific value.
     */
    signedParesStatusReason?: string;
    /**
     * This field contains the 3D Secure version that was used to process the transaction. For example, 1.0.2 or 2.0.0.
     */
    specificationVersion?: string;
    /**
     * The fully qualified URL that the merchant uses to post a form to the cardholder in order to complete the Consumer Authentication transaction for the Cardinal Cruise API integration.
     */
    stepUpUrl?: string;
    /**
     * Unique transaction identifier assigned by the 3DS Server to identify a single transaction.
     */
    threeDSServerTransactionId?: string;
    /**
     * AAV is a unique identifier generated by the card-issuing bank for Mastercard Identity Check transactions after the customer is authenticated. The value is in base64. Include the data in the card authorization request.
     */
    ucafAuthenticationData?: string;
    /**
     * For enroll, Returned only for Mastercard transactions. Indicates that authentication is not required because the customer is not enrolled. Add the value of this field to the authorization field ucaf_collection_indicator. This field can contain these values: 0, 1.  For validate, Numeric electronic commerce indicator (ECI) returned only for Mastercard Identity Check transactions. The field is absent when authentication fails. You must send this value to your payment processor in the request for card authorization. This field contain one of these values: - `0`: Authentication data not collected, and customer authentication was not completed. - `1`: Authentication data not collected because customer authentication was not completed. - `2`: Authentication data collected because customer completed authentication.
     */
    ucafCollectionIndicator?: string;
    /**
     * Result of the enrollment check. This field can contain one of these values: - `Y`: Card enrolled or can be enrolled; you must authenticate. Liability shift. - `N`: Card not enrolled; proceed with authorization. Liability shift. - `U`: Unable to authenticate regardless of the reason. No liability shift.  **Note** This field only applies to the Asia, Middle East, and Africa Gateway. If you are configured for this processor, you must send the value of this field in your authorization request.  The following value can be returned if you are using rules-based Payer Authentication: - `B`: Indicates that authentication was bypassed.  For details, see `pa_enroll_veres_enrolled` field description in [CyberSource Payer Authentication Using the SCMP API.] (https://apps.cybersource.com/library/documentation/dev_guides/Payer_Authentication_SCMP_API/html/)
     */
    veresEnrolled?: string;
    /**
     * This data element will be populated by the system setting Whitelist Status. Possible Values: 01 - 3DS/ Server/ 02 – DS/03 - ACS
     */
    whiteListStatusSource?: string;
    /**
     * Transaction identifier generated by CyberSource for successful enrollment or validation checks. Use this value, which is in base64, to match an outgoing PAReq with an incoming PARes. CyberSource forwards the XID with the card authorization service to these payment processors in these cases: - Barclays - Streamline (when the **ecommerceIndicator**`=spa`)
     */
    xid?: string;
    /**
     * The Directory Server Transaction ID is generated by the Mastercard Directory Server during the authentication transaction and passed back to the merchant with the authentication results. For Cybersource Through Visanet Gateway: The value for this field corresponds to the following data in the TC 33 capture file3: Record: CP01 TCR7, Position: 114-149, Field: MC AVV Verification—Directory Server Transaction ID
     */
    directoryServerTransactionId?: string;
  }
  export interface RiskV1DecisionsPost201ResponseErrorInformation {
    /**
     * The reason of the status.  Possible values:  - `EXPIRED_CARD`  - `SCORE_EXCEEDS_THRESHOLD`  - `DECISION_PROFILE_REVIEW`  - `DECISION_PROFILE_REJECT`  - `PENDING_AUTHENTICATION`  - `INVALID_MERCHANT_CONFIGURATION`  - `AUTHENTICATION_FAILED`  - `DECISION_PROFILE_CHALLENGE`
     */
    reason?: string;
    /**
     * The detail message related to the status and reason listed above.
     */
    message?: string;
    details?: Array<PtsV2PaymentsPost201ResponseErrorInformationDetails>;
  }
  export interface RiskV1DecisionsPost201ResponseOrderInformation {
    amountDetails?: RiskV1DecisionsPost201ResponseOrderInformationAmountDetails;
  }
  export interface RiskV1DecisionsPost201ResponseOrderInformationAmountDetails {
    /**
     * Currency used for the order. Use the three-character [ISO Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf)  #### Used by **Authorization** Required field.  **Authorization Reversal** For an authorization reversal (`reversalInformation`) or a capture (`processingOptions.capture` is set to `true`), you must use the same currency that you used in your payment authorization request.  #### PIN Debit Currency for the amount you requested for the PIN debit purchase. This value is returned for partial authorizations. The issuing bank can approve a partial amount if the balance on the debit card is less than the requested transaction amount. For the possible values, see the [ISO Standard Currency Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/currencies.pdf). Returned by PIN debit purchase.  For PIN debit reversal requests, you must use the same currency that was used for the PIN debit purchase or PIN debit credit that you are reversing. For the possible values, see the [ISO Standard Currency Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/currencies.pdf).  Required field for PIN Debit purchase and PIN Debit credit requests. Optional field for PIN Debit reversal requests.  #### GPX This field is optional for reversing an authorization or credit.  #### DCC for First Data Your local currency. For details, see the `currency` field description in [Dynamic Currency Conversion For First Data Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/DCC_FirstData_SCMP/DCC_FirstData_SCMP_API.pdf).  #### Tax Calculation Required for international tax and value added tax only. Optional for U.S. and Canadian taxes. Your local currency.
     */
    currency?: string;
  }
  /**
   * Contains response information about the payment.
   */
  export interface RiskV1DecisionsPost201ResponsePaymentInformation {
    /**
     * Country (two-digit country code) associated with the BIN of the customer’s card used for the payment. Returned if the information is available. Use this field for additional information when reviewing orders. This information is also displayed in the details page of the CyberSource Business Center.  For all possible values, see the `bin_country` field description in the _Decision Manager Using the SCMP API Developer Guide_ on the [CyberSource Business Center.](https://ebc2.cybersource.com/ebc2/) Click **Decision Manager** > **Documentation** > **Guides** > _Decision Manager Using the SCMP API Developer Guide_ (PDF link).
     */
    binCountry?: string;
    /**
     * Type of payment card account. This field can refer to a credit card, debit card, or prepaid card account type.  For all possible values, see the `score_card_account_type` field description in the _Decision Manager Using the SCMP API Developer Guide_ on the [CyberSource Business Center.](https://ebc2.cybersource.com/ebc2/) Click **Decision Manager** > **Documentation** > **Guides** > _Decision Manager Using the SCMP API Developer Guide_ (PDF link).
     */
    accountType?: string;
    /**
     * Name of the bank or entity that issued the card account.  For all possible values, see the `score_card_issuer` field description in the _Decision Manager Using the SCMP API Developer Guide_ on the [CyberSource Business Center.](https://ebc2.cybersource.com/ebc2/) Click **Decision Manager** > **Documentation** > **Guides** > _Decision Manager Using the SCMP API Developer Guide_ (PDF link).
     */
    issuer?: string;
    /**
     * Subtype of card account. This field can contain one of the following values: - Maestro International - Maestro UK Domestic - MasterCard Credit - MasterCard Debit - Visa Credit - Visa Debit - Visa Electron  **Note** Additional values may be present.  For all possible values, see the `score_card_scheme` field description in the _Decision Manager Using the SCMP API Developer Guide_ on the [CyberSource Business Center.](https://ebc2.cybersource.com/ebc2/) Click **Decision Manager** > **Documentation** > **Guides** > _Decision Manager Using the SCMP API Developer Guide_ (PDF link).
     */
    scheme?: string;
    /**
     * Credit card BIN (the first six digits of the credit card).Derived either from the `cc_bin` request field or from the first six characters of the `customer_cc_num` field.  For all possible values, see the `score_cc_bin` field description in the _Decision Manager Using the SCMP API Developer Guide_ on the [CyberSource Business Center.](https://ebc2.cybersource.com/ebc2/) Click **Decision Manager** > **Documentation** > **Guides** > _Decision Manager Using the SCMP API Developer Guide_ (PDF link).
     */
    bin?: string;
  }
  export interface RiskV1DecisionsPost400Response {
    /**
     * Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ` **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The `T` separates the date and the time. The `Z` indicates UTC.  Returned by authorization service.  #### PIN debit Time when the PIN debit credit, PIN debit purchase or PIN debit reversal was requested.  Returned by PIN debit credit, PIN debit purchase or PIN debit reversal.
     */
    submitTimeUtc?: string;
    /**
     * The status of the submitted transaction.  Possible values:  - `INVALID_REQUEST`  - `DECLINED`
     */
    status?: string;
    /**
     * The reason of the status.  Possible values:  - `MISSING_FIELD`  - `INVALID_DATA`  - `INVALID_ACCOUNT`
     */
    reason?: string;
    /**
     * The detail message related to the status and reason listed above.
     */
    message?: string;
    details?: Array<PtsV2PaymentsPost201ResponseErrorInformationDetails>;
  }
  export interface RiskV1DecisionsPost400Response1 {
    /**
     * Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ` **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The `T` separates the date and the time. The `Z` indicates UTC.  Returned by authorization service.  #### PIN debit Time when the PIN debit credit, PIN debit purchase or PIN debit reversal was requested.  Returned by PIN debit credit, PIN debit purchase or PIN debit reversal.
     */
    submitTimeUtc?: string;
    /**
     * The status of the submitted transaction.  Possible values:  - INVALID_REQUEST
     */
    status?: string;
    /**
     * The reason of the status.  Possible Values: - `MISSING_FIELD` - `INVALID_DATA`
     */
    reason?: string;
    /**
     * The detail message related to the status and reason listed above.
     */
    message?: string;
    details?: Array<PtsV2PaymentsPost201ResponseErrorInformationDetails>;
  }
  export interface RiskV1ExportComplianceInquiriesPost201Response {
    links?: PtsV2IncrementalAuthorizationPatch201ResponseLinks;
    /**
     * An unique identification number to identify the submitted request. It is also appended to the endpoint of the resource.  On incremental authorizations, this value with be the same as the identification number returned in the original authorization response.  #### PIN debit Returned for all PIN debit services.
     */
    id?: string;
    /**
     * Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ` **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The `T` separates the date and the time. The `Z` indicates UTC.  Returned by authorization service.  #### PIN debit Time when the PIN debit credit, PIN debit purchase or PIN debit reversal was requested.  Returned by PIN debit credit, PIN debit purchase or PIN debit reversal.
     */
    submitTimeUtc?: string;
    /**
     * Time that the transaction was submitted in local time.
     */
    submitTimeLocal?: string;
    /**
     * The status for the call can be: - COMPLETED - INVALID_REQUEST - DECLINED
     */
    status?: string;
    /**
     * The message describing the reason of the status. Value can be   - The customer matched the Denied Parties List   - The Export bill_country/ship_country  match   - Export email_country match   - Export hostname_country/ip_country match
     */
    message?: string;
    clientReferenceInformation?: PtsV2IncrementalAuthorizationPatch201ResponseClientReferenceInformation;
    exportComplianceInformation?: RiskV1ExportComplianceInquiriesPost201ResponseExportComplianceInformation;
    errorInformation?: RiskV1ExportComplianceInquiriesPost201ResponseErrorInformation;
  }
  export interface RiskV1ExportComplianceInquiriesPost201ResponseErrorInformation {
    /**
     * The reason of the status. Value can be   - `CUSTOMER_WATCHLIST_MATCH`   - `ADDRESS_COUNTRY_WATCHLIST_MATCH`   - `EMAIL_COUNTRY_WATCHLIST_MATCH`   - `IP_COUNTRY_WATCHLIST_MATCH`   - `INVALID_MERCHANT_CONFIGURATION`
     */
    reason?: string;
    /**
     * The detail message related to the status and reason listed above.
     */
    message?: string;
    details?: Array<PtsV2PaymentsPost201ResponseErrorInformationDetails>;
  }
  export interface RiskV1ExportComplianceInquiriesPost201ResponseExportComplianceInformation {
    /**
     * Likelihood that the country associated with the customer’s IP address was identified correctly. Returns a value from 1–100, where 100 indicates the highest likelihood. If the country cannot be determined, the value is –1.
     */
    ipCountryConfidence?: number;
    /**
     * Returned when the Denied Parties List check (first two codes) or the export service (all others) would have declined the transaction. This field can contain one or more of these values: - `MATCH-DPC`: Denied Parties List match. - `UNV-DPC`: Denied Parties List unavailable. - `MATCH-BCO`: Billing country restricted. - `MATCH-EMCO`: Email country restricted. - `MATCH-HCO`: Host name country restricted. - `MATCH-IPCO`: IP country restricted. - `MATCH-SCO`: Shipping country restricted.
     */
    infoCodes?: Array<string>;
    watchList?: RiskV1ExportComplianceInquiriesPost201ResponseExportComplianceInformationWatchList;
  }
  export interface RiskV1ExportComplianceInquiriesPost201ResponseExportComplianceInformationWatchList {
    matches?: Array<RiskV1ExportComplianceInquiriesPost201ResponseExportComplianceInformationWatchListMatches>;
  }
  export interface RiskV1ExportComplianceInquiriesPost201ResponseExportComplianceInformationWatchListMatches {
    /**
     * Address found on the list specified in export_matchN_list for the entity (name and address) in the request.
     */
    addresses?: Array<string>;
    /**
     * List on which the first Denied Parties List check match appears. For a list of codes, see \"Denied Parties List Check Codes,\" page 56.
     */
    sanctionList?: string;
    /**
     * Name found on the list specified in export_matchN_list for the entity (name and address) in the request.
     */
    aliases?: Array<string>;
    /**
     * Sub-lists matched by the order data. List members are separated by carets (^).
     */
    programs?: Array<string>;
  }
  export interface RiskV1UpdatePost201Response {
    links?: PtsV2IncrementalAuthorizationPatch201ResponseLinks;
    clientReferenceInformaton?: PtsV2IncrementalAuthorizationPatch201ResponseClientReferenceInformation;
    /**
     * An unique identification number to identify the submitted request. It is also appended to the endpoint of the resource.  On incremental authorizations, this value with be the same as the identification number returned in the original authorization response.  #### PIN debit Returned for all PIN debit services.
     */
    id?: string;
    /**
     * The status for risk update 201 calls. Possible values are: - INVALID_REQUEST - COMPLETED
     */
    status?: string;
    /**
     * Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ` **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The `T` separates the date and the time. The `Z` indicates UTC.  Returned by authorization service.  #### PIN debit Time when the PIN debit credit, PIN debit purchase or PIN debit reversal was requested.  Returned by PIN debit credit, PIN debit purchase or PIN debit reversal.
     */
    submitTimeUtc?: string;
  }
  export interface Riskv1addressverificationsBuyerInformation {
    /**
     * Optional customer’s account ID, tracking number, reward number, or other unique number that you assign to the customer for the purpose that you choose
     */
    merchantCustomerId?: string;
  }
  export interface Riskv1addressverificationsClientReferenceInformation {
    /**
     * Merchant-generated order reference or tracking number. It is recommended that you send a unique value for each transaction so that you can perform meaningful searches for the transaction.  #### Used by **Authorization** Required field.  #### PIN Debit Requests for PIN debit reversals need to use the same merchant reference number that was used in the transaction that is being reversed.  Required field for all PIN Debit requests (purchase, credit, and reversal).  #### FDC Nashville Global Certain circumstances can cause the processor to truncate this value to 15 or 17 characters for Level II and Level III processing, which can cause a discrepancy between the value you submit and the value included in some processor reports.
     */
    code: string;
    /**
     * Brief description of the order or any comment you wish to add to the order.
     */
    comments?: string;
  }
  export interface Riskv1addressverificationsOrderInformation {
    billTo?: Riskv1addressverificationsOrderInformationBillTo;
    shipTo?: Riskv1addressverificationsOrderInformationShipTo;
    lineItems?: Array<Riskv1addressverificationsOrderInformationLineItems>;
  }
  export interface Riskv1addressverificationsOrderInformationBillTo {
    /**
     * Payment card billing street address as it appears on the credit card issuer’s records.  #### Atos This field must not contain colons (:).  #### CyberSource through VisaNet **Important** When you populate orderInformation.billTo.address1 and orderInformation.billTo.address2, CyberSource through VisaNet concatenates the two values. If the concatenated value exceeds 40 characters, CyberSource through VisaNet truncates the value at 40 characters before sending it to Visa and the issuing bank. Truncating this value affects AVS results and therefore might also affect risk decisions and chargebacks. Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  #### FDMS Nashville When the street name is numeric, it must be sent in numeric format. For example, if the address is _One First Street_, it must be sent as _1 1st Street_.  Required if keyed; not used if swiped.  String (20)  #### TSYS Acquiring Solutions Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.  #### All other processors: Optional. String (60)  #### For Payouts This field may be sent only for FDC Compass.  **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
     */
    address1: string;
    /**
     * Used for additional address information. For example: _Attention: Accounts Payable_ Optional field.  For Payouts: This field may be sent only for FDC Compass.  #### Atos This field must not contain colons (:).  #### CyberSource through VisaNet **Important** When you populate `orderInformation.billTo.address1` and `orderInformation.billTo.address2`, CyberSource through VisaNet concatenates the two values. If the concatenated value exceeds 40 characters, CyberSource through VisaNet truncates the value at 40 characters before sending it to Visa and the issuing bank. Truncating this value affects AVS results and therefore might also affect risk decisions and chargebacks. Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  #### Chase Paymentech Solutions, FDC Compass, and TSYS Acquiring Solutions This value is used for AVS.  #### FDMS Nashville `orderInformation.billTo.address1` and `orderInformation.billTo.address2` together cannot exceed 20 characters. String (20)  #### All Other Processors String (60)
     */
    address2?: string;
    /**
     * Additional address information (third line of the billing address)
     */
    address3?: string;
    /**
     * Additional address information (fourth line of the billing address)
     */
    address4?: string;
    /**
     * State or province of the billing address. Use the [State, Province, and Territory Codes for the United States and Canada](https://developer.cybersource.com/library/documentation/sbc/quickref/states_and_provinces.pdf).  For Payouts: This field may be sent only for FDC Compass.  ##### CyberSource through VisaNet Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  #### Chase Paymentech Solutions Optional field.  ####  Credit Mutuel-CIC Optional field.  #### OmniPay Direct Optional field.  #### SIX Optional field.  #### TSYS Acquiring Solutions Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.  #### Worldpay VAP Optional field.  #### All other processors Not used.
     */
    administrativeArea?: string;
    /**
     * Payment card billing country. Use the two-character [ISO Standard Country Codes](http://apps.cybersource.com/library/documentation/sbc/quickref/countries_alpha_list.pdf).  #### CyberSource through VisaNet Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  #### Chase Paymentech Solutions Optional field.  ####  Credit Mutuel-CIC Optional field.  #### OmniPay Direct Optional field.  #### SIX Optional field.  #### TSYS Acquiring Solutions Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.  #### Worldpay VAP Optional field.  #### All other processors Not used.
     */
    country: string;
    /**
     * Payment card billing city.  #### Atos This field must not contain colons (:).  #### CyberSource through VisaNet Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  #### For Payouts: This field may be sent only for FDC Compass.  #### Chase Paymentech Solutions Optional field.  ####  Credit Mutuel-CIC Optional field.  #### OmniPay Direct Optional field.  #### SIX Optional field.  #### TSYS Acquiring Solutions Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.  #### Worldpay VAP Optional field.  #### All other processors Not used.
     */
    locality: string;
    /**
     * Postal code for the billing address. The postal code must consist of 5 to 9 digits.  When the billing country is the U.S., the 9-digit postal code must follow this format: [5 digits][dash][4 digits]  **Example** `12345-6789`  When the billing country is Canada, the 6-digit postal code must follow this format: [alpha][numeric][alpha][space][numeric][alpha][numeric]  **Example** `A1B 2C3`  **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  #### For Payouts:  This field may be sent only for FDC Compass.  #### American Express Direct Before sending the postal code to the processor, CyberSource removes all nonalphanumeric characters and, if the remaining value is longer than nine characters, truncates the value starting from the right side.  #### Atos This field must not contain colons (:).  #### CyberSource through VisaNet Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  #### FDMS Nashville Required if `pointOfSaleInformation.entryMode=keyed` and the address is in the U.S. or Canada. Optional if `pointOfSaleInformation.entryMode=keyed` and the address is **not** in the U.S. or Canada. Not used if swiped.  #### RBS WorldPay Atlanta: For best card-present keyed rates, send the postal code if `pointOfSaleInformation.entryMode=keyed`.  #### TSYS Acquiring Solutions Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.  #### All other processors: Optional field.
     */
    postalCode: string;
  }
  export interface Riskv1addressverificationsOrderInformationLineItems {
    /**
     * Per-item price of the product. This value for this field cannot be negative.  You must include either this field or the request-level field `orderInformation.amountDetails.totalAmount` in your request.  You can include a decimal point (.), but you cannot include any other special characters. The value is truncated to the correct number of decimal places.  #### DCC with a Third-Party Provider Set this field to the converted amount that was returned by the DCC provider. You must include either the 1st line item in the order and this field, or the request-level field `orderInformation.amountDetails.totalAmount` in your request.  #### FDMS South If you accept IDR or CLP currencies, see the entry for FDMS South in the [Merchant Descriptors Using the SCMP API Guide.] (https://apps.cybersource.com/library/documentation/dev_guides/Merchant_Descriptors_SCMP_API/html/)  #### Tax Calculation Required field for U.S., Canadian, international and value added taxes.  #### Zero Amount Authorizations If your processor supports zero amount authorizations, you can set this field to 0 for the authorization to check if the card is lost or stolen.  #### Maximum Field Lengths For GPN and JCN Gateway: Decimal (10) All other processors: Decimal (15)
     */
    unitPrice: string;
    /**
     * Number of units for this order. Must be a non-negative integer.  The default is `1`. For an authorization or capture transaction (`processingOptions.capture` is set to `true` or `false`), this field is required when `orderInformation.lineItems[].productCode` is not `default` or one of the other values related to shipping and/or handling.  #### Tax Calculation Optional field for U.S., Canadian, international tax, and value added taxes.
     */
    quantity?: number;
    /**
     * Product identifier code. Also known as the Stock Keeping Unit (SKU) code for the product.  For an authorization or capture transaction (`processingOptions.capture` is set to `true` or `false`), this field is required when `orderInformation.lineItems[].productCode` is not set to **default** or one of the other values that are related to shipping and/or handling.  #### Tax Calculation Optional field for U.S. and Canadian taxes. Not applicable to international and value added taxes. For an authorization or capture transaction (`processingOptions.capture` is set to `true` or `false`), this field is required when `orderInformation.lineItems[].productCode` is not `default` or one of the values related to shipping and/or handling.
     */
    productSKU?: string;
    /**
     * Indicates the level of risk for the product. This field can contain one of the following values: - `low`: The product is associated with few chargebacks. - `normal`: The product is associated with a normal number of chargebacks. - `high`: The product is associated with many chargebacks.
     */
    productRisk?: string;
    /**
     * For an authorization or capture transaction (`processingOptions.capture` is `true` or `false`), this field is required when `orderInformation.lineItems[].productCode` is not `default` or one of the other values that are related to shipping and/or handling.  #### Tax Calculation Optional field for U.S., Canadian, international tax, and value added taxes.
     */
    productName?: string;
    /**
     * Type of product. The value for this field is used to identify the product category (electronic, handling, physical, service, or shipping). The default value is `default`.  If you are performing an authorization transaction (`processingOptions.capture` is set to `false`), and you set this field to a value other than `default` or one of the values related to shipping and/or handling, then `orderInformation.lineItems[].quantity`, `orderInformation.lineItems[].productName`, and `orderInformation.lineItems[].productSku` fields are required.  Optional field.  For details, see the `product_code` field description in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/).  #### Tax Calculation Optional field for U.S., Canadian, international tax, and value added taxes.  To use the tax calculation service, use values listed in the Tax Product Code Guide. For information about this document, contact customer support. See \"Product Codes,\" page 14, for more information.
     */
    productCode?: string;
  }
  export interface Riskv1addressverificationsOrderInformationShipTo {
    /**
     * First line of the shipping address.  Required field for authorization if any shipping address information is included in the request; otherwise, optional.  #### Tax Calculation Optional field for U.S. and Canadian taxes. Not applicable to international and value added taxes. Billing address objects will be used to determine the cardholder’s location when shipTo objects are not present.
     */
    address1: string;
    /**
     * Second line of the shipping address.  Optional field.  #### Tax Calculation Optional field for U.S. and Canadian taxes. Not applicable to international and value added taxes. Billing address objects will be used to determine the cardholder’s location when shipTo objects are not present.
     */
    address2?: string;
    /**
     * Third line of the shipping address.  #### Tax Calculation Optional field for U.S. and Canadian taxes. Not applicable to international and value added taxes. Billing address objects will be used to determine the cardholder’s location when shipTo objects are not present.
     */
    address3?: string;
    /**
     * Fourth line of the shipping address.
     */
    address4?: string;
    /**
     * State or province of the shipping address. Use the [State, Province, and Territory Codes for the United States and Canada](https://developer.cybersource.com/library/documentation/sbc/quickref/states_and_provinces.pdf)  Required field for authorization if any shipping address information is included in the request and shipping to the U.S. or Canada; otherwise, optional.  #### Tax Calculation Optional field for U.S. and Canadian taxes. Not applicable to international and value added taxes. Billing address objects will be used to determine the cardholder’s location when shipTo objects are not present.
     */
    administrativeArea?: string;
    /**
     * Country of the shipping address. Use the two-character [ISO Standard Country Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/countries_alpha_list.pdf)  Required field for authorization if any shipping address information is included in the request; otherwise, optional.  #### Tax Calculation Optional field for U.S., Canadian, international tax, and value added taxes. Billing address objects will be used to determine the cardholder’s location when shipTo objects are not present.
     */
    country: string;
    /**
     * City of the shipping address.  Required field for authorization if any shipping address information is included in the request and shipping to the U.S. or Canada; otherwise, optional.  #### Tax Calculation Optional field for U.S. and Canadian taxes. Not applicable to international and value added taxes. Billing address objects will be used to determine the cardholder’s location when shipTo objects are not present.
     */
    locality?: string;
    /**
     * Postal code for the shipping address. The postal code must consist of 5 to 9 digits.  Required field for authorization if any shipping address information is included in the request and shipping to the U.S. or Canada; otherwise, optional.  When the billing country is the U.S., the 9-digit postal code must follow this format: [5 digits][dash][4 digits]  Example 12345-6789  When the billing country is Canada, the 6-digit postal code must follow this format: [alpha][numeric][alpha][space][numeric][alpha][numeric]  Example A1B 2C3  #### American Express Direct Before sending the postal code to the processor, all nonalphanumeric characters are removed and, if the remaining value is longer than nine characters, the value is truncated starting from the right side. #### Tax Calculation Optional field for U.S. and Canadian taxes. Not applicable to international and value added taxes. Billing address objects will be used to determine the cardholder’s location when shipTo objects are not present.
     */
    postalCode?: string;
  }
  export interface Riskv1authenticationresultsConsumerAuthenticationInformation {
    /**
     * Payer authentication transaction identifier passed to link the check enrollment and validate authentication messages. **Note**: Required for Standard integration for enroll service. Required for Hybrid integration for validate service.
     */
    authenticationTransactionId?: string;
    /**
     * Indicates the type of authentication that will be used to challenge the card holder.  Possible Values:  01 - Static  02 - Dynamic  03 - OOB (Out of Band)  04 - Decoupled **NOTE**:  EMV 3-D Secure version 2.1.0 supports values 01-03.  Version 2.2.0 supports values 01-04.  Decoupled authentication is not supported at this time.
     */
    authenticationType?: string;
    /**
     * This field describes the type of 3DS transaction flow that took place.  It can be one of three possible flows; CH - Challenge FR - Frictionless FD - Frictionless with delegation, (challenge not generated by the issuer but by the scheme on behalf of the issuer).
     */
    effectiveAuthenticationType?: string;
    /**
     * A JWT returned by 3DS provider once the authentication is complete, required in cruise hybrid integration method when using CyberSource generated access token.
     */
    responseAccessToken?: string;
    /**
     * Provides additional information as to why the PAResStatus has a specific value.
     */
    signedParesStatusReason?: string;
    /**
     * Payer authentication result (PARes) message returned by the card-issuing bank. If you need to show proof of enrollment checking, you may need to decrypt and parse the string for the information required by the payment card company. For more information, see \"Storing Payer Authentication Data,\" page 160. Important The value is in base64. You must remove all carriage returns and line feeds before adding the PARes to the request.
     */
    signedPares: string;
    /**
     * Enables the communication of trusted beneficiary/whitelist status between the ACS, the DS and the 3DS Requestor.  Possible Values:  Y - 3DS Requestor is whitelisted by cardholder  N - 3DS Requestor is not whitelisted by cardholder
     */
    whiteListStatus?: string;
  }
  export interface Riskv1authenticationresultsOrderInformation {
    amountDetails?: Riskv1authenticationsOrderInformationAmountDetails;
    lineItems?: Array<Riskv1authenticationresultsOrderInformationLineItems>;
  }
  export interface Riskv1authenticationresultsOrderInformationLineItems {
    /**
     * Per-item price of the product. This value for this field cannot be negative.  You must include either this field or the request-level field `orderInformation.amountDetails.totalAmount` in your request.  You can include a decimal point (.), but you cannot include any other special characters. The value is truncated to the correct number of decimal places.  #### DCC with a Third-Party Provider Set this field to the converted amount that was returned by the DCC provider. You must include either the 1st line item in the order and this field, or the request-level field `orderInformation.amountDetails.totalAmount` in your request.  #### FDMS South If you accept IDR or CLP currencies, see the entry for FDMS South in the [Merchant Descriptors Using the SCMP API Guide.] (https://apps.cybersource.com/library/documentation/dev_guides/Merchant_Descriptors_SCMP_API/html/)  #### Tax Calculation Required field for U.S., Canadian, international and value added taxes.  #### Zero Amount Authorizations If your processor supports zero amount authorizations, you can set this field to 0 for the authorization to check if the card is lost or stolen.  #### Maximum Field Lengths For GPN and JCN Gateway: Decimal (10) All other processors: Decimal (15)
     */
    unitPrice: string;
    /**
     * Number of units for this order. Must be a non-negative integer.  The default is `1`. For an authorization or capture transaction (`processingOptions.capture` is set to `true` or `false`), this field is required when `orderInformation.lineItems[].productCode` is not `default` or one of the other values related to shipping and/or handling.  #### Tax Calculation Optional field for U.S., Canadian, international tax, and value added taxes.
     */
    quantity?: number;
    /**
     * Total tax to apply to the product. This value cannot be negative. The tax amount and the offer amount must be in the same currency. The tax amount field is additive.  The following example uses a two-exponent currency such as USD:   1. You include each line item in your request.  ..- 1st line item has amount=10.00, quantity=1, and taxAmount=0.80  ..- 2nd line item has amount=20.00, quantity=1, and taxAmount=1.60  2. The total amount authorized will be 32.40, not 30.00 with 2.40 of tax included.  Optional field.  #### Airlines processing Tax portion of the order amount. This value cannot exceed 99999999999999 (fourteen 9s). Format: English characters only. Optional request field for a line item.  #### Tax Calculation Optional field for U.S., Canadian, international tax, and value added taxes.  Note if you send this field in your tax request, the value in the field will override the tax engine
     */
    taxAmount?: string;
  }
  export interface Riskv1authenticationresultsPaymentInformation {
    card?: Riskv1authenticationresultsPaymentInformationCard;
    tokenizedCard?: Riskv1authenticationresultsPaymentInformationTokenizedCard;
    fluidData?: Riskv1authenticationsetupsPaymentInformationFluidData;
    customer?: Ptsv2paymentsPaymentInformationCustomer;
  }
  export interface Riskv1authenticationresultsPaymentInformationCard {
    /**
     * description: The BIN is the first six digits of the card's Primary Account Number (PAN).
     */
    bin?: string;
    /**
     * Three-digit value that indicates the card type.  **IMPORTANT** It is strongly recommended that you include the card type field in request messages even if it is optional for your processor and card type. Omitting the card type can cause the transaction to be processed with the wrong card type.  Possible values: - `001`: Visa. For card-present transactions on all processors except SIX, the Visa Electron card type is processed the same way that the Visa debit card is processed. Use card type value `001` for Visa Electron. - `002`: Mastercard, Eurocard[^1], which is a European regional brand of Mastercard. - `003`: American Express - `004`: Discover - `005`: Diners Club - `006`: Carte Blanche[^1] - `007`: JCB[^1] - `014`: Enroute[^1] - `021`: JAL[^1] - `024`: Maestro (UK Domestic)[^1] - `031`: Delta[^1]: Use this value only for Ingenico ePayments. For other processors, use `001` for all Visa card types. - `033`: Visa Electron[^1]. Use this value only for Ingenico ePayments and SIX. For other processors, use `001` for all Visa card types. - `034`: Dankort[^1] - `036`: Cartes Bancaires[^1] - `037`: Carta Si[^1] - `039`: Encoded account number[^1] - `040`: UATP[^1] - `042`: Maestro (International)[^1] - `050`: Hipercard[^2,3] - `051`: Aura - `054`: Elo[^3] - `062`: China UnionPay  [^1]: For this card type, you must include the `paymentInformation.card.type` or `paymentInformation.tokenizedCard.type` field in your request for an authorization or a stand-alone credit. [^2]: For this card type on Cielo 3.0, you must include the `paymentInformation.card.type` or `paymentInformation.tokenizedCard.type` field in a request for an authorization or a stand-alone credit. This card type is not supported on Cielo 1.5. [^3]: For this card type on Getnet and Rede, you must include the `paymentInformation.card.type` or `paymentInformation.tokenizedCard.type` field in a request for an authorization or a stand-alone credit.  #### Used by **Authorization** Required for Carte Blanche and JCB. Optional for all other card types.  #### Card Present reply This field is included in the reply message when the client software that is installed on the POS terminal uses the token management service (TMS) to retrieve tokenized payment details. You must contact customer support to have your account enabled to receive these fields in the credit reply message.  Returned by the Credit service.  This reply field is only supported by the following processors: - American Express Direct - Credit Mutuel-CIC - FDC Nashville Global - OmniPay Direct - SIX  #### GPX This field only supports transactions from the following card types: - Visa - Mastercard - AMEX - Discover - Diners - JCB - Union Pay International
     */
    type: string;
    /**
     * Two-digit month in which the payment card expires.  Format: `MM`.  Valid values: `01` through `12`. Leading 0 is required.  #### Barclays and Streamline For Maestro (UK Domestic) and Maestro (International) cards on Barclays and Streamline, this must be a valid value (`01` through `12`) but is not required to be a valid expiration date. In other words, an expiration date that is in the past does not cause CyberSource to reject your request. However, an invalid expiration date might cause the issuer to reject your request.  #### Encoded Account Numbers For encoded account numbers (_type_=039), if there is no expiration date on the card, use `12`.  #### FDMS Nashville Required field.  #### GPX Required if `pointOfSaleInformation.entryMode=keyed`. However, this field is optional if your account is configured for relaxed requirements for address data and expiration date. **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  #### All other processors Required if `pointOfSaleInformation.entryMode=keyed`. However, this field is optional if your account is configured for relaxed requirements for address data and expiration date. **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
     */
    expirationMonth?: string;
    /**
     * Four-digit year in which the payment card expires.  Format: `YYYY`.  #### Barclays and Streamline For Maestro (UK Domestic) and Maestro (International) cards on Barclays and Streamline, this must be a valid value (`1900` through `3000`) but is not required to be a valid expiration date. In other words, an expiration date that is in the past does not cause CyberSource to reject your request. However, an invalid expiration date might cause the issuer to reject your request.  #### Encoded Account Numbers For encoded account numbers (**_type_**`=039`), if there is no expiration date on the card, use `2021`.  #### FDMS Nashville Required field.  #### FDC Nashville Global and FDMS South You can send in 2 digits or 4 digits. If you send in 2 digits, they must be the last 2 digits of the year.  #### GPX Required if `pointOfSaleInformation.entryMode=keyed`. However, this field is optional if your account is configured for relaxed requirements for address data and expiration date. **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  #### All other processors Required if `pointOfSaleInformation.entryMode=keyed`. However, this field is optional if your account is configured for relaxed requirements for address data and expiration date. **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
     */
    expirationYear?: string;
    /**
     * The customer’s payment card number, also known as the Primary Account Number (PAN). You can also use this field for encoded account numbers.  #### FDMS Nashville Required. String (19)  #### GPX Required if `pointOfSaleInformation.entryMode=keyed`. However, this field is optional if your account is configured for relaxed requirements for address data and expiration date. **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  #### All other processors Required if `pointOfSaleInformation.entryMode=keyed`. However, this field is optional if your account is configured for relaxed requirements for address data and expiration date. **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
     */
    number?: string;
  }
  export interface Riskv1authenticationresultsPaymentInformationTokenizedCard {
    /**
     * Three-digit value that indicates the card type.  **IMPORTANT** It is strongly recommended that you include the card type field in request messages even if it is optional for your processor and card type. Omitting the card type can cause the transaction to be processed with the wrong card type.  Possible values: - `001`: Visa. For card-present transactions on all processors except SIX, the Visa Electron card type is processed the same way that the Visa debit card is processed. Use card type value `001` for Visa Electron. - `002`: Mastercard, Eurocard[^1], which is a European regional brand of Mastercard. - `003`: American Express - `004`: Discover - `005`: Diners Club - `006`: Carte Blanche[^1] - `007`: JCB[^1] - `014`: Enroute[^1] - `021`: JAL[^1] - `024`: Maestro (UK Domestic)[^1] - `031`: Delta[^1]: Use this value only for Ingenico ePayments. For other processors, use `001` for all Visa card types. - `033`: Visa Electron[^1]. Use this value only for Ingenico ePayments and SIX. For other processors, use `001` for all Visa card types. - `034`: Dankort[^1] - `036`: Cartes Bancaires[^1] - `037`: Carta Si[^1] - `039`: Encoded account number[^1] - `040`: UATP[^1] - `042`: Maestro (International)[^1] - `050`: Hipercard[^2,3] - `051`: Aura - `054`: Elo[^3] - `062`: China UnionPay  [^1]: For this card type, you must include the `paymentInformation.card.type` or `paymentInformation.tokenizedCard.type` field in your request for an authorization or a stand-alone credit. [^2]: For this card type on Cielo 3.0, you must include the `paymentInformation.card.type` or `paymentInformation.tokenizedCard.type` field in a request for an authorization or a stand-alone credit. This card type is not supported on Cielo 1.5. [^3]: For this card type on Getnet and Rede, you must include the `paymentInformation.card.type` or `paymentInformation.tokenizedCard.type` field in a request for an authorization or a stand-alone credit.  #### Used by **Authorization** Required for Carte Blanche and JCB. Optional for all other card types.  #### Card Present reply This field is included in the reply message when the client software that is installed on the POS terminal uses the token management service (TMS) to retrieve tokenized payment details. You must contact customer support to have your account enabled to receive these fields in the credit reply message.  Returned by the Credit service.  This reply field is only supported by the following processors: - American Express Direct - Credit Mutuel-CIC - FDC Nashville Global - OmniPay Direct - SIX  #### GPX This field only supports transactions from the following card types: - Visa - Mastercard - AMEX - Discover - Diners - JCB - Union Pay International
     */
    type: string;
    /**
     * One of two possible meanings: - The two-digit month in which a token expires. - The two-digit month in which a card expires. Format: `MM` Possible values: `01` through `12`  **NOTE** The meaning of this field is dependent on the payment processor that is returning the value in an authorization reply. Please see the processor-specific details below.  #### Barclays and Streamline For Maestro (UK Domestic) and Maestro (International) cards on Barclays and Streamline, this must be a valid value (`01` through `12`) but is not required to be a valid expiration date. In other words, an expiration date that is in the past does not cause CyberSource to reject your request. However, an invalid expiration date might cause the issuer to reject your request.  #### Encoded Account Numbers For encoded account numbers (`card_type=039`), if there is no expiration date on the card, use `12`.\\ **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  #### Samsung Pay and Apple Pay Month in which the token expires. CyberSource includes this field in the reply message when it decrypts the payment blob for the tokenized transaction.  For processor-specific information, see the `customer_cc_expmo` field in [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
     */
    expirationMonth?: string;
    /**
     * One of two possible meanings: - The four-digit year in which a token expires. - The four-digit year in which a card expires. Format: `YYYY` Possible values: `1900` through `3000` Data type: Non-negative integer  **NOTE** The meaning of this field is dependent on the payment processor that is returning the value in an authorization reply. Please see the processor-specific details below.  #### Barclays and Streamline For Maestro (UK Domestic) and Maestro (International) cards on Barclays and Streamline, this must be a valid value (1900 through 3000) but is not required to be a valid expiration date. In other words, an expiration date that is in the past does not cause CyberSource to reject your request. However, an invalid expiration date might cause the issuer to reject your request.  #### Encoded Account Numbers For encoded account numbers (`card_ type=039`), if there is no expiration date on the card, use `2021`.  #### FDC Nashville Global and FDMS South You can send in 2 digits or 4 digits. When you send in 2 digits, they must be the last 2 digits of the year.  #### Samsung Pay and Apple Pay Year in which the token expires. CyberSource includes this field in the reply message when it decrypts the payment blob for the tokenized transaction.  **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  For processor-specific information, see the `customer_cc_expyr` or `token_expiration_year` field in [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
     */
    expirationYear?: string;
    /**
     * Customer’s payment network token value.
     */
    number?: string;
  }
  export interface Riskv1authenticationsBuyerInformation {
    /**
     * This array contains detailed information about the buyer's form of persoanl identification.
     */
    personalIdentification?: Array<Ptsv2paymentsBuyerInformationPersonalIdentification>;
    /**
     * Cardholder’s mobile phone number. **Important** Required for Visa Secure transactions in Brazil. Do not use this request field for any other types of transactions.
     */
    mobilePhone: number;
  }
  export interface Riskv1authenticationsDeviceInformation {
    /**
     * IP address of the customer.  #### Used by **Authorization, Capture, and Credit** Optional field.
     */
    ipAddress?: string;
    rawData?: Array<Ptsv2paymentsDeviceInformationRawData>;
    /**
     * Value of the Accept header sent by the customer’s web browser. **Note** If the customer’s browser provides a value, you must include it in your request.
     */
    httpAcceptBrowserValue?: string;
    /**
     * The exact content of the HTTP accept header.
     */
    httpAcceptContent?: string;
    /**
     * Value represents the browser language as defined in IETF BCP47. Example:en-US, refer  https://en.wikipedia.org/wiki/IETF_language_tag for more details.
     */
    httpBrowserLanguage?: string;
    /**
     * A Boolean value that represents the ability of the cardholder browser to execute Java. Value is returned from the navigator.javaEnabled property. Possible Values:True/False
     */
    httpBrowserJavaEnabled?: boolean;
    /**
     * A Boolean value that represents the ability of the cardholder browser to execute JavaScript. Possible Values:True/False. **Note**: Merchants should be able to know the values from fingerprint details of cardholder's browser.
     */
    httpBrowserJavaScriptEnabled?: boolean;
    /**
     * Value represents the bit depth of the color palette for displaying images, in bits per pixel. Example : 24, refer https://en.wikipedia.org/wiki/Color_depth for more details
     */
    httpBrowserColorDepth?: string;
    /**
     * Total height of the Cardholder's scree in pixels, example: 864.
     */
    httpBrowserScreenHeight?: string;
    /**
     * Total width of the cardholder's screen in pixels. Example: 1536.
     */
    httpBrowserScreenWidth?: string;
    /**
     * Time difference between UTC time and the cardholder browser local time, in minutes, Example:300
     */
    httpBrowserTimeDifference?: string;
    /**
     * Value of the User-Agent header sent by the customer’s web browser. Note If the customer’s browser provides a value, you must include it in your request.
     */
    userAgentBrowserValue?: string;
  }
  export interface Riskv1authenticationsOrderInformation {
    amountDetails?: Riskv1authenticationsOrderInformationAmountDetails;
    /**
     * Indicates whether cardholder is placing an order with a future availability or release date. This field can contain one of these values: - MERCHANDISE_AVAILABLE: Merchandise available - FUTURE_AVAILABILITY: Future availability
     */
    preOrder?: string;
    /**
     * Expected date that a pre-ordered purchase will be available. Format: YYYYMMDD
     */
    preOrderDate?: string;
    /**
     * Indicates whether the cardholder is reordering previously purchased merchandise. This field can contain one of these values: - false: First time ordered - true: Reordered
     */
    reordered?: boolean;
    shipTo?: Riskv1decisionsOrderInformationShipTo;
    /**
     * This array contains detailed information about individual products in the order.
     */
    lineItems?: Array<Riskv1authenticationsOrderInformationLineItems>;
    billTo?: Riskv1authenticationsOrderInformationBillTo;
    /**
     * Total number of articles/items in the order as a numeric decimal count. Possible values: 00 - 99
     */
    totalOffersCount?: string;
  }
  /**
   * Contains `currency` and `totalAmount` for this order.
   */
  export interface Riskv1authenticationsOrderInformationAmountDetails {
    /**
     * Currency used for the order. Use the three-character [ISO Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf)  #### Used by **Authorization** Required field.  **Authorization Reversal** For an authorization reversal (`reversalInformation`) or a capture (`processingOptions.capture` is set to `true`), you must use the same currency that you used in your payment authorization request.  #### PIN Debit Currency for the amount you requested for the PIN debit purchase. This value is returned for partial authorizations. The issuing bank can approve a partial amount if the balance on the debit card is less than the requested transaction amount. For the possible values, see the [ISO Standard Currency Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/currencies.pdf). Returned by PIN debit purchase.  For PIN debit reversal requests, you must use the same currency that was used for the PIN debit purchase or PIN debit credit that you are reversing. For the possible values, see the [ISO Standard Currency Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/currencies.pdf).  Required field for PIN Debit purchase and PIN Debit credit requests. Optional field for PIN Debit reversal requests.  #### GPX This field is optional for reversing an authorization or credit.  #### DCC for First Data Your local currency. For details, see the `currency` field description in [Dynamic Currency Conversion For First Data Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/DCC_FirstData_SCMP/DCC_FirstData_SCMP_API.pdf).  #### Tax Calculation Required for international tax and value added tax only. Optional for U.S. and Canadian taxes. Your local currency.
     */
    currency: string;
    /**
     * Grand total for the order. This value cannot be negative. You can include a decimal point (.), but no other special characters. CyberSource truncates the amount to the correct number of decimal places.  **Note** For CTV, FDCCompass, Paymentech processors, the maximum length for this field is 12.  **Important** Some processors have specific requirements and limitations, such as maximum amounts and maximum field lengths. For details, see: - \"Authorization Information for Specific Processors\" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/). - \"Capture Information for Specific Processors\" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/). - \"Credit Information for Specific Processors\" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/).  If your processor supports zero amount authorizations, you can set this field to 0 for the authorization to check if the card is lost or stolen. For details, see \"Zero Amount Authorizations,\" \"Credit Information for Specific Processors\" in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  #### Card Present Required to include either this field or `orderInformation.lineItems[].unitPrice` for the order.  #### Invoicing Required for creating a new invoice.  #### PIN Debit Amount you requested for the PIN debit purchase. This value is returned for partial authorizations. The issuing bank can approve a partial amount if the balance on the debit card is less than the requested transaction amount.  Required field for PIN Debit purchase and PIN Debit credit requests. Optional field for PIN Debit reversal requests.  #### GPX This field is optional for reversing an authorization or credit; however, for all other processors, these fields are required.  #### DCC with a Third-Party Provider Set this field to the converted amount that was returned by the DCC provider. You must include either this field or the 1st line item in the order and the specific line-order amount in your request. For details, see `grand_total_amount` field description in [Dynamic Currency Conversion For First Data Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/DCC_FirstData_SCMP/DCC_FirstData_SCMP_API.pdf).  #### FDMS South If you accept IDR or CLP currencies, see the entry for FDMS South in \"Authorization Information for Specific Processors\" of the [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  #### DCC for First Data Not used.
     */
    totalAmount: string;
  }
  export interface Riskv1authenticationsOrderInformationBillTo {
    /**
     * Payment card billing street address as it appears on the credit card issuer’s records.  #### Atos This field must not contain colons (:).  #### CyberSource through VisaNet **Important** When you populate orderInformation.billTo.address1 and orderInformation.billTo.address2, CyberSource through VisaNet concatenates the two values. If the concatenated value exceeds 40 characters, CyberSource through VisaNet truncates the value at 40 characters before sending it to Visa and the issuing bank. Truncating this value affects AVS results and therefore might also affect risk decisions and chargebacks. Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  #### FDMS Nashville When the street name is numeric, it must be sent in numeric format. For example, if the address is _One First Street_, it must be sent as _1 1st Street_.  Required if keyed; not used if swiped.  String (20)  #### TSYS Acquiring Solutions Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.  #### All other processors: Optional. String (60)  #### For Payouts This field may be sent only for FDC Compass.  **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
     */
    address1: string;
    /**
     * Used for additional address information. For example: _Attention: Accounts Payable_ Optional field.  For Payouts: This field may be sent only for FDC Compass.  #### Atos This field must not contain colons (:).  #### CyberSource through VisaNet **Important** When you populate `orderInformation.billTo.address1` and `orderInformation.billTo.address2`, CyberSource through VisaNet concatenates the two values. If the concatenated value exceeds 40 characters, CyberSource through VisaNet truncates the value at 40 characters before sending it to Visa and the issuing bank. Truncating this value affects AVS results and therefore might also affect risk decisions and chargebacks. Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  #### Chase Paymentech Solutions, FDC Compass, and TSYS Acquiring Solutions This value is used for AVS.  #### FDMS Nashville `orderInformation.billTo.address1` and `orderInformation.billTo.address2` together cannot exceed 20 characters. String (20)  #### All Other Processors String (60)
     */
    address2?: string;
    /**
     * State or province of the billing address. Use the [State, Province, and Territory Codes for the United States and Canada](https://developer.cybersource.com/library/documentation/sbc/quickref/states_and_provinces.pdf).  For Payouts: This field may be sent only for FDC Compass.  ##### CyberSource through VisaNet Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  #### Chase Paymentech Solutions Optional field.  ####  Credit Mutuel-CIC Optional field.  #### OmniPay Direct Optional field.  #### SIX Optional field.  #### TSYS Acquiring Solutions Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.  #### Worldpay VAP Optional field.  #### All other processors Not used.
     */
    administrativeArea: string;
    /**
     * Payment card billing country. Use the two-character [ISO Standard Country Codes](http://apps.cybersource.com/library/documentation/sbc/quickref/countries_alpha_list.pdf).  #### CyberSource through VisaNet Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  #### Chase Paymentech Solutions Optional field.  ####  Credit Mutuel-CIC Optional field.  #### OmniPay Direct Optional field.  #### SIX Optional field.  #### TSYS Acquiring Solutions Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.  #### Worldpay VAP Optional field.  #### All other processors Not used.
     */
    country: string;
    /**
     * Payment card billing city.  #### Atos This field must not contain colons (:).  #### CyberSource through VisaNet Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  #### For Payouts: This field may be sent only for FDC Compass.  #### Chase Paymentech Solutions Optional field.  ####  Credit Mutuel-CIC Optional field.  #### OmniPay Direct Optional field.  #### SIX Optional field.  #### TSYS Acquiring Solutions Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.  #### Worldpay VAP Optional field.  #### All other processors Not used.
     */
    locality?: string;
    /**
     * Customer’s first name. This name must be the same as the name on the card.  **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  #### CyberSource Latin American Processing **Important** For an authorization request, CyberSource Latin American Processing concatenates `orderInformation.billTo.firstName` and `orderInformation.billTo.lastName`. If the concatenated value exceeds 30 characters, CyberSource Latin American Processing declines the authorization request.\\ **Note** CyberSource Latin American Processing is the name of a specific processing connection that CyberSource supports. In the CyberSource API documentation, CyberSource Latin American Processing does not refer to the general topic of processing in Latin America. The information in this field description is for the specific processing connection called _CyberSource Latin American Processing_. It is not for any other Latin American processors that CyberSource supports.  #### CyberSource through VisaNet Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  #### For Payouts: This field may be sent only for FDC Compass.  #### Chase Paymentech Solutions Optional field.  ####  Credit Mutuel-CIC Optional field.  #### OmniPay Direct Optional field.  #### SIX Optional field.  #### TSYS Acquiring Solutions Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.  #### Worldpay VAP Optional field.  #### All other processors Not used.
     */
    firstName: string;
    /**
     * Customer’s last name. This name must be the same as the name on the card.  **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  #### Chase Paymentech Solutions Optional field.  ####  Credit Mutuel-CIC Optional field.  #### CyberSource Latin American Processing **Important** For an authorization request, CyberSource Latin American Processing concatenates `orderInformation.billTo.firstName` and `orderInformation.billTo.lastName`. If the concatenated value exceeds 30 characters, CyberSource Latin American Processing declines the authorization request.\\ **Note** CyberSource Latin American Processing is the name of a specific processing connection that CyberSource supports. In the CyberSource API documentation, CyberSource Latin American Processing does not refer to the general topic of processing in Latin America. The information in this field description is for the specific processing connection called CyberSource Latin American Processing. It is not for any other Latin American processors that CyberSource supports.  #### CyberSource through VisaNet Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  #### For Payouts: This field may be sent only for FDC Compass.  #### OmniPay Direct Optional field.  #### RBS WorldPay Atlanta Optional field.  #### SIX Optional field.  #### TSYS Acquiring Solutions Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.  #### Worldpay VAP Optional field.  #### All other processors Not used.
     */
    lastName: string;
    /**
     * Customer’s phone number.  It is recommended that you include the country code when the order is from outside the U.S.  #### Chase Paymentech Solutions Optional field.  ####  Credit Mutuel-CIC Optional field.  #### CyberSource through VisaNet Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  #### For Payouts: This field may be sent only for FDC Compass.  #### OmniPay Direct Optional field.  #### SIX Optional field.  #### TSYS Acquiring Solutions Optional field.  #### Worldpay VAP Optional field.  #### All other processors Not used.
     */
    phoneNumber?: string;
    /**
     * Customer's email address, including the full domain name.  #### CyberSource through VisaNet Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  For processor-specific information, see the `customer_email` request-level field description in [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)  #### Invoicing Email address for the customer for sending the invoice. If the invoice is in SENT status and email is updated, the old email customer payment link won't work and you must resend the invoice with the new payment link.  #### Chase Paymentech Solutions Optional field.  ####  Credit Mutuel-CIC Optional field.  #### OmniPay Direct Optional field.  #### SIX Optional field.  #### TSYS Acquiring Solutions Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.  #### Worldpay VAP Optional field.  #### All other processors Not used.
     */
    email: string;
    /**
     * Postal code for the billing address. The postal code must consist of 5 to 9 digits.  When the billing country is the U.S., the 9-digit postal code must follow this format: [5 digits][dash][4 digits]  **Example** `12345-6789`  When the billing country is Canada, the 6-digit postal code must follow this format: [alpha][numeric][alpha][space][numeric][alpha][numeric]  **Example** `A1B 2C3`  **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  #### For Payouts:  This field may be sent only for FDC Compass.  #### American Express Direct Before sending the postal code to the processor, CyberSource removes all nonalphanumeric characters and, if the remaining value is longer than nine characters, truncates the value starting from the right side.  #### Atos This field must not contain colons (:).  #### CyberSource through VisaNet Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  #### FDMS Nashville Required if `pointOfSaleInformation.entryMode=keyed` and the address is in the U.S. or Canada. Optional if `pointOfSaleInformation.entryMode=keyed` and the address is **not** in the U.S. or Canada. Not used if swiped.  #### RBS WorldPay Atlanta: For best card-present keyed rates, send the postal code if `pointOfSaleInformation.entryMode=keyed`.  #### TSYS Acquiring Solutions Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.  #### All other processors: Optional field.
     */
    postalCode: string;
  }
  export interface Riskv1authenticationsOrderInformationLineItems {
    /**
     * Total amount for the item. Normally calculated as the unit price times quantity.  When `orderInformation.lineItems[].productCode` is \"gift_card\", this is the purchase amount total for prepaid gift cards in major units.  Example: 123.45 USD = 123
     */
    totalAmount?: string;
    /**
     * Per-item price of the product. This value for this field cannot be negative.  You must include either this field or the request-level field `orderInformation.amountDetails.totalAmount` in your request.  You can include a decimal point (.), but you cannot include any other special characters. The value is truncated to the correct number of decimal places.  #### DCC with a Third-Party Provider Set this field to the converted amount that was returned by the DCC provider. You must include either the 1st line item in the order and this field, or the request-level field `orderInformation.amountDetails.totalAmount` in your request.  #### FDMS South If you accept IDR or CLP currencies, see the entry for FDMS South in the [Merchant Descriptors Using the SCMP API Guide.] (https://apps.cybersource.com/library/documentation/dev_guides/Merchant_Descriptors_SCMP_API/html/)  #### Tax Calculation Required field for U.S., Canadian, international and value added taxes.  #### Zero Amount Authorizations If your processor supports zero amount authorizations, you can set this field to 0 for the authorization to check if the card is lost or stolen.  #### Maximum Field Lengths For GPN and JCN Gateway: Decimal (10) All other processors: Decimal (15)
     */
    unitPrice: string;
    /**
     * Number of units for this order. Must be a non-negative integer.  The default is `1`. For an authorization or capture transaction (`processingOptions.capture` is set to `true` or `false`), this field is required when `orderInformation.lineItems[].productCode` is not `default` or one of the other values related to shipping and/or handling.  #### Tax Calculation Optional field for U.S., Canadian, international tax, and value added taxes.
     */
    quantity?: number;
    /**
     * When `orderInformation.lineItems[].productCode` is \"gift_card\", this is the currency used for the gift card purchase.  For details, see `pa_gift_card_currency` field description in [CyberSource Payer Authentication Using the SCMP API.] (https://apps.cybersource.com/library/documentation/dev_guides/Payer_Authentication_SCMP_API/Payer_Authentication_SCMP_API.pdf)  For the possible values, see the [ISO Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf)
     */
    giftCardCurrency?: number;
    /**
     * Product identifier code. Also known as the Stock Keeping Unit (SKU) code for the product.  For an authorization or capture transaction (`processingOptions.capture` is set to `true` or `false`), this field is required when `orderInformation.lineItems[].productCode` is not set to **default** or one of the other values that are related to shipping and/or handling.  #### Tax Calculation Optional field for U.S. and Canadian taxes. Not applicable to international and value added taxes. For an authorization or capture transaction (`processingOptions.capture` is set to `true` or `false`), this field is required when `orderInformation.lineItems[].productCode` is not `default` or one of the values related to shipping and/or handling.
     */
    productSKU?: string;
    /**
     * Brief description of item.
     */
    productDescription?: string;
    /**
     * For an authorization or capture transaction (`processingOptions.capture` is `true` or `false`), this field is required when `orderInformation.lineItems[].productCode` is not `default` or one of the other values that are related to shipping and/or handling.  #### Tax Calculation Optional field for U.S., Canadian, international tax, and value added taxes.
     */
    productName?: string;
    passenger?: Ptsv2paymentsOrderInformationPassenger;
    /**
     * Destination to where the item will be shipped. Example: Commercial, Residential, Store
     */
    shippingDestinationTypes?: string;
    /**
     * Total tax to apply to the product. This value cannot be negative. The tax amount and the offer amount must be in the same currency. The tax amount field is additive.  The following example uses a two-exponent currency such as USD:   1. You include each line item in your request.  ..- 1st line item has amount=10.00, quantity=1, and taxAmount=0.80  ..- 2nd line item has amount=20.00, quantity=1, and taxAmount=1.60  2. The total amount authorized will be 32.40, not 30.00 with 2.40 of tax included.  Optional field.  #### Airlines processing Tax portion of the order amount. This value cannot exceed 99999999999999 (fourteen 9s). Format: English characters only. Optional request field for a line item.  #### Tax Calculation Optional field for U.S., Canadian, international tax, and value added taxes.  Note if you send this field in your tax request, the value in the field will override the tax engine
     */
    taxAmount?: string;
  }
  export interface Riskv1authenticationsPaymentInformation {
    card?: Riskv1authenticationsPaymentInformationCard;
    tokenizedCard?: Riskv1authenticationsPaymentInformationTokenizedCard;
    fluidData?: Riskv1authenticationsetupsPaymentInformationFluidData;
    customer?: Ptsv2paymentsPaymentInformationCustomer;
  }
  export interface Riskv1authenticationsPaymentInformationCard {
    /**
     * description: The BIN is the first six digits of the card's Primary Account Number (PAN).
     */
    bin?: string;
    /**
     * Three-digit value that indicates the card type.  **IMPORTANT** It is strongly recommended that you include the card type field in request messages even if it is optional for your processor and card type. Omitting the card type can cause the transaction to be processed with the wrong card type.  Possible values: - `001`: Visa. For card-present transactions on all processors except SIX, the Visa Electron card type is processed the same way that the Visa debit card is processed. Use card type value `001` for Visa Electron. - `002`: Mastercard, Eurocard[^1], which is a European regional brand of Mastercard. - `003`: American Express - `004`: Discover - `005`: Diners Club - `006`: Carte Blanche[^1] - `007`: JCB[^1] - `014`: Enroute[^1] - `021`: JAL[^1] - `024`: Maestro (UK Domestic)[^1] - `031`: Delta[^1]: Use this value only for Ingenico ePayments. For other processors, use `001` for all Visa card types. - `033`: Visa Electron[^1]. Use this value only for Ingenico ePayments and SIX. For other processors, use `001` for all Visa card types. - `034`: Dankort[^1] - `036`: Cartes Bancaires[^1] - `037`: Carta Si[^1] - `039`: Encoded account number[^1] - `040`: UATP[^1] - `042`: Maestro (International)[^1] - `050`: Hipercard[^2,3] - `051`: Aura - `054`: Elo[^3] - `062`: China UnionPay  [^1]: For this card type, you must include the `paymentInformation.card.type` or `paymentInformation.tokenizedCard.type` field in your request for an authorization or a stand-alone credit. [^2]: For this card type on Cielo 3.0, you must include the `paymentInformation.card.type` or `paymentInformation.tokenizedCard.type` field in a request for an authorization or a stand-alone credit. This card type is not supported on Cielo 1.5. [^3]: For this card type on Getnet and Rede, you must include the `paymentInformation.card.type` or `paymentInformation.tokenizedCard.type` field in a request for an authorization or a stand-alone credit.  #### Used by **Authorization** Required for Carte Blanche and JCB. Optional for all other card types.  #### Card Present reply This field is included in the reply message when the client software that is installed on the POS terminal uses the token management service (TMS) to retrieve tokenized payment details. You must contact customer support to have your account enabled to receive these fields in the credit reply message.  Returned by the Credit service.  This reply field is only supported by the following processors: - American Express Direct - Credit Mutuel-CIC - FDC Nashville Global - OmniPay Direct - SIX  #### GPX This field only supports transactions from the following card types: - Visa - Mastercard - AMEX - Discover - Diners - JCB - Union Pay International
     */
    type: string;
    /**
     * Two-digit month in which the payment card expires.  Format: `MM`.  Valid values: `01` through `12`. Leading 0 is required.  #### Barclays and Streamline For Maestro (UK Domestic) and Maestro (International) cards on Barclays and Streamline, this must be a valid value (`01` through `12`) but is not required to be a valid expiration date. In other words, an expiration date that is in the past does not cause CyberSource to reject your request. However, an invalid expiration date might cause the issuer to reject your request.  #### Encoded Account Numbers For encoded account numbers (_type_=039), if there is no expiration date on the card, use `12`.  #### FDMS Nashville Required field.  #### GPX Required if `pointOfSaleInformation.entryMode=keyed`. However, this field is optional if your account is configured for relaxed requirements for address data and expiration date. **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  #### All other processors Required if `pointOfSaleInformation.entryMode=keyed`. However, this field is optional if your account is configured for relaxed requirements for address data and expiration date. **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
     */
    expirationMonth: string;
    /**
     * Four-digit year in which the payment card expires.  Format: `YYYY`.  #### Barclays and Streamline For Maestro (UK Domestic) and Maestro (International) cards on Barclays and Streamline, this must be a valid value (`1900` through `3000`) but is not required to be a valid expiration date. In other words, an expiration date that is in the past does not cause CyberSource to reject your request. However, an invalid expiration date might cause the issuer to reject your request.  #### Encoded Account Numbers For encoded account numbers (**_type_**`=039`), if there is no expiration date on the card, use `2021`.  #### FDMS Nashville Required field.  #### FDC Nashville Global and FDMS South You can send in 2 digits or 4 digits. If you send in 2 digits, they must be the last 2 digits of the year.  #### GPX Required if `pointOfSaleInformation.entryMode=keyed`. However, this field is optional if your account is configured for relaxed requirements for address data and expiration date. **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  #### All other processors Required if `pointOfSaleInformation.entryMode=keyed`. However, this field is optional if your account is configured for relaxed requirements for address data and expiration date. **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
     */
    expirationYear: string;
    /**
     * The customer’s payment card number, also known as the Primary Account Number (PAN). You can also use this field for encoded account numbers.  #### FDMS Nashville Required. String (19)  #### GPX Required if `pointOfSaleInformation.entryMode=keyed`. However, this field is optional if your account is configured for relaxed requirements for address data and expiration date. **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  #### All other processors Required if `pointOfSaleInformation.entryMode=keyed`. However, this field is optional if your account is configured for relaxed requirements for address data and expiration date. **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
     */
    number: string;
  }
  export interface Riskv1authenticationsPaymentInformationTokenizedCard {
    /**
     * Three-digit value that indicates the card type.  **IMPORTANT** It is strongly recommended that you include the card type field in request messages even if it is optional for your processor and card type. Omitting the card type can cause the transaction to be processed with the wrong card type.  Possible values: - `001`: Visa. For card-present transactions on all processors except SIX, the Visa Electron card type is processed the same way that the Visa debit card is processed. Use card type value `001` for Visa Electron. - `002`: Mastercard, Eurocard[^1], which is a European regional brand of Mastercard. - `003`: American Express - `004`: Discover - `005`: Diners Club - `006`: Carte Blanche[^1] - `007`: JCB[^1] - `014`: Enroute[^1] - `021`: JAL[^1] - `024`: Maestro (UK Domestic)[^1] - `031`: Delta[^1]: Use this value only for Ingenico ePayments. For other processors, use `001` for all Visa card types. - `033`: Visa Electron[^1]. Use this value only for Ingenico ePayments and SIX. For other processors, use `001` for all Visa card types. - `034`: Dankort[^1] - `036`: Cartes Bancaires[^1] - `037`: Carta Si[^1] - `039`: Encoded account number[^1] - `040`: UATP[^1] - `042`: Maestro (International)[^1] - `050`: Hipercard[^2,3] - `051`: Aura - `054`: Elo[^3] - `062`: China UnionPay  [^1]: For this card type, you must include the `paymentInformation.card.type` or `paymentInformation.tokenizedCard.type` field in your request for an authorization or a stand-alone credit. [^2]: For this card type on Cielo 3.0, you must include the `paymentInformation.card.type` or `paymentInformation.tokenizedCard.type` field in a request for an authorization or a stand-alone credit. This card type is not supported on Cielo 1.5. [^3]: For this card type on Getnet and Rede, you must include the `paymentInformation.card.type` or `paymentInformation.tokenizedCard.type` field in a request for an authorization or a stand-alone credit.  #### Used by **Authorization** Required for Carte Blanche and JCB. Optional for all other card types.  #### Card Present reply This field is included in the reply message when the client software that is installed on the POS terminal uses the token management service (TMS) to retrieve tokenized payment details. You must contact customer support to have your account enabled to receive these fields in the credit reply message.  Returned by the Credit service.  This reply field is only supported by the following processors: - American Express Direct - Credit Mutuel-CIC - FDC Nashville Global - OmniPay Direct - SIX  #### GPX This field only supports transactions from the following card types: - Visa - Mastercard - AMEX - Discover - Diners - JCB - Union Pay International
     */
    type: string;
    /**
     * One of two possible meanings: - The two-digit month in which a token expires. - The two-digit month in which a card expires. Format: `MM` Possible values: `01` through `12`  **NOTE** The meaning of this field is dependent on the payment processor that is returning the value in an authorization reply. Please see the processor-specific details below.  #### Barclays and Streamline For Maestro (UK Domestic) and Maestro (International) cards on Barclays and Streamline, this must be a valid value (`01` through `12`) but is not required to be a valid expiration date. In other words, an expiration date that is in the past does not cause CyberSource to reject your request. However, an invalid expiration date might cause the issuer to reject your request.  #### Encoded Account Numbers For encoded account numbers (`card_type=039`), if there is no expiration date on the card, use `12`.\\ **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  #### Samsung Pay and Apple Pay Month in which the token expires. CyberSource includes this field in the reply message when it decrypts the payment blob for the tokenized transaction.  For processor-specific information, see the `customer_cc_expmo` field in [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
     */
    expirationMonth: string;
    /**
     * One of two possible meanings: - The four-digit year in which a token expires. - The four-digit year in which a card expires. Format: `YYYY` Possible values: `1900` through `3000` Data type: Non-negative integer  **NOTE** The meaning of this field is dependent on the payment processor that is returning the value in an authorization reply. Please see the processor-specific details below.  #### Barclays and Streamline For Maestro (UK Domestic) and Maestro (International) cards on Barclays and Streamline, this must be a valid value (1900 through 3000) but is not required to be a valid expiration date. In other words, an expiration date that is in the past does not cause CyberSource to reject your request. However, an invalid expiration date might cause the issuer to reject your request.  #### Encoded Account Numbers For encoded account numbers (`card_ type=039`), if there is no expiration date on the card, use `2021`.  #### FDC Nashville Global and FDMS South You can send in 2 digits or 4 digits. When you send in 2 digits, they must be the last 2 digits of the year.  #### Samsung Pay and Apple Pay Year in which the token expires. CyberSource includes this field in the reply message when it decrypts the payment blob for the tokenized transaction.  **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  For processor-specific information, see the `customer_cc_expyr` or `token_expiration_year` field in [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
     */
    expirationYear: string;
    /**
     * Customer’s payment network token value.
     */
    number: string;
  }
  export interface Riskv1authenticationsRiskInformation {
    buyerHistory?: Ptsv2paymentsRiskInformationBuyerHistory;
  }
  export interface Riskv1authenticationsTravelInformation {
    legs?: Array<Riskv1decisionsTravelInformationLegs>;
    /**
     * Number of passengers for whom the ticket was issued. If you do not include this field in your request, CyberSource uses a default value of 1. Required for American Express SafeKey (U.S.) for travel-related requests.
     */
    numberOfPassengers?: number;
    passengers?: Array<Riskv1decisionsTravelInformationPassengers>;
  }
  export interface Riskv1authenticationsetupsClientReferenceInformation {
    /**
     * Merchant-generated order reference or tracking number. It is recommended that you send a unique value for each transaction so that you can perform meaningful searches for the transaction.  #### Used by **Authorization** Required field.  #### PIN Debit Requests for PIN debit reversals need to use the same merchant reference number that was used in the transaction that is being reversed.  Required field for all PIN Debit requests (purchase, credit, and reversal).  #### FDC Nashville Global Certain circumstances can cause the processor to truncate this value to 15 or 17 characters for Level II and Level III processing, which can cause a discrepancy between the value you submit and the value included in some processor reports.
     */
    code: string;
  }
  export interface Riskv1authenticationsetupsPaymentInformation {
    card?: Riskv1authenticationsetupsPaymentInformationCard;
    tokenizedCard?: Riskv1authenticationsetupsPaymentInformationTokenizedCard;
    fluidData?: Riskv1authenticationsetupsPaymentInformationFluidData;
    customer?: Riskv1authenticationsetupsPaymentInformationCustomer;
  }
  export interface Riskv1authenticationsetupsPaymentInformationCard {
    /**
     * Three-digit value that indicates the card type.  **IMPORTANT** It is strongly recommended that you include the card type field in request messages even if it is optional for your processor and card type. Omitting the card type can cause the transaction to be processed with the wrong card type.  Possible values: - `001`: Visa. For card-present transactions on all processors except SIX, the Visa Electron card type is processed the same way that the Visa debit card is processed. Use card type value `001` for Visa Electron. - `002`: Mastercard, Eurocard[^1], which is a European regional brand of Mastercard. - `003`: American Express - `004`: Discover - `005`: Diners Club - `006`: Carte Blanche[^1] - `007`: JCB[^1] - `014`: Enroute[^1] - `021`: JAL[^1] - `024`: Maestro (UK Domestic)[^1] - `031`: Delta[^1]: Use this value only for Ingenico ePayments. For other processors, use `001` for all Visa card types. - `033`: Visa Electron[^1]. Use this value only for Ingenico ePayments and SIX. For other processors, use `001` for all Visa card types. - `034`: Dankort[^1] - `036`: Cartes Bancaires[^1] - `037`: Carta Si[^1] - `039`: Encoded account number[^1] - `040`: UATP[^1] - `042`: Maestro (International)[^1] - `050`: Hipercard[^2,3] - `051`: Aura - `054`: Elo[^3] - `062`: China UnionPay  [^1]: For this card type, you must include the `paymentInformation.card.type` or `paymentInformation.tokenizedCard.type` field in your request for an authorization or a stand-alone credit. [^2]: For this card type on Cielo 3.0, you must include the `paymentInformation.card.type` or `paymentInformation.tokenizedCard.type` field in a request for an authorization or a stand-alone credit. This card type is not supported on Cielo 1.5. [^3]: For this card type on Getnet and Rede, you must include the `paymentInformation.card.type` or `paymentInformation.tokenizedCard.type` field in a request for an authorization or a stand-alone credit.  #### Used by **Authorization** Required for Carte Blanche and JCB. Optional for all other card types.  #### Card Present reply This field is included in the reply message when the client software that is installed on the POS terminal uses the token management service (TMS) to retrieve tokenized payment details. You must contact customer support to have your account enabled to receive these fields in the credit reply message.  Returned by the Credit service.  This reply field is only supported by the following processors: - American Express Direct - Credit Mutuel-CIC - FDC Nashville Global - OmniPay Direct - SIX  #### GPX This field only supports transactions from the following card types: - Visa - Mastercard - AMEX - Discover - Diners - JCB - Union Pay International
     */
    type?: string;
    /**
     * Two-digit month in which the payment card expires.  Format: `MM`.  Valid values: `01` through `12`. Leading 0 is required.  #### Barclays and Streamline For Maestro (UK Domestic) and Maestro (International) cards on Barclays and Streamline, this must be a valid value (`01` through `12`) but is not required to be a valid expiration date. In other words, an expiration date that is in the past does not cause CyberSource to reject your request. However, an invalid expiration date might cause the issuer to reject your request.  #### Encoded Account Numbers For encoded account numbers (_type_=039), if there is no expiration date on the card, use `12`.  #### FDMS Nashville Required field.  #### GPX Required if `pointOfSaleInformation.entryMode=keyed`. However, this field is optional if your account is configured for relaxed requirements for address data and expiration date. **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  #### All other processors Required if `pointOfSaleInformation.entryMode=keyed`. However, this field is optional if your account is configured for relaxed requirements for address data and expiration date. **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
     */
    expirationMonth: string;
    /**
     * Four-digit year in which the payment card expires.  Format: `YYYY`.  #### Barclays and Streamline For Maestro (UK Domestic) and Maestro (International) cards on Barclays and Streamline, this must be a valid value (`1900` through `3000`) but is not required to be a valid expiration date. In other words, an expiration date that is in the past does not cause CyberSource to reject your request. However, an invalid expiration date might cause the issuer to reject your request.  #### Encoded Account Numbers For encoded account numbers (**_type_**`=039`), if there is no expiration date on the card, use `2021`.  #### FDMS Nashville Required field.  #### FDC Nashville Global and FDMS South You can send in 2 digits or 4 digits. If you send in 2 digits, they must be the last 2 digits of the year.  #### GPX Required if `pointOfSaleInformation.entryMode=keyed`. However, this field is optional if your account is configured for relaxed requirements for address data and expiration date. **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  #### All other processors Required if `pointOfSaleInformation.entryMode=keyed`. However, this field is optional if your account is configured for relaxed requirements for address data and expiration date. **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
     */
    expirationYear: string;
    /**
     * The customer’s payment card number, also known as the Primary Account Number (PAN). You can also use this field for encoded account numbers.  #### FDMS Nashville Required. String (19)  #### GPX Required if `pointOfSaleInformation.entryMode=keyed`. However, this field is optional if your account is configured for relaxed requirements for address data and expiration date. **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  #### All other processors Required if `pointOfSaleInformation.entryMode=keyed`. However, this field is optional if your account is configured for relaxed requirements for address data and expiration date. **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
     */
    number: string;
  }
  export interface Riskv1authenticationsetupsPaymentInformationCustomer {
    /**
     * Unique identifier for the legacy Secure Storage token used in the transaction. When you include this value in your request, many of the fields that are normally required for an authorization or credit become optional.
     */
    customerId?: string;
  }
  export interface Riskv1authenticationsetupsPaymentInformationFluidData {
    /**
     * Represents the encrypted payment data BLOB. The entry for this field is dependent on the payment solution a merchant uses.  #### Used by **Authorization and Standalone Credits** Required for authorizations and standalone credits that use Bluefin PCI P2PE.  #### Card Present processing This field represents the encrypted Bluefin PCI P2PE payment data. Obtain the encrypted payment data from a Bluefin-supported device.
     */
    value: string;
    /**
     * The encoded or encrypted value that a payment solution returns for an authorization request. For details about the valid values for a key, see [Creating an Online Authorization](https://developer.cybersource.com/api/developer-guides/dita-payments/CreatingOnlineAuth.html)
     */
    keySerialNumber?: string;
    /**
     * The identifier for a payment solution, which is sending the encrypted payment data for decryption. Valid values: - Samsung Pay: `RklEPUNPTU1PTi5TQU1TVU5HLklOQVBQLlBBWU1FTlQ=`  **Note**: For other payment solutions, the value may be specific to the customer's mobile device. For example, the descriptor for a Bluefin payment encryption would be a device-generated descriptor.  #### Used by **Authorization and Standalone Credits** Required for authorizations and standalone credits that use Bluefin PCI P2PE.  #### Card Present processing Format of the encrypted payment data. The value for Bluefin PCI P2PE is `Ymx1ZWZpbg==`.
     */
    descriptor?: string;
    /**
     * Encoding method used to encrypt the payment data.  Valid value: Base64
     */
    encoding?: string;
  }
  export interface Riskv1authenticationsetupsPaymentInformationTokenizedCard {
    /**
     * Type of transaction that provided the token data. This value does not specify the token service provider; it specifies the entity that provided you with information about the token.  Possible value: - `2`: Near-field communication (NFC) transaction. The customer’s mobile device provided the token data for a contactless EMV transaction. For recurring transactions, use this value if the original transaction was a contactless EMV transaction.  **NOTE** No CyberSource through VisaNet acquirers support EMV at this time.  Required field for PIN debit credit or PIN debit purchase transactions that use payment network tokens; otherwise, not used.
     */
    transactionType: string;
    /**
     * Three-digit value that indicates the card type.  **IMPORTANT** It is strongly recommended that you include the card type field in request messages even if it is optional for your processor and card type. Omitting the card type can cause the transaction to be processed with the wrong card type.  Possible values: - `001`: Visa. For card-present transactions on all processors except SIX, the Visa Electron card type is processed the same way that the Visa debit card is processed. Use card type value `001` for Visa Electron. - `002`: Mastercard, Eurocard[^1], which is a European regional brand of Mastercard. - `003`: American Express - `004`: Discover - `005`: Diners Club - `006`: Carte Blanche[^1] - `007`: JCB[^1] - `014`: Enroute[^1] - `021`: JAL[^1] - `024`: Maestro (UK Domestic)[^1] - `031`: Delta[^1]: Use this value only for Ingenico ePayments. For other processors, use `001` for all Visa card types. - `033`: Visa Electron[^1]. Use this value only for Ingenico ePayments and SIX. For other processors, use `001` for all Visa card types. - `034`: Dankort[^1] - `036`: Cartes Bancaires[^1] - `037`: Carta Si[^1] - `039`: Encoded account number[^1] - `040`: UATP[^1] - `042`: Maestro (International)[^1] - `050`: Hipercard[^2,3] - `051`: Aura - `054`: Elo[^3] - `062`: China UnionPay  [^1]: For this card type, you must include the `paymentInformation.card.type` or `paymentInformation.tokenizedCard.type` field in your request for an authorization or a stand-alone credit. [^2]: For this card type on Cielo 3.0, you must include the `paymentInformation.card.type` or `paymentInformation.tokenizedCard.type` field in a request for an authorization or a stand-alone credit. This card type is not supported on Cielo 1.5. [^3]: For this card type on Getnet and Rede, you must include the `paymentInformation.card.type` or `paymentInformation.tokenizedCard.type` field in a request for an authorization or a stand-alone credit.  #### Used by **Authorization** Required for Carte Blanche and JCB. Optional for all other card types.  #### Card Present reply This field is included in the reply message when the client software that is installed on the POS terminal uses the token management service (TMS) to retrieve tokenized payment details. You must contact customer support to have your account enabled to receive these fields in the credit reply message.  Returned by the Credit service.  This reply field is only supported by the following processors: - American Express Direct - Credit Mutuel-CIC - FDC Nashville Global - OmniPay Direct - SIX  #### GPX This field only supports transactions from the following card types: - Visa - Mastercard - AMEX - Discover - Diners - JCB - Union Pay International
     */
    type: string;
    /**
     * One of two possible meanings: - The two-digit month in which a token expires. - The two-digit month in which a card expires. Format: `MM` Possible values: `01` through `12`  **NOTE** The meaning of this field is dependent on the payment processor that is returning the value in an authorization reply. Please see the processor-specific details below.  #### Barclays and Streamline For Maestro (UK Domestic) and Maestro (International) cards on Barclays and Streamline, this must be a valid value (`01` through `12`) but is not required to be a valid expiration date. In other words, an expiration date that is in the past does not cause CyberSource to reject your request. However, an invalid expiration date might cause the issuer to reject your request.  #### Encoded Account Numbers For encoded account numbers (`card_type=039`), if there is no expiration date on the card, use `12`.\\ **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  #### Samsung Pay and Apple Pay Month in which the token expires. CyberSource includes this field in the reply message when it decrypts the payment blob for the tokenized transaction.  For processor-specific information, see the `customer_cc_expmo` field in [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
     */
    expirationMonth: string;
    /**
     * One of two possible meanings: - The four-digit year in which a token expires. - The four-digit year in which a card expires. Format: `YYYY` Possible values: `1900` through `3000` Data type: Non-negative integer  **NOTE** The meaning of this field is dependent on the payment processor that is returning the value in an authorization reply. Please see the processor-specific details below.  #### Barclays and Streamline For Maestro (UK Domestic) and Maestro (International) cards on Barclays and Streamline, this must be a valid value (1900 through 3000) but is not required to be a valid expiration date. In other words, an expiration date that is in the past does not cause CyberSource to reject your request. However, an invalid expiration date might cause the issuer to reject your request.  #### Encoded Account Numbers For encoded account numbers (`card_ type=039`), if there is no expiration date on the card, use `2021`.  #### FDC Nashville Global and FDMS South You can send in 2 digits or 4 digits. When you send in 2 digits, they must be the last 2 digits of the year.  #### Samsung Pay and Apple Pay Year in which the token expires. CyberSource includes this field in the reply message when it decrypts the payment blob for the tokenized transaction.  **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  For processor-specific information, see the `customer_cc_expyr` or `token_expiration_year` field in [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
     */
    expirationYear: string;
    /**
     * Customer’s payment network token value.
     */
    number: string;
  }
  export interface Riskv1authenticationsetupsProcessingInformation {
    /**
     * Type of digital payment solution for the transaction. Possible Values:   - `visacheckout`: Visa Checkout. This value is required for Visa Checkout transactions. For details, see `payment_solution` field description in [Visa Checkout Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/VCO_SCMP_API/html/)  - `001`: Apple Pay.  - `004`: Cybersource In-App Solution.  - `005`: Masterpass. This value is required for Masterpass transactions on OmniPay Direct. For details, see \"Masterpass\" in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  - `006`: Android Pay.  - `007`: Chase Pay.  - `008`: Samsung Pay.  - `012`: Google Pay.
     */
    paymentSolution?: string;
    /**
     * Identifier for the **Visa Checkout** order. Visa Checkout provides a unique order ID for every transaction in the Visa Checkout **callID** field.
     */
    visaCheckoutId?: string;
  }
  export interface Riskv1authenticationsetupsTokenInformation {
    /**
     * A temporary ID that represents the customer's payment data (which is securely stored in Visa Data Centers). Flex Microform generates this ID and sets it to expire within 15 minutes from when the ID is generated or until the first payment authorization is carried out (whichever occurs first).  Valid value for the ID is a 64-character, alphanumeric string.  Example: 1D08M4YB968R1F7YVL4TBBKYVNRIR02VZFH9CBYSQIJJXORPI1NK5C98D7F6EB53
     */
    transientToken?: string;
  }
  /**
   * Contains information about the buyer.
   */
  export interface Riskv1decisionsBuyerInformation {
    /**
     * Your identifier for the customer.  When a subscription or customer profile is being created, the maximum length for this field for most processors is 30. Otherwise, the maximum length is 100.  #### Comercio Latino For recurring payments in Mexico, the value is the customer’s contract number. Note Before you request the authorization, you must inform the issuer of the customer contract numbers that will be used for recurring transactions.  #### Worldpay VAP For a follow-on credit with Worldpay VAP, CyberSource checks the following locations, in the order given, for a customer account ID value and uses the first value it finds: 1. `customer_account_id` value in the follow-on credit request 2. Customer account ID value that was used for the capture that is being credited 3. Customer account ID value that was used for the original authorization If a customer account ID value cannot be found in any of these locations, then no value is used.  For processor-specific information, see the `customer_account_id` field description in [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
     */
    merchantCustomerId?: string;
    /**
     * Specifies the customer account user name.
     */
    username?: string;
    /**
     * The merchant's password that CyberSource hashes and stores as a hashed password.  For details about this field, see the `customer_password` field description in _Decision Manager Using the SCMP API Developer Guide_ on the [CyberSource Business Center.](https://ebc2.cybersource.com/ebc2/) Click **Decision Manager** > **Documentation** > **Guides** > _Decision Manager Using the SCMP API Developer Guide_ (PDF link).
     */
    hashedPassword?: string;
    dateOfBirth?: string;
    personalIdentification?: Array<Ptsv2paymentsBuyerInformationPersonalIdentification>;
  }
  export interface Riskv1decisionsClientReferenceInformation {
    /**
     * Merchant-generated order reference or tracking number. It is recommended that you send a unique value for each transaction so that you can perform meaningful searches for the transaction.  #### Used by **Authorization** Required field.  #### PIN Debit Requests for PIN debit reversals need to use the same merchant reference number that was used in the transaction that is being reversed.  Required field for all PIN Debit requests (purchase, credit, and reversal).  #### FDC Nashville Global Certain circumstances can cause the processor to truncate this value to 15 or 17 characters for Level II and Level III processing, which can cause a discrepancy between the value you submit and the value included in some processor reports. 
     */
    'code': string;
    /**
     * Used to resume a transaction that was paused for an order modification rule to allow for payer authentication to complete. To resume and continue with the authorization/decision service flow, call the services and include the request id from the prior decision call. 
     */
    'pausedRequestId'?: string;
    /**
     * Brief description of the order or any comment you wish to add to the order. 
     */
    'comments'?: string;
    'partner'?: Riskv1decisionsClientReferenceInformationPartner;
  }
  export interface Riskv1decisionsClientReferenceInformationPartner {
    /**
     * Identifier for the developer that helped integrate a partner solution to CyberSource.  Send this value in all requests that are sent through the partner solutions built by that developer. CyberSource assigns the ID to the developer.  **Note** When you see a developer ID of 999 in reports, the developer ID that was submitted is incorrect. 
     */
    'developerId'?: string;
    /**
     * Identifier for the partner that is integrated to CyberSource.  Send this value in all requests that are sent through the partner solution. CyberSource assigns the ID to the partner.  **Note** When you see a solutionId of 999 in reports, the solutionId that was submitted is incorrect. 
     */
    'solutionId'?: string;
    'originalTransactionId'?: string;
  }
  export interface Riskv1decisionsConsumerAuthenticationInformation {
    strongAuthentication?: Riskv1decisionsConsumerAuthenticationInformationStrongAuthentication;
    /**
     * Indicates the type of authentication that will be used to challenge the card holder.  Possible Values:  01 - Static  02 - Dynamic  03 - OOB (Out of Band)  04 - Decoupled **NOTE**:  EMV 3-D Secure version 2.1.0 supports values 01-03.  Version 2.2.0 supports values 01-04.  Decoupled authentication is not supported at this time.
     */
    authenticationType?: string;
    acsWindowSize?: string;
    /**
     * Data that documents and supports a specific authentication process.
     */
    alternateAuthenticationData?: string;
    /**
     * Date and time in UTC of the cardholder authentication. Format: YYYYMMDDHHMM
     */
    alternateAuthenticationDate?: string;
    /**
     * Mechanism used by the cardholder to authenticate to the 3D Secure requestor. Possible values: - `01`: No authentication occurred - `02`: Login using merchant system credentials - `03`: Login using Federated ID - `04`: Login using issuer credentials - `05`: Login using third-party authenticator - `06`: Login using FIDO Authenticator
     */
    alternateAuthenticationMethod?: string;
    /**
     * The date/time of the authentication at the 3DS servers. RISK update authorization service in auth request payload with value returned in `consumerAuthenticationInformation.alternateAuthenticationData` if merchant calls via CYBS or field can be provided by merchant in authorization request if calling an external 3DS provider.
     */
    authenticationDate?: string;
    /**
     * Payer authentication transaction identifier passed to link the check enrollment and validate authentication messages. **Note**: Required for Standard integration for enroll service. Required for Hybrid integration for validate service.
     */
    authenticationTransactionId?: string;
    /**
     * An indicator as to why the transaction was canceled. Possible Values:  - `01`: Cardholder selected Cancel. - `02`: Reserved for future EMVCo use (values invalid until defined by EMVCo). - `03`: Transaction Timed Out—Decoupled Authentication - `04`: Transaction timed out at ACS—other timeouts - `05`: Transaction Timed out at ACS - First CReq not received by ACS - `06`: Transaction Error - `07`: Unknown - `08`: Transaction Timed Out at SDK
     */
    challengeCancelCode?: string;
    /**
     * Possible values: - `01`: No preference - `02`: No challenge request - `03`: Challenge requested (3D Secure requestor preference) - `04`: Challenge requested (mandate) - `05`: No challenge requested (transactional risk analysis is already performed) - `06`: No challenge requested (Data share only) - `07`: No challenge requested (strong consumer authentication is already performed) - `08`: No challenge requested (utilize whitelist exemption if no challenge required) - `09`: Challenge requested (whitelist prompt requested if challenge required) **Note** This field will default to `01` on merchant configuration and can be overridden by the merchant. EMV 3D Secure version 2.1.0 supports values `01-04`. Version 2.2.0 supports values `01-09`.  For details, see `pa_challenge_code` field description in [CyberSource Payer Authentication Using the SCMP API.] (https://apps.cybersource.com/library/documentation/dev_guides/Payer_Authentication_SCMP_API/html)
     */
    challengeCode?: string;
    /**
     * The `consumerAuthenticationInformation.challengeCode` indicates the authentication type/level, or challenge, that was presented to the cardholder at checkout by the merchant when calling the Carte Bancaire 3DS servers via CYBS RISK services. It conveys to the issuer the alternative authentication methods that the consumer used.
     */
    challengeStatus?: string;
    /**
     * An alias that uniquely identifies the customer's account and credit card on file. Note This field is required if Tokenization is enabled in the merchant profile settings.
     */
    customerCardAlias?: string;
    /**
     * Indicates whether the 3DS Requestor requests the ACS to utilize Decoupled Authentication and agrees to utilize Decoupled Authentication if the ACS confirms its use.  Possible Values:  Y - Decoupled Authentication is supported and preferred if challenge is necessary  N - Do not use Decoupled Authentication  **Default Value**: N
     */
    decoupledAuthenticationIndicator?: string;
    /**
     * Indicates the maximum amount of time that the 3DS Requestor will wait for an ACS (Active control server) to provide the results of a Decoupled Authentication transaction (in minutes). Possible Values: Numeric values between 1 and 10080 accepted.
     */
    decoupledAuthenticationMaxTime?: string;
    /**
     * Indicates that the card being used is the one designated as the primary payment card for purchase. Recommended for Discover ProtectBuy.
     */
    defaultCard?: boolean;
    /**
     * Determines the channel that the transaction came through. Possible Values: SDK/Browser/3RI. 3RI - 3DS request initiated.
     */
    deviceChannel?: string;
    /**
     * An integer value greater than 1 indicating the max number of permitted authorizations for installment payments. **Note** This is required if the merchant and cardholder have agreed to installment payments.
     */
    installmentTotalCount?: number;
    /**
     * Calculated by merchants as per PSD2** RTS** (EEA** card fraud divided by all EEA card volumes). Possible Values: 1 = Represents fraud rate <=1  2 = Represents fraud rate >1 and <=6  3 = Represents fraud rate >6 and <=13  4 = Represents fraud rate >13 and <=25  5 = Represents fraud rate >25  EEA** = European Economic Area RTS** = Regulatory Technical Standards PSD2** = Payment Services Directive
     */
    merchantFraudRate?: string;
    /**
     * Indicates whether the customer has opted in for marketing offers. Recommended for Discover ProtectBuy.
     */
    marketingOptIn?: boolean;
    /**
     * Indicates origin of the marketing offer. Recommended for Discover ProtectBuy.
     */
    marketingSource?: string;
    /**
     * Merchant category code. **Important** Required only for Visa Secure transactions in Brazil. Do not use this request field for any other types of transactions.
     */
    mcc?: string;
    /**
     * Risk Score provided by merchants. This is specific for CB transactions.
     */
    merchantScore?: number;
    /**
     * Category of the message for a specific use case. Possible values:  - `01`: PA- payment authentication - `02`: NPA- non-payment authentication - `03-79`: Reserved for EMVCo future use (values invalid until defined by EMVCo) - `80-99`: Reserved for DS use
     */
    messageCategory?: string;
    /**
     * Non-Payer Authentication Indicator. Possible values: - `01`: Add card - `02`: Maintain card information - `03`: Cardholder verification for EMV token - `04-80` Reserved for EMVCo - `80-90` Reserved DS
     */
    npaCode?: string;
    /**
     * Specifies the Brazilian payment account type used for the transaction. This field overrides other payment types that might be specified in the request. Use one of the following values for this field: - `NA`: Not applicable. Do not override other payment types that are specified in the request. - `CR`: Credit card. - `DB`: Debit card. - `VSAVR`: Visa Vale Refeicao - `VSAVA`: Visa Vale Alimentacao **Important** Required only for Visa Secure transactions in Brazil. Do not use this request field for any other types of transactions.
     */
    overridePaymentMethod?: string;
    /**
     * Two-character [ISO Standard Country Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/countries_alpha_list.pdf)..
     */
    overrideCountryCode?: string;
    /**
     * This field carry data that the ACS can use to verify the authentication process.
     */
    priorAuthenticationData?: string;
    /**
     * Mechanism used by the Cardholder to previously authenticate to the 3DS Requestor.  01 - Frictionless authentication occurred by ACS  02 - Cardholder challenge occurred by ACS  03 - AVS verified  04 - Other issuer methods  05-79 - Reserved for EMVCo future use (values invalid until defined by EMVCo)  80-99 - Reserved for DS use
     */
    priorAuthenticationMethod?: string;
    /**
     * This data element contains a ACS Transaction ID for a prior authenticated transaction. For example, the first recurring transaction that was authenticated with the cardholder
     */
    priorAuthenticationReferenceId?: string;
    /**
     * Date and time in UTC of the prior cardholder authentication. Format – YYYYMMDDHHMM
     */
    priorAuthenticationTime?: string;
    /**
     * Specifies the product code, which designates the type of transaction. Specify one of the following values for this field: - AIR: Airline purchase Important Required for American Express SafeKey (U.S.). - `ACC`: Accommodation Rental - `ACF`: Account funding - `CHA`: Check acceptance - `DIG`: Digital Goods - `DSP`: Cash Dispensing - `GAS`: Fuel - `GEN`: General Retail - `LUX`: Luxury Retail - `PAL`: Prepaid activation and load - `PHY`: Goods or services purchase - `QCT`: Quasi-cash transaction - `REN`: Car Rental - `RES`: Restaurant - `SVC`: Services - `TBD`: Other - `TRA`: Travel **Important** Required for Visa Secure transactions in Brazil. Do not use this request field for any other types of transactions.
     */
    productCode?: string;
    /**
     * The URL of the merchant’s return page. CyberSource adds this return URL to the step-up JWT and returns it in the response of the Payer Authentication enrollment call. The merchant's return URL page serves as a listening URL. Once the bank session completes, the merchant receives a POST to their URL. This response contains the completed bank session’s transactionId. The merchant’s return page should capture the transaction ID and send it in the Payer Authentication validation call.
     */
    returnUrl?: string;
    /**
     * Cardinal's directory server assigned 3DS Requestor ID value
     */
    requestorId?: string;
    /**
     * Indicates the type of 3RI request.  Possible Values:  01 - Recurring transaction  02 - Installment transaction  03 - Add card  04 - Maintain card  05 - Account verification  06 - Split/delayed shipment  07 - Top-up  08 - Mail Order  09 - Telephone Order  10 - Whitelist status check  11 - Other payment
     */
    requestorInitiatedAuthenticationIndicator?: string;
    /**
     * Cardinal's directory server assigned 3DS Requestor Name value
     */
    requestorName?: string;
    /**
     * Reference ID that corresponds to the device fingerprinting data that was collected previously. Note Required for Hybrid integration.
     */
    referenceId?: string;
    /**
     * This field indicates the maximum amount of time for all 3DS 2.0 messages to be communicated between all components (in minutes).  Possible Values:  Greater than or equal to 05 (05 is the minimum timeout to set)  Cardinal Default is set to 15  NOTE: This field is a required 3DS 2.0 field and Cardinal sends in a default of 15 if nothing is passed
     */
    sdkMaxTimeout?: string;
    /**
     * Indicates dedicated payment processes and procedures were used, potential secure corporate payment exemption applies. Possible Values : 0/1
     */
    secureCorporatePaymentIndicator?: string;
    /**
     * Transaction mode identifier. Identifies the channel from which the transaction originates. Possible values:  - `M`: MOTO (Mail Order Telephone Order) - `R`: Retail - `S`: eCommerce - `P`: Mobile Device - `T`: Tablet
     */
    transactionMode?: string;
    /**
     * Enables the communication of trusted beneficiary/whitelist status between the ACS, the DS and the 3DS Requestor.  Possible Values:  Y - 3DS Requestor is whitelisted by cardholder  N - 3DS Requestor is not whitelisted by cardholder
     */
    whiteListStatus?: string;
  }
  export interface Riskv1decisionsConsumerAuthenticationInformationStrongAuthentication {
    /**
     * Indicates the type of Authentication request  01 - Payment transaction  02 - Recurring transaction  03 - Installment transaction  04 - Add card  05 - Maintain card  06 - Cardholder verification as part of EMV token ID and V
     */
    authenticationIndicator?: string;
  }
  export interface Riskv1decisionsDeviceInformation {
    /**
     * Whether the customer’s browser accepts cookies. This field can contain one of the following values: - `yes`: The customer’s browser accepts cookies. - `no`: The customer’s browser does not accept cookies.
     */
    cookiesAccepted?: string;
    /**
     * IP address of the customer.  #### Used by **Authorization, Capture, and Credit** Optional field.
     */
    ipAddress?: string;
    /**
     * DNS resolved hostname from `ipAddress`.
     */
    hostName?: string;
    /**
     * Field that contains the session ID that you send to Decision Manager to obtain the device fingerprint information. The string can contain uppercase and lowercase letters, digits, hyphen (-), and underscore (_). However, do not use the same uppercase and lowercase letters to indicate different session IDs.  The session ID must be unique for each merchant ID. You can use any string that you are already generating, such as an order number or web session ID.  The session ID must be unique for each page load, regardless of an individual’s web session ID. If a user navigates to a profiled page and is assigned a web session, navigates away from the profiled page, then navigates back to the profiled page, the generated session ID should be different and unique. You may use a web session ID, but it is preferable to use an application GUID (Globally Unique Identifier). This measure ensures that a unique ID is generated every time the page is loaded, even if it is the same user reloading the page.
     */
    fingerprintSessionId?: string;
    /**
     * Email address set in the customer’s browser, which may differ from customer email.
     */
    httpBrowserEmail?: string;
    /**
     * Customer’s browser as identified from the HTTP header data. For example, `Mozilla` is the value that identifies the Netscape browser.
     */
    userAgent?: string;
    rawData?: Array<Ptsv2paymentsDeviceInformationRawData>;
    /**
     * Value of the Accept header sent by the customer’s web browser. **Note** If the customer’s browser provides a value, you must include it in your request.
     */
    httpAcceptBrowserValue?: string;
    /**
     * The exact content of the HTTP accept header.
     */
    httpAcceptContent?: string;
    /**
     * Value represents the browser language as defined in IETF BCP47. Example:en-US, refer  https://en.wikipedia.org/wiki/IETF_language_tag for more details.
     */
    httpBrowserLanguage?: string;
    /**
     * A Boolean value that represents the ability of the cardholder browser to execute Java. Value is returned from the navigator.javaEnabled property. Possible Values:True/False
     */
    httpBrowserJavaEnabled?: boolean;
    /**
     * A Boolean value that represents the ability of the cardholder browser to execute JavaScript. Possible Values:True/False. **Note**: Merchants should be able to know the values from fingerprint details of cardholder's browser.
     */
    httpBrowserJavaScriptEnabled?: boolean;
    /**
     * Value represents the bit depth of the color palette for displaying images, in bits per pixel. Example : 24, refer https://en.wikipedia.org/wiki/Color_depth for more details
     */
    httpBrowserColorDepth?: string;
    /**
     * Total height of the Cardholder's scree in pixels, example: 864.
     */
    httpBrowserScreenHeight?: string;
    /**
     * Total width of the cardholder's screen in pixels. Example: 1536.
     */
    httpBrowserScreenWidth?: string;
    /**
     * Time difference between UTC time and the cardholder browser local time, in minutes, Example:300
     */
    httpBrowserTimeDifference?: string;
    /**
     * Value of the User-Agent header sent by the customer’s web browser. Note If the customer’s browser provides a value, you must include it in your request.
     */
    userAgentBrowserValue?: string;
  }
  /**
   * Contains merchant-defined key-value pairs.
   */
  export interface Riskv1decisionsMerchantDefinedInformation {
    /**
     * Fields that you can use to store information. The value appears in the Case Management Details window in the Business Center. The first four fields are the same fields that are used by the Secure Data services. See request code examples. **Warning** Merchant-defined data fields are not intended to and must not be used to capture personally identifying information. Accordingly, merchants are prohibited from capturing, obtaining, and/or transmitting any personally identifying information in or via the merchant-defined data fields. Personally identifying information includes, but is not limited to, address, credit card number, social security number, driver's license number, state-issued identification number, passport number, and card verification numbers (CVV, CVC2, CVV2, CID, CVN). In the event CyberSource discovers that a merchant is capturing and/or transmitting personally identifying information via the merchant-defined data fields, whether or not intentionally, CyberSource will immediately suspend the merchant's account, which will result in a rejection of any and all transaction requests submitted by the merchant after the point of suspension.
     */
    key?: string;
    /**
     * String value for the key
     */
    value?: string;
  }
  export interface Riskv1decisionsMerchantInformation {
    merchantDescriptor?: Riskv1decisionsMerchantInformationMerchantDescriptor;
    /**
     * Your company’s name as you want it to appear to the customer in the issuing bank’s authentication form. This value overrides the value specified by your merchant bank.
     */
    merchantName?: string;
  }
  export interface Riskv1decisionsMerchantInformationMerchantDescriptor {
    /**
     * Your merchant name.  **Note** For Paymentech processor using Cybersource Payouts, the maximum data length is 22.  #### PIN debit Your business name. This name is displayed on the cardholder’s statement. When you include more than one consecutive space, extra spaces are removed.  When you do not include this value in your PIN debit request, the merchant name from your account is used. **Important** This value must consist of English characters.  Optional field for PIN debit credit or PIN debit purchase requests.  #### Airline processing Your merchant name. This name is displayed on the cardholder’s statement. When you include more than one consecutive space, extra spaces are removed.  **Note** Some airline fee programs may require the original ticket number (ticket identifier) or the ancillary service description in positions 13 through 23 of this field.  **Important** This value must consist of English characters.  Required for captures and credits.
     */
    name?: string;
    /**
     * Address of company's website provided by merchant
     */
    url?: string;
  }
  /**
   * Contains detailed order-level information.
   */
  export interface Riskv1decisionsOrderInformation {
    amountDetails?: Riskv1decisionsOrderInformationAmountDetails;
    /**
     * Indicates whether cardholder is placing an order with a future availability or release date. This field can contain one of these values: - MERCHANDISE_AVAILABLE: Merchandise available - FUTURE_AVAILABILITY: Future availability
     */
    preOrder?: string;
    /**
     * Expected date that a pre-ordered purchase will be available. Format: YYYYMMDD
     */
    preOrderDate?: string;
    /**
     * Indicates whether the cardholder is reordering previously purchased merchandise. This field can contain one of these values: - false: First time ordered - true: Reordered
     */
    reordered?: boolean;
    shippingDetails?: Riskv1decisionsOrderInformationShippingDetails;
    shipTo?: Riskv1decisionsOrderInformationShipTo;
    /**
     * Boolean that indicates whether returns are accepted for this order. This field can contain one of the following values: - true: Returns are accepted for this order. - false: Returns are not accepted for this order.
     */
    returnsAccepted?: boolean;
    /**
     * This array contains detailed information about individual products in the order.
     */
    lineItems?: Array<Riskv1decisionsOrderInformationLineItems>;
    billTo?: Riskv1decisionsOrderInformationBillTo;
    /**
     * Total number of articles/items in the order as a numeric decimal count. Possible values: 00 - 99
     */
    totalOffersCount?: string;
  }
  /**
   * Contains `currency` and `totalAmount` for this order.
   */
  export interface Riskv1decisionsOrderInformationAmountDetails {
    /**
     * Currency used for the order. Use the three-character [ISO Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf)  #### Used by **Authorization** Required field.  **Authorization Reversal** For an authorization reversal (`reversalInformation`) or a capture (`processingOptions.capture` is set to `true`), you must use the same currency that you used in your payment authorization request.  #### PIN Debit Currency for the amount you requested for the PIN debit purchase. This value is returned for partial authorizations. The issuing bank can approve a partial amount if the balance on the debit card is less than the requested transaction amount. For the possible values, see the [ISO Standard Currency Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/currencies.pdf). Returned by PIN debit purchase.  For PIN debit reversal requests, you must use the same currency that was used for the PIN debit purchase or PIN debit credit that you are reversing. For the possible values, see the [ISO Standard Currency Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/currencies.pdf).  Required field for PIN Debit purchase and PIN Debit credit requests. Optional field for PIN Debit reversal requests.  #### GPX This field is optional for reversing an authorization or credit.  #### DCC for First Data Your local currency. For details, see the `currency` field description in [Dynamic Currency Conversion For First Data Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/DCC_FirstData_SCMP/DCC_FirstData_SCMP_API.pdf).  #### Tax Calculation Required for international tax and value added tax only. Optional for U.S. and Canadian taxes. Your local currency.
     */
    currency: string;
    /**
     * Grand total for the order. This value cannot be negative. You can include a decimal point (.), but no other special characters. CyberSource truncates the amount to the correct number of decimal places.  **Note** For CTV, FDCCompass, Paymentech processors, the maximum length for this field is 12.  **Important** Some processors have specific requirements and limitations, such as maximum amounts and maximum field lengths. For details, see: - \"Authorization Information for Specific Processors\" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/). - \"Capture Information for Specific Processors\" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/). - \"Credit Information for Specific Processors\" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/).  If your processor supports zero amount authorizations, you can set this field to 0 for the authorization to check if the card is lost or stolen. For details, see \"Zero Amount Authorizations,\" \"Credit Information for Specific Processors\" in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  #### Card Present Required to include either this field or `orderInformation.lineItems[].unitPrice` for the order.  #### Invoicing Required for creating a new invoice.  #### PIN Debit Amount you requested for the PIN debit purchase. This value is returned for partial authorizations. The issuing bank can approve a partial amount if the balance on the debit card is less than the requested transaction amount.  Required field for PIN Debit purchase and PIN Debit credit requests. Optional field for PIN Debit reversal requests.  #### GPX This field is optional for reversing an authorization or credit; however, for all other processors, these fields are required.  #### DCC with a Third-Party Provider Set this field to the converted amount that was returned by the DCC provider. You must include either this field or the 1st line item in the order and the specific line-order amount in your request. For details, see `grand_total_amount` field description in [Dynamic Currency Conversion For First Data Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/DCC_FirstData_SCMP/DCC_FirstData_SCMP_API.pdf).  #### FDMS South If you accept IDR or CLP currencies, see the entry for FDMS South in \"Authorization Information for Specific Processors\" of the [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  #### DCC for First Data Not used.
     */
    totalAmount?: string;
  }
  export interface Riskv1decisionsOrderInformationBillTo {
    /**
     * Payment card billing street address as it appears on the credit card issuer’s records.  #### Atos This field must not contain colons (:).  #### CyberSource through VisaNet **Important** When you populate orderInformation.billTo.address1 and orderInformation.billTo.address2, CyberSource through VisaNet concatenates the two values. If the concatenated value exceeds 40 characters, CyberSource through VisaNet truncates the value at 40 characters before sending it to Visa and the issuing bank. Truncating this value affects AVS results and therefore might also affect risk decisions and chargebacks. Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  #### FDMS Nashville When the street name is numeric, it must be sent in numeric format. For example, if the address is _One First Street_, it must be sent as _1 1st Street_.  Required if keyed; not used if swiped.  String (20)  #### TSYS Acquiring Solutions Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.  #### All other processors: Optional. String (60)  #### For Payouts This field may be sent only for FDC Compass.  **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
     */
    address1?: string;
    /**
     * Used for additional address information. For example: _Attention: Accounts Payable_ Optional field.  For Payouts: This field may be sent only for FDC Compass.  #### Atos This field must not contain colons (:).  #### CyberSource through VisaNet **Important** When you populate `orderInformation.billTo.address1` and `orderInformation.billTo.address2`, CyberSource through VisaNet concatenates the two values. If the concatenated value exceeds 40 characters, CyberSource through VisaNet truncates the value at 40 characters before sending it to Visa and the issuing bank. Truncating this value affects AVS results and therefore might also affect risk decisions and chargebacks. Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  #### Chase Paymentech Solutions, FDC Compass, and TSYS Acquiring Solutions This value is used for AVS.  #### FDMS Nashville `orderInformation.billTo.address1` and `orderInformation.billTo.address2` together cannot exceed 20 characters. String (20)  #### All Other Processors String (60)
     */
    address2?: string;
    /**
     * State or province of the billing address. Use the [State, Province, and Territory Codes for the United States and Canada](https://developer.cybersource.com/library/documentation/sbc/quickref/states_and_provinces.pdf).  For Payouts: This field may be sent only for FDC Compass.  ##### CyberSource through VisaNet Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  #### Chase Paymentech Solutions Optional field.  ####  Credit Mutuel-CIC Optional field.  #### OmniPay Direct Optional field.  #### SIX Optional field.  #### TSYS Acquiring Solutions Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.  #### Worldpay VAP Optional field.  #### All other processors Not used.
     */
    administrativeArea?: string;
    /**
     * Payment card billing country. Use the two-character [ISO Standard Country Codes](http://apps.cybersource.com/library/documentation/sbc/quickref/countries_alpha_list.pdf).  #### CyberSource through VisaNet Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  #### Chase Paymentech Solutions Optional field.  ####  Credit Mutuel-CIC Optional field.  #### OmniPay Direct Optional field.  #### SIX Optional field.  #### TSYS Acquiring Solutions Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.  #### Worldpay VAP Optional field.  #### All other processors Not used.
     */
    country?: string;
    /**
     * Payment card billing city.  #### Atos This field must not contain colons (:).  #### CyberSource through VisaNet Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  #### For Payouts: This field may be sent only for FDC Compass.  #### Chase Paymentech Solutions Optional field.  ####  Credit Mutuel-CIC Optional field.  #### OmniPay Direct Optional field.  #### SIX Optional field.  #### TSYS Acquiring Solutions Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.  #### Worldpay VAP Optional field.  #### All other processors Not used.
     */
    locality?: string;
    /**
     * Customer’s first name. This name must be the same as the name on the card.  **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  #### CyberSource Latin American Processing **Important** For an authorization request, CyberSource Latin American Processing concatenates `orderInformation.billTo.firstName` and `orderInformation.billTo.lastName`. If the concatenated value exceeds 30 characters, CyberSource Latin American Processing declines the authorization request.\\ **Note** CyberSource Latin American Processing is the name of a specific processing connection that CyberSource supports. In the CyberSource API documentation, CyberSource Latin American Processing does not refer to the general topic of processing in Latin America. The information in this field description is for the specific processing connection called _CyberSource Latin American Processing_. It is not for any other Latin American processors that CyberSource supports.  #### CyberSource through VisaNet Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  #### For Payouts: This field may be sent only for FDC Compass.  #### Chase Paymentech Solutions Optional field.  ####  Credit Mutuel-CIC Optional field.  #### OmniPay Direct Optional field.  #### SIX Optional field.  #### TSYS Acquiring Solutions Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.  #### Worldpay VAP Optional field.  #### All other processors Not used.
     */
    firstName?: string;
    /**
     * Customer’s last name. This name must be the same as the name on the card.  **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  #### Chase Paymentech Solutions Optional field.  ####  Credit Mutuel-CIC Optional field.  #### CyberSource Latin American Processing **Important** For an authorization request, CyberSource Latin American Processing concatenates `orderInformation.billTo.firstName` and `orderInformation.billTo.lastName`. If the concatenated value exceeds 30 characters, CyberSource Latin American Processing declines the authorization request.\\ **Note** CyberSource Latin American Processing is the name of a specific processing connection that CyberSource supports. In the CyberSource API documentation, CyberSource Latin American Processing does not refer to the general topic of processing in Latin America. The information in this field description is for the specific processing connection called CyberSource Latin American Processing. It is not for any other Latin American processors that CyberSource supports.  #### CyberSource through VisaNet Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  #### For Payouts: This field may be sent only for FDC Compass.  #### OmniPay Direct Optional field.  #### RBS WorldPay Atlanta Optional field.  #### SIX Optional field.  #### TSYS Acquiring Solutions Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.  #### Worldpay VAP Optional field.  #### All other processors Not used.
     */
    lastName?: string;
    /**
     * Customer’s phone number.  It is recommended that you include the country code when the order is from outside the U.S.  #### Chase Paymentech Solutions Optional field.  ####  Credit Mutuel-CIC Optional field.  #### CyberSource through VisaNet Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  #### For Payouts: This field may be sent only for FDC Compass.  #### OmniPay Direct Optional field.  #### SIX Optional field.  #### TSYS Acquiring Solutions Optional field.  #### Worldpay VAP Optional field.  #### All other processors Not used.
     */
    phoneNumber?: string;
    /**
     * Customer's email address, including the full domain name.  #### CyberSource through VisaNet Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  For processor-specific information, see the `customer_email` request-level field description in [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)  #### Invoicing Email address for the customer for sending the invoice. If the invoice is in SENT status and email is updated, the old email customer payment link won't work and you must resend the invoice with the new payment link.  #### Chase Paymentech Solutions Optional field.  ####  Credit Mutuel-CIC Optional field.  #### OmniPay Direct Optional field.  #### SIX Optional field.  #### TSYS Acquiring Solutions Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.  #### Worldpay VAP Optional field.  #### All other processors Not used.
     */
    email?: string;
    /**
     * Postal code for the billing address. The postal code must consist of 5 to 9 digits.  When the billing country is the U.S., the 9-digit postal code must follow this format: [5 digits][dash][4 digits]  **Example** `12345-6789`  When the billing country is Canada, the 6-digit postal code must follow this format: [alpha][numeric][alpha][space][numeric][alpha][numeric]  **Example** `A1B 2C3`  **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  #### For Payouts:  This field may be sent only for FDC Compass.  #### American Express Direct Before sending the postal code to the processor, CyberSource removes all nonalphanumeric characters and, if the remaining value is longer than nine characters, truncates the value starting from the right side.  #### Atos This field must not contain colons (:).  #### CyberSource through VisaNet Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  #### FDMS Nashville Required if `pointOfSaleInformation.entryMode=keyed` and the address is in the U.S. or Canada. Optional if `pointOfSaleInformation.entryMode=keyed` and the address is **not** in the U.S. or Canada. Not used if swiped.  #### RBS WorldPay Atlanta: For best card-present keyed rates, send the postal code if `pointOfSaleInformation.entryMode=keyed`.  #### TSYS Acquiring Solutions Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.  #### All other processors: Optional field.
     */
    postalCode?: string;
  }
  export interface Riskv1decisionsOrderInformationLineItems {
    /**
     * Total amount for the item. Normally calculated as the unit price times quantity.  When `orderInformation.lineItems[].productCode` is \"gift_card\", this is the purchase amount total for prepaid gift cards in major units.  Example: 123.45 USD = 123
     */
    totalAmount?: string;
    /**
     * Per-item price of the product. This value for this field cannot be negative.  You must include either this field or the request-level field `orderInformation.amountDetails.totalAmount` in your request.  You can include a decimal point (.), but you cannot include any other special characters. The value is truncated to the correct number of decimal places.  #### DCC with a Third-Party Provider Set this field to the converted amount that was returned by the DCC provider. You must include either the 1st line item in the order and this field, or the request-level field `orderInformation.amountDetails.totalAmount` in your request.  #### FDMS South If you accept IDR or CLP currencies, see the entry for FDMS South in the [Merchant Descriptors Using the SCMP API Guide.] (https://apps.cybersource.com/library/documentation/dev_guides/Merchant_Descriptors_SCMP_API/html/)  #### Tax Calculation Required field for U.S., Canadian, international and value added taxes.  #### Zero Amount Authorizations If your processor supports zero amount authorizations, you can set this field to 0 for the authorization to check if the card is lost or stolen.  #### Maximum Field Lengths For GPN and JCN Gateway: Decimal (10) All other processors: Decimal (15)
     */
    unitPrice?: string;
    /**
     * Number of units for this order. Must be a non-negative integer.  The default is `1`. For an authorization or capture transaction (`processingOptions.capture` is set to `true` or `false`), this field is required when `orderInformation.lineItems[].productCode` is not `default` or one of the other values related to shipping and/or handling.  #### Tax Calculation Optional field for U.S., Canadian, international tax, and value added taxes.
     */
    quantity?: number;
    /**
     * When `orderInformation.lineItems[].productCode` is \"gift_card\", this is the currency used for the gift card purchase.  For details, see `pa_gift_card_currency` field description in [CyberSource Payer Authentication Using the SCMP API.] (https://apps.cybersource.com/library/documentation/dev_guides/Payer_Authentication_SCMP_API/Payer_Authentication_SCMP_API.pdf)  For the possible values, see the [ISO Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf)
     */
    giftCardCurrency?: number;
    /**
     * Product identifier code. Also known as the Stock Keeping Unit (SKU) code for the product.  For an authorization or capture transaction (`processingOptions.capture` is set to `true` or `false`), this field is required when `orderInformation.lineItems[].productCode` is not set to **default** or one of the other values that are related to shipping and/or handling.  #### Tax Calculation Optional field for U.S. and Canadian taxes. Not applicable to international and value added taxes. For an authorization or capture transaction (`processingOptions.capture` is set to `true` or `false`), this field is required when `orderInformation.lineItems[].productCode` is not `default` or one of the values related to shipping and/or handling.
     */
    productSKU?: string;
    /**
     * Indicates the level of risk for the product. This field can contain one of the following values: - `low`: The product is associated with few chargebacks. - `normal`: The product is associated with a normal number of chargebacks. - `high`: The product is associated with many chargebacks.
     */
    productRisk?: string;
    /**
     * Brief description of item.
     */
    productDescription?: string;
    /**
     * For an authorization or capture transaction (`processingOptions.capture` is `true` or `false`), this field is required when `orderInformation.lineItems[].productCode` is not `default` or one of the other values that are related to shipping and/or handling.  #### Tax Calculation Optional field for U.S., Canadian, international tax, and value added taxes.
     */
    productName?: string;
    /**
     * Type of product. The value for this field is used to identify the product category (electronic, handling, physical, service, or shipping). The default value is `default`.  If you are performing an authorization transaction (`processingOptions.capture` is set to `false`), and you set this field to a value other than `default` or one of the values related to shipping and/or handling, then `orderInformation.lineItems[].quantity`, `orderInformation.lineItems[].productName`, and `orderInformation.lineItems[].productSku` fields are required.  Optional field.  For details, see the `product_code` field description in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/).  #### Tax Calculation Optional field for U.S., Canadian, international tax, and value added taxes.  To use the tax calculation service, use values listed in the Tax Product Code Guide. For information about this document, contact customer support. See \"Product Codes,\" page 14, for more information.
     */
    productCode?: string;
    /**
     * This field is only used in DM service.  Determines whether to assign risk to the order if the billing and shipping addresses specify different cities, states, or countries. This field can contain one of the following values: - true: Orders are assigned only slight additional risk if billing and shipping addresses are different. - false: Orders are assigned higher additional risk if billing and shipping addresses are different.
     */
    gift?: boolean;
    /**
     * Product’s identifier code. This field is inserted into the outgoing message without being parsed or formatted. This field is included as Distributor product SKU (Offer) in the list of API fields with which you can create custom rules.
     */
    distributorProductSku?: string;
    passenger?: Ptsv2paymentsOrderInformationPassenger;
    /**
     * Destination to where the item will be shipped. Example: Commercial, Residential, Store
     */
    shippingDestinationTypes?: string;
    /**
     * Total tax to apply to the product. This value cannot be negative. The tax amount and the offer amount must be in the same currency. The tax amount field is additive.  The following example uses a two-exponent currency such as USD:   1. You include each line item in your request.  ..- 1st line item has amount=10.00, quantity=1, and taxAmount=0.80  ..- 2nd line item has amount=20.00, quantity=1, and taxAmount=1.60  2. The total amount authorized will be 32.40, not 30.00 with 2.40 of tax included.  Optional field.  #### Airlines processing Tax portion of the order amount. This value cannot exceed 99999999999999 (fourteen 9s). Format: English characters only. Optional request field for a line item.  #### Tax Calculation Optional field for U.S., Canadian, international tax, and value added taxes.  Note if you send this field in your tax request, the value in the field will override the tax engine
     */
    taxAmount?: string;
  }
  export interface Riskv1decisionsOrderInformationShipTo {
    /**
     * First line of the shipping address.  Required field for authorization if any shipping address information is included in the request; otherwise, optional.  #### Tax Calculation Optional field for U.S. and Canadian taxes. Not applicable to international and value added taxes. Billing address objects will be used to determine the cardholder’s location when shipTo objects are not present.
     */
    address1?: string;
    /**
     * Second line of the shipping address.  Optional field.  #### Tax Calculation Optional field for U.S. and Canadian taxes. Not applicable to international and value added taxes. Billing address objects will be used to determine the cardholder’s location when shipTo objects are not present.
     */
    address2?: string;
    /**
     * State or province of the shipping address. Use the [State, Province, and Territory Codes for the United States and Canada](https://developer.cybersource.com/library/documentation/sbc/quickref/states_and_provinces.pdf)  Required field for authorization if any shipping address information is included in the request and shipping to the U.S. or Canada; otherwise, optional.  #### Tax Calculation Optional field for U.S. and Canadian taxes. Not applicable to international and value added taxes. Billing address objects will be used to determine the cardholder’s location when shipTo objects are not present.
     */
    administrativeArea?: string;
    /**
     * Country of the shipping address. Use the two-character [ISO Standard Country Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/countries_alpha_list.pdf)  Required field for authorization if any shipping address information is included in the request; otherwise, optional.  #### Tax Calculation Optional field for U.S., Canadian, international tax, and value added taxes. Billing address objects will be used to determine the cardholder’s location when shipTo objects are not present.
     */
    country?: string;
    /**
     * Shipping destination of item. Example: Commercial, Residential, Store
     */
    destinationTypes?: string;
    /**
     * City of the shipping address.  Required field for authorization if any shipping address information is included in the request and shipping to the U.S. or Canada; otherwise, optional.  #### Tax Calculation Optional field for U.S. and Canadian taxes. Not applicable to international and value added taxes. Billing address objects will be used to determine the cardholder’s location when shipTo objects are not present.
     */
    locality?: string;
    /**
     * First name of the recipient.  #### Litle Maximum length: 25  #### All other processors Maximum length: 60  Optional field.
     */
    firstName?: string;
    /**
     * Last name of the recipient.  #### Litle Maximum length: 25  #### All other processors Maximum length: 60  Optional field.
     */
    lastName?: string;
    /**
     * Phone number associated with the shipping address.
     */
    phoneNumber?: string;
    /**
     * Postal code for the shipping address. The postal code must consist of 5 to 9 digits.  Required field for authorization if any shipping address information is included in the request and shipping to the U.S. or Canada; otherwise, optional.  When the billing country is the U.S., the 9-digit postal code must follow this format: [5 digits][dash][4 digits]  Example 12345-6789  When the billing country is Canada, the 6-digit postal code must follow this format: [alpha][numeric][alpha][space][numeric][alpha][numeric]  Example A1B 2C3  #### American Express Direct Before sending the postal code to the processor, all nonalphanumeric characters are removed and, if the remaining value is longer than nine characters, the value is truncated starting from the right side. #### Tax Calculation Optional field for U.S. and Canadian taxes. Not applicable to international and value added taxes. Billing address objects will be used to determine the cardholder’s location when shipTo objects are not present.
     */
    postalCode?: string;
    /**
     * Indicates destination chosen for the transaction. Possible values: - 01- Ship to cardholder billing address - 02- Ship to another verified address on file with merchant - 03- Ship to address that is different than billing address - 04- Ship to store (store address should be populated on request) - 05- Digital goods - 06- Travel and event tickets, not shipped - 07- Other
     */
    destinationCode?: number;
    /**
     * Shipping method for the product. Possible values: - lowcost: Lowest-cost service - sameday: Courier or same-day service - oneday: Next-day or overnight service - twoday: Two-day service - threeday: Three-day service - pickup: Store pick-up - other: Other shipping method - none: No shipping method because product is a service or subscription Required for American Express SafeKey (U.S.).
     */
    method?: string;
  }
  /**
   * Contains shipping information not related to address.
   */
  export interface Riskv1decisionsOrderInformationShippingDetails {
    /**
     * Boolean that indicates whether the customer requested gift wrapping for this purchase. This field can contain one of the following values: - true: The customer requested gift wrapping. - false: The customer did not request gift wrapping.
     */
    giftWrap?: boolean;
    /**
     * Shipping method for the product. Possible values:   - `lowcost`: Lowest-cost service  - `sameday`: Courier or same-day service  - `oneday`: Next-day or overnight service  - `twoday`: Two-day service  - `threeday`: Three-day service  - `pickup`: Store pick-up  - `other`: Other shipping method  - `none`: No shipping method because product is a service or subscription
     */
    shippingMethod?: string;
  }
  /**
   * Contains the payment data for this transaction.
   */
  export interface Riskv1decisionsPaymentInformation {
    card?: Riskv1decisionsPaymentInformationCard;
    tokenizedCard?: Riskv1decisionsPaymentInformationTokenizedCard;
    customer?: Ptsv2paymentsPaymentInformationCustomer;
    bank?: Ptsv2paymentsPaymentInformationBank;
    /**
     * Method of payment used for the order. This field can contain one of the following values:   - `consumer` (default): Customer credit card   - `corporate`: Corporate credit card   - `debit`: Debit card, such as a Maestro (UK Domestic) card   - `cod`: Collect on delivery   - `check`: Electronic check   - `p2p`: Person-to-person payment   - `private1`: Private label credit card   - `other`: Other payment method
     */
    method?: string;
  }
  /**
   * Use this for a non-tokenized payment card.
   */
  export interface Riskv1decisionsPaymentInformationCard {
    /**
     * The customer’s payment card number, also known as the Primary Account Number (PAN). You can also use this field for encoded account numbers.  #### FDMS Nashville Required. String (19)  #### GPX Required if `pointOfSaleInformation.entryMode=keyed`. However, this field is optional if your account is configured for relaxed requirements for address data and expiration date. **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  #### All other processors Required if `pointOfSaleInformation.entryMode=keyed`. However, this field is optional if your account is configured for relaxed requirements for address data and expiration date. **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
     */
    number?: string;
    /**
     * Three-digit value that indicates the card type.  **IMPORTANT** It is strongly recommended that you include the card type field in request messages even if it is optional for your processor and card type. Omitting the card type can cause the transaction to be processed with the wrong card type.  Possible values: - `001`: Visa. For card-present transactions on all processors except SIX, the Visa Electron card type is processed the same way that the Visa debit card is processed. Use card type value `001` for Visa Electron. - `002`: Mastercard, Eurocard[^1], which is a European regional brand of Mastercard. - `003`: American Express - `004`: Discover - `005`: Diners Club - `006`: Carte Blanche[^1] - `007`: JCB[^1] - `014`: Enroute[^1] - `021`: JAL[^1] - `024`: Maestro (UK Domestic)[^1] - `031`: Delta[^1]: Use this value only for Ingenico ePayments. For other processors, use `001` for all Visa card types. - `033`: Visa Electron[^1]. Use this value only for Ingenico ePayments and SIX. For other processors, use `001` for all Visa card types. - `034`: Dankort[^1] - `036`: Cartes Bancaires[^1] - `037`: Carta Si[^1] - `039`: Encoded account number[^1] - `040`: UATP[^1] - `042`: Maestro (International)[^1] - `050`: Hipercard[^2,3] - `051`: Aura - `054`: Elo[^3] - `062`: China UnionPay  [^1]: For this card type, you must include the `paymentInformation.card.type` or `paymentInformation.tokenizedCard.type` field in your request for an authorization or a stand-alone credit. [^2]: For this card type on Cielo 3.0, you must include the `paymentInformation.card.type` or `paymentInformation.tokenizedCard.type` field in a request for an authorization or a stand-alone credit. This card type is not supported on Cielo 1.5. [^3]: For this card type on Getnet and Rede, you must include the `paymentInformation.card.type` or `paymentInformation.tokenizedCard.type` field in a request for an authorization or a stand-alone credit.  #### Used by **Authorization** Required for Carte Blanche and JCB. Optional for all other card types.  #### Card Present reply This field is included in the reply message when the client software that is installed on the POS terminal uses the token management service (TMS) to retrieve tokenized payment details. You must contact customer support to have your account enabled to receive these fields in the credit reply message.  Returned by the Credit service.  This reply field is only supported by the following processors: - American Express Direct - Credit Mutuel-CIC - FDC Nashville Global - OmniPay Direct - SIX  #### GPX This field only supports transactions from the following card types: - Visa - Mastercard - AMEX - Discover - Diners - JCB - Union Pay International
     */
    type?: string;
    /**
     * description: The BIN is the first six digits of the card's Primary Account Number (PAN).
     */
    bin?: string;
    /**
     * Two-digit month in which the payment card expires.  Format: `MM`.  Valid values: `01` through `12`. Leading 0 is required.  #### Barclays and Streamline For Maestro (UK Domestic) and Maestro (International) cards on Barclays and Streamline, this must be a valid value (`01` through `12`) but is not required to be a valid expiration date. In other words, an expiration date that is in the past does not cause CyberSource to reject your request. However, an invalid expiration date might cause the issuer to reject your request.  #### Encoded Account Numbers For encoded account numbers (_type_=039), if there is no expiration date on the card, use `12`.  #### FDMS Nashville Required field.  #### GPX Required if `pointOfSaleInformation.entryMode=keyed`. However, this field is optional if your account is configured for relaxed requirements for address data and expiration date. **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  #### All other processors Required if `pointOfSaleInformation.entryMode=keyed`. However, this field is optional if your account is configured for relaxed requirements for address data and expiration date. **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
     */
    expirationMonth?: string;
    /**
     * Four-digit year in which the payment card expires.  Format: `YYYY`.  #### Barclays and Streamline For Maestro (UK Domestic) and Maestro (International) cards on Barclays and Streamline, this must be a valid value (`1900` through `3000`) but is not required to be a valid expiration date. In other words, an expiration date that is in the past does not cause CyberSource to reject your request. However, an invalid expiration date might cause the issuer to reject your request.  #### Encoded Account Numbers For encoded account numbers (**_type_**`=039`), if there is no expiration date on the card, use `2021`.  #### FDMS Nashville Required field.  #### FDC Nashville Global and FDMS South You can send in 2 digits or 4 digits. If you send in 2 digits, they must be the last 2 digits of the year.  #### GPX Required if `pointOfSaleInformation.entryMode=keyed`. However, this field is optional if your account is configured for relaxed requirements for address data and expiration date. **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  #### All other processors Required if `pointOfSaleInformation.entryMode=keyed`. However, this field is optional if your account is configured for relaxed requirements for address data and expiration date. **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
     */
    expirationYear?: string;
  }
  /**
   * Use this object to submit a payment network token instead of card-based values.
   */
  export interface Riskv1decisionsPaymentInformationTokenizedCard {
    /**
     * Three-digit value that indicates the card type.  **IMPORTANT** It is strongly recommended that you include the card type field in request messages even if it is optional for your processor and card type. Omitting the card type can cause the transaction to be processed with the wrong card type.  Possible values: - `001`: Visa. For card-present transactions on all processors except SIX, the Visa Electron card type is processed the same way that the Visa debit card is processed. Use card type value `001` for Visa Electron. - `002`: Mastercard, Eurocard[^1], which is a European regional brand of Mastercard. - `003`: American Express - `004`: Discover - `005`: Diners Club - `006`: Carte Blanche[^1] - `007`: JCB[^1] - `014`: Enroute[^1] - `021`: JAL[^1] - `024`: Maestro (UK Domestic)[^1] - `031`: Delta[^1]: Use this value only for Ingenico ePayments. For other processors, use `001` for all Visa card types. - `033`: Visa Electron[^1]. Use this value only for Ingenico ePayments and SIX. For other processors, use `001` for all Visa card types. - `034`: Dankort[^1] - `036`: Cartes Bancaires[^1] - `037`: Carta Si[^1] - `039`: Encoded account number[^1] - `040`: UATP[^1] - `042`: Maestro (International)[^1] - `050`: Hipercard[^2,3] - `051`: Aura - `054`: Elo[^3] - `062`: China UnionPay  [^1]: For this card type, you must include the `paymentInformation.card.type` or `paymentInformation.tokenizedCard.type` field in your request for an authorization or a stand-alone credit. [^2]: For this card type on Cielo 3.0, you must include the `paymentInformation.card.type` or `paymentInformation.tokenizedCard.type` field in a request for an authorization or a stand-alone credit. This card type is not supported on Cielo 1.5. [^3]: For this card type on Getnet and Rede, you must include the `paymentInformation.card.type` or `paymentInformation.tokenizedCard.type` field in a request for an authorization or a stand-alone credit.  #### Used by **Authorization** Required for Carte Blanche and JCB. Optional for all other card types.  #### Card Present reply This field is included in the reply message when the client software that is installed on the POS terminal uses the token management service (TMS) to retrieve tokenized payment details. You must contact customer support to have your account enabled to receive these fields in the credit reply message.  Returned by the Credit service.  This reply field is only supported by the following processors: - American Express Direct - Credit Mutuel-CIC - FDC Nashville Global - OmniPay Direct - SIX  #### GPX This field only supports transactions from the following card types: - Visa - Mastercard - AMEX - Discover - Diners - JCB - Union Pay International
     */
    type?: string;
    /**
     * Customer’s payment network token value.
     */
    number?: string;
    /**
     * One of two possible meanings: - The two-digit month in which a token expires. - The two-digit month in which a card expires. Format: `MM` Possible values: `01` through `12`  **NOTE** The meaning of this field is dependent on the payment processor that is returning the value in an authorization reply. Please see the processor-specific details below.  #### Barclays and Streamline For Maestro (UK Domestic) and Maestro (International) cards on Barclays and Streamline, this must be a valid value (`01` through `12`) but is not required to be a valid expiration date. In other words, an expiration date that is in the past does not cause CyberSource to reject your request. However, an invalid expiration date might cause the issuer to reject your request.  #### Encoded Account Numbers For encoded account numbers (`card_type=039`), if there is no expiration date on the card, use `12`.\\ **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  #### Samsung Pay and Apple Pay Month in which the token expires. CyberSource includes this field in the reply message when it decrypts the payment blob for the tokenized transaction.  For processor-specific information, see the `customer_cc_expmo` field in [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
     */
    expirationMonth?: string;
    /**
     * One of two possible meanings: - The four-digit year in which a token expires. - The four-digit year in which a card expires. Format: `YYYY` Possible values: `1900` through `3000` Data type: Non-negative integer  **NOTE** The meaning of this field is dependent on the payment processor that is returning the value in an authorization reply. Please see the processor-specific details below.  #### Barclays and Streamline For Maestro (UK Domestic) and Maestro (International) cards on Barclays and Streamline, this must be a valid value (1900 through 3000) but is not required to be a valid expiration date. In other words, an expiration date that is in the past does not cause CyberSource to reject your request. However, an invalid expiration date might cause the issuer to reject your request.  #### Encoded Account Numbers For encoded account numbers (`card_ type=039`), if there is no expiration date on the card, use `2021`.  #### FDC Nashville Global and FDMS South You can send in 2 digits or 4 digits. When you send in 2 digits, they must be the last 2 digits of the year.  #### Samsung Pay and Apple Pay Year in which the token expires. CyberSource includes this field in the reply message when it decrypts the payment blob for the tokenized transaction.  **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  For processor-specific information, see the `customer_cc_expyr` or `token_expiration_year` field in [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
     */
    expirationYear?: string;
  }
  /**
   * Decides whether to call Payer Authentication along with DM or not
   */
  export interface Riskv1decisionsProcessingInformation {
    /**
     * Use CONSUMER_AUTHENTICATION to use Payer Authentication along with Decision Manager. For any other value, only Decision Manager will run.
     */
    actionList?: Array<string>;
  }
  /**
   * Contains information related to the payment processor.
   */
  export interface Riskv1decisionsProcessorInformation {
    avs?: Riskv1decisionsProcessorInformationAvs;
    cardVerification?: Riskv1decisionsProcessorInformationCardVerification;
  }
  /**
   * Address Verification Service
   */
  export interface Riskv1decisionsProcessorInformationAvs {
    /**
     * Value returned for address verification from the Payments Authorization response.
     */
    code?: string;
  }
  export interface Riskv1decisionsProcessorInformationCardVerification {
    /**
     * CVN result code.  For details, see the `auth_cv_result` reply field description in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
     */
    resultCode?: string;
  }
  export interface Riskv1decisionsRiskInformation {
    profile?: Ptsv2paymentsRiskInformationProfile;
    /**
     * Specifies one of the following types of events: - login - account_creation - account_update For regular payment transactions, do not send this field.
     */
    eventType?: string;
    buyerHistory?: Ptsv2paymentsRiskInformationBuyerHistory;
  }
  export interface Riskv1decisionsTravelInformation {
    /**
     * IATA Code for the actual final destination that the customer intends to travel to. It should be a destination on the completeRoute.
     */
    actualFinalDestination?: string;
    /**
     * Concatenation of individual travel legs in the format ORIG1-DEST1[:ORIG2-DEST2...:ORIGn-DESTn], for example, SFO-JFK:JFK-LHR:LHR-CDG. For airport codes, see the IATA Airline and Airport Code Search. Note In your request, send either the complete route or the individual legs (_leg#_orig and _leg#_dest). If you send all the fields, the value of _complete_route takes precedence over that of the _leg# fields.
     */
    completeRoute?: string;
    /**
     * Departure date and time of the first leg of the trip. Use one of the following formats:   - yyyy-MM-dd HH:mm z   - yyyy-MM-dd hh:mm a z   - yyyy-MM-dd hh:mma z   HH = hour in 24-hour format   hh = hour in 12-hour format   a = am or pm (case insensitive)   z = time zone of the departing flight, for example: If the   airline is based in city A, but the flight departs from city   B, z is the time zone of city B at the time of departure. Important For travel information, use GMT instead of UTC, or use the local time zone. Examples 2011-03-20 11:30 PM PDT 2011-03-20 11:30pm GMT 2011-03-20 11:30pm GMT-05:00 Eastern Standard Time: GMT-05:00 or EST Note When specifying an offset from GMT, the format must be exactly as specified in the example. Insert no spaces between the time zone and the offset.
     */
    departureTime?: string;
    /**
     * Type of travel, for example one way or round trip.
     */
    journeyType?: string;
    legs?: Array<Riskv1decisionsTravelInformationLegs>;
    /**
     * Number of passengers for whom the ticket was issued. If you do not include this field in your request, CyberSource uses a default value of 1. Required for American Express SafeKey (U.S.) for travel-related requests.
     */
    numberOfPassengers?: number;
    passengers?: Array<Riskv1decisionsTravelInformationPassengers>;
  }
  export interface Riskv1decisionsTravelInformationLegs {
    /**
     * Use to specify the airport code for the origin of the leg of the trip, which is designated by the pound (#) symbol in the field name. This code is usually three digits long, for example: SFO = San Francisco. Do not use the colon (:) or the dash (-). For airport codes, see the IATA Airline and Airport Code Search. The leg number can be a positive integer from 0 to N. For example: `travelInformation.legs.0.origination=SFO` `travelInformation.legs.1.origination=SFO`  **Note** In your request, send either the complete route or the individual legs (`legs.0.origination` and `legs.n.destination`). If you send all the fields, the complete route takes precedence over the individual legs.  For details, see the `decision_manager_travel_leg#_orig` field description in _Decision Manager Using the SCMP API Developer Guide_ on the [CyberSource Business Center.](https://ebc2.cybersource.com/ebc2/) Click **Decision Manager** > **Documentation** > **Guides** > _Decision Manager Using the SCMP API Developer Guide_ (PDF link).
     */
    origination?: string;
    /**
     * Use to specify the airport code for the destination of the leg of the trip, which is designated by the pound (#) symbol in the field name. This code is usually three digits long, for example: SFO = San Francisco. Do not use the colon (:) or the dash (-). For airport codes, see [IATA Airline and Airport Code Search](https://www.iata.org/publications/Pages/code-search.aspx). The leg number can be a positive integer from 0 to N. For example:  `travelInformation.legs.0.destination=SFO` `travelInformation.legs.1.destination=SFO`  **Note** In your request, send either the complete route or the individual legs (`legs.0.origination` and `legs.n.destination`). If you send all the fields, the complete route takes precedence over the individual legs.  For details, see the `decision_manager_travel_leg#_dest` field description in _Decision Manager Using the SCMP API Developer Guide_ on the [CyberSource Business Center.](https://ebc2.cybersource.com/ebc2/) Click **Decision Manager** > **Documentation** > **Guides** > _Decision Manager Using the SCMP API Developer Guide_ (PDF link).
     */
    destination?: string;
    /**
     * International Air Transport Association (IATA) code for the carrier for this leg of the trip. Required for each leg. Required for American Express SafeKey (U.S.) for travel-related requests.
     */
    carrierCode?: string;
    /**
     * Departure date for the first leg of the trip. Format: YYYYMMDD. Required for American Express SafeKey (U.S.) for travel-related requests.
     */
    departureDate?: string;
  }
  export interface Riskv1decisionsTravelInformationPassengers {
    /**
     * First name of the passenger to whom the ticket was issued. If there are multiple passengers, include all listed on the ticket. Do not include special characters such as commas, hyphens, or apostrophes. Only ASCII characters are supported. Required for American Express SafeKey (U.S.) for travel-related requests.
     */
    firstName?: string;
    /**
     * Last name of the passenger to whom the ticket was issued. If there are multiple passengers, include all listed on the ticket. Do not include special characters such as commas, hyphens, or apostrophes. Only ASCII characters are supported. Required for American Express SafeKey (U.S.) for travel-related requests.
     */
    lastName?: string;
  }
  export interface Riskv1decisionsidmarkingRiskInformation {
    markingDetails?: Riskv1decisionsidmarkingRiskInformationMarkingDetails;
  }
  /**
   * Details for marking the transaction.
   */
  export interface Riskv1decisionsidmarkingRiskInformationMarkingDetails {
    /**
     * Notes or details that explain the reasons for marking the transaction as suspect or otherwise.
     */
    notes?: string;
    /**
     * Reason for marking the transaction as suspect or otherwise. This field can contain one of the following values: - `fraud_chargeback:` You have received a fraud-related chargeback for the transaction. - `non_fraud_chargeback:` You have received a non-fraudulent chargeback for the transaction. - `suspected:` You believe that you will probably receive a chargeback for the transaction. - `creditback:` You issued a refund to the customer to avoid a chargeback for the transaction.
     */
    reason?: string;
    /**
     * This field can contain one or more of the following values. When you specify more than one value, separate them with commas (,). - `account_key_hash` - `customer_account_id` - `customer_email` - `customer_ipaddress` - `customer_phone` - `device_fingerprint` - `ship_address` If no value is specified, `account_key_hash`, `customer_email`, and `ship_address` are used by default. Note `account_key_hash` adds the field that contains the card number (`customer_cc_number`).
     */
    fieldsIncluded?: Array<string>;
    /**
     * This field can contain one of the following values: - add: Mark as Suspect. - clear: Clear Mark as Suspect. - hide: Remove from history.
     */
    action?: string;
  }
  export interface Riskv1exportcomplianceinquiriesDeviceInformation {
    /**
     * IP address of the customer.  #### Used by **Authorization, Capture, and Credit** Optional field.
     */
    ipAddress?: string;
    /**
     * DNS resolved hostname from `ipAddress`.
     */
    hostName?: string;
  }
  export interface Riskv1exportcomplianceinquiriesExportComplianceInformation {
    /**
     * Parts of the customer’s information that must match with an entry in the DPL (denied parties list) before a match occurs. This field can contain one of the following values: - AND: (default) The customer’s name or company and the customer’s address must appear in the database. - OR: The customer’s name must appear in the database. - IGNORE: You want the service to detect a match only of the customer’s name or company but not of the address.
     */
    addressOperator?: string;
    weights?: Riskv1exportcomplianceinquiriesExportComplianceInformationWeights;
    /**
     * Use this field to specify which list(s) you want checked with the request. The reply will include the list name as well as the response data. To check against multiple lists, enter multiple list codes separated by a caret (^). For more information, see \"Restricted and Denied Parties List,\" page 68.
     */
    sanctionLists?: Array<string>;
  }
  export interface Riskv1exportcomplianceinquiriesExportComplianceInformationWeights {
    /**
     * Degree of correlation between a customer’s address and an entry in the DPL before a match occurs. This field can contain one of the following values: - exact: The address must be identical to the entry in the DPL. - high: (default) The address cannot differ significantly from the entry in the DPL. - medium: The address can differ slightly more from the entry in the DPL. - low: The address can differ significantly from the entry in the DPL.
     */
    address?: string;
    /**
     * Degree of correlation between a company address and an entry in the DPL before a match occurs. This field can contain one of the following values: - exact: The company name must be identical to the entry in the DPL. - high: (default) The company name cannot differ significantly from the entry in the DPL. - medium: The company name can differ slightly more from the entry in the DPL. - low: The company name can differ significantly from the entry in the DPL.
     */
    company?: string;
    /**
     * Degree of correlation between a customer’s name and an entry in the DPL before a match occurs. This field can contain one of the following values: - exact: The name must be identical to the entry in the DPL. - high: (default) The name cannot differ significantly from the entry in the DPL. - medium: The name can differ slightly more from the entry in the DPL. - low: The name can differ significantly the entry in the DPL.
     */
    name?: string;
  }
  export interface Riskv1exportcomplianceinquiriesOrderInformation {
    billTo?: Riskv1exportcomplianceinquiriesOrderInformationBillTo;
    shipTo?: Riskv1exportcomplianceinquiriesOrderInformationShipTo;
    lineItems?: Array<Riskv1exportcomplianceinquiriesOrderInformationLineItems>;
  }
  export interface Riskv1exportcomplianceinquiriesOrderInformationBillTo {
    /**
     * Payment card billing street address as it appears on the credit card issuer’s records.  #### Atos This field must not contain colons (:).  #### CyberSource through VisaNet **Important** When you populate orderInformation.billTo.address1 and orderInformation.billTo.address2, CyberSource through VisaNet concatenates the two values. If the concatenated value exceeds 40 characters, CyberSource through VisaNet truncates the value at 40 characters before sending it to Visa and the issuing bank. Truncating this value affects AVS results and therefore might also affect risk decisions and chargebacks. Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  #### FDMS Nashville When the street name is numeric, it must be sent in numeric format. For example, if the address is _One First Street_, it must be sent as _1 1st Street_.  Required if keyed; not used if swiped.  String (20)  #### TSYS Acquiring Solutions Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.  #### All other processors: Optional. String (60)  #### For Payouts This field may be sent only for FDC Compass.  **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
     */
    address1: string;
    /**
     * Used for additional address information. For example: _Attention: Accounts Payable_ Optional field.  For Payouts: This field may be sent only for FDC Compass.  #### Atos This field must not contain colons (:).  #### CyberSource through VisaNet **Important** When you populate `orderInformation.billTo.address1` and `orderInformation.billTo.address2`, CyberSource through VisaNet concatenates the two values. If the concatenated value exceeds 40 characters, CyberSource through VisaNet truncates the value at 40 characters before sending it to Visa and the issuing bank. Truncating this value affects AVS results and therefore might also affect risk decisions and chargebacks. Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  #### Chase Paymentech Solutions, FDC Compass, and TSYS Acquiring Solutions This value is used for AVS.  #### FDMS Nashville `orderInformation.billTo.address1` and `orderInformation.billTo.address2` together cannot exceed 20 characters. String (20)  #### All Other Processors String (60)
     */
    address2?: string;
    /**
     * Additional address information (third line of the billing address)
     */
    address3?: string;
    /**
     * Additional address information (fourth line of the billing address)
     */
    address4?: string;
    /**
     * State or province of the billing address. Use the [State, Province, and Territory Codes for the United States and Canada](https://developer.cybersource.com/library/documentation/sbc/quickref/states_and_provinces.pdf).  For Payouts: This field may be sent only for FDC Compass.  ##### CyberSource through VisaNet Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  #### Chase Paymentech Solutions Optional field.  ####  Credit Mutuel-CIC Optional field.  #### OmniPay Direct Optional field.  #### SIX Optional field.  #### TSYS Acquiring Solutions Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.  #### Worldpay VAP Optional field.  #### All other processors Not used.
     */
    administrativeArea?: string;
    /**
     * Payment card billing country. Use the two-character [ISO Standard Country Codes](http://apps.cybersource.com/library/documentation/sbc/quickref/countries_alpha_list.pdf).  #### CyberSource through VisaNet Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  #### Chase Paymentech Solutions Optional field.  ####  Credit Mutuel-CIC Optional field.  #### OmniPay Direct Optional field.  #### SIX Optional field.  #### TSYS Acquiring Solutions Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.  #### Worldpay VAP Optional field.  #### All other processors Not used.
     */
    country: string;
    /**
     * Payment card billing city.  #### Atos This field must not contain colons (:).  #### CyberSource through VisaNet Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  #### For Payouts: This field may be sent only for FDC Compass.  #### Chase Paymentech Solutions Optional field.  ####  Credit Mutuel-CIC Optional field.  #### OmniPay Direct Optional field.  #### SIX Optional field.  #### TSYS Acquiring Solutions Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.  #### Worldpay VAP Optional field.  #### All other processors Not used.
     */
    locality: string;
    /**
     * Postal code for the billing address. The postal code must consist of 5 to 9 digits.  When the billing country is the U.S., the 9-digit postal code must follow this format: [5 digits][dash][4 digits]  **Example** `12345-6789`  When the billing country is Canada, the 6-digit postal code must follow this format: [alpha][numeric][alpha][space][numeric][alpha][numeric]  **Example** `A1B 2C3`  **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  #### For Payouts:  This field may be sent only for FDC Compass.  #### American Express Direct Before sending the postal code to the processor, CyberSource removes all nonalphanumeric characters and, if the remaining value is longer than nine characters, truncates the value starting from the right side.  #### Atos This field must not contain colons (:).  #### CyberSource through VisaNet Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  #### FDMS Nashville Required if `pointOfSaleInformation.entryMode=keyed` and the address is in the U.S. or Canada. Optional if `pointOfSaleInformation.entryMode=keyed` and the address is **not** in the U.S. or Canada. Not used if swiped.  #### RBS WorldPay Atlanta: For best card-present keyed rates, send the postal code if `pointOfSaleInformation.entryMode=keyed`.  #### TSYS Acquiring Solutions Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.  #### All other processors: Optional field.
     */
    postalCode: string;
    company?: Riskv1exportcomplianceinquiriesOrderInformationBillToCompany;
    /**
     * Customer’s first name. This name must be the same as the name on the card.  **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  #### CyberSource Latin American Processing **Important** For an authorization request, CyberSource Latin American Processing concatenates `orderInformation.billTo.firstName` and `orderInformation.billTo.lastName`. If the concatenated value exceeds 30 characters, CyberSource Latin American Processing declines the authorization request.\\ **Note** CyberSource Latin American Processing is the name of a specific processing connection that CyberSource supports. In the CyberSource API documentation, CyberSource Latin American Processing does not refer to the general topic of processing in Latin America. The information in this field description is for the specific processing connection called _CyberSource Latin American Processing_. It is not for any other Latin American processors that CyberSource supports.  #### CyberSource through VisaNet Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  #### For Payouts: This field may be sent only for FDC Compass.  #### Chase Paymentech Solutions Optional field.  ####  Credit Mutuel-CIC Optional field.  #### OmniPay Direct Optional field.  #### SIX Optional field.  #### TSYS Acquiring Solutions Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.  #### Worldpay VAP Optional field.  #### All other processors Not used.
     */
    firstName?: string;
    /**
     * Customer’s last name. This name must be the same as the name on the card.  **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  #### Chase Paymentech Solutions Optional field.  ####  Credit Mutuel-CIC Optional field.  #### CyberSource Latin American Processing **Important** For an authorization request, CyberSource Latin American Processing concatenates `orderInformation.billTo.firstName` and `orderInformation.billTo.lastName`. If the concatenated value exceeds 30 characters, CyberSource Latin American Processing declines the authorization request.\\ **Note** CyberSource Latin American Processing is the name of a specific processing connection that CyberSource supports. In the CyberSource API documentation, CyberSource Latin American Processing does not refer to the general topic of processing in Latin America. The information in this field description is for the specific processing connection called CyberSource Latin American Processing. It is not for any other Latin American processors that CyberSource supports.  #### CyberSource through VisaNet Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  #### For Payouts: This field may be sent only for FDC Compass.  #### OmniPay Direct Optional field.  #### RBS WorldPay Atlanta Optional field.  #### SIX Optional field.  #### TSYS Acquiring Solutions Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.  #### Worldpay VAP Optional field.  #### All other processors Not used.
     */
    lastName?: string;
    /**
     * Customer's email address, including the full domain name.  #### CyberSource through VisaNet Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  For processor-specific information, see the `customer_email` request-level field description in [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)  #### Invoicing Email address for the customer for sending the invoice. If the invoice is in SENT status and email is updated, the old email customer payment link won't work and you must resend the invoice with the new payment link.  #### Chase Paymentech Solutions Optional field.  ####  Credit Mutuel-CIC Optional field.  #### OmniPay Direct Optional field.  #### SIX Optional field.  #### TSYS Acquiring Solutions Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.  #### Worldpay VAP Optional field.  #### All other processors Not used.
     */
    email: string;
  }
  export interface Riskv1exportcomplianceinquiriesOrderInformationBillToCompany {
    /**
     * Company name of person buying the product. Important: This field or billTo.firstName and billTo.lastName must be present. Else, your request will fail.
     */
    name?: string;
  }
  export interface Riskv1exportcomplianceinquiriesOrderInformationLineItems {
    /**
     * Per-item price of the product. This value for this field cannot be negative.  You must include either this field or the request-level field `orderInformation.amountDetails.totalAmount` in your request.  You can include a decimal point (.), but you cannot include any other special characters. The value is truncated to the correct number of decimal places.  #### DCC with a Third-Party Provider Set this field to the converted amount that was returned by the DCC provider. You must include either the 1st line item in the order and this field, or the request-level field `orderInformation.amountDetails.totalAmount` in your request.  #### FDMS South If you accept IDR or CLP currencies, see the entry for FDMS South in the [Merchant Descriptors Using the SCMP API Guide.] (https://apps.cybersource.com/library/documentation/dev_guides/Merchant_Descriptors_SCMP_API/html/)  #### Tax Calculation Required field for U.S., Canadian, international and value added taxes.  #### Zero Amount Authorizations If your processor supports zero amount authorizations, you can set this field to 0 for the authorization to check if the card is lost or stolen.  #### Maximum Field Lengths For GPN and JCN Gateway: Decimal (10) All other processors: Decimal (15)
     */
    unitPrice: string;
    allowedExportCountries?: Array<string>;
    restrictedExportCountries?: Array<string>;
    /**
     * Number of units for this order. Must be a non-negative integer.  The default is `1`. For an authorization or capture transaction (`processingOptions.capture` is set to `true` or `false`), this field is required when `orderInformation.lineItems[].productCode` is not `default` or one of the other values related to shipping and/or handling.  #### Tax Calculation Optional field for U.S., Canadian, international tax, and value added taxes.
     */
    quantity?: number;
    /**
     * Product identifier code. Also known as the Stock Keeping Unit (SKU) code for the product.  For an authorization or capture transaction (`processingOptions.capture` is set to `true` or `false`), this field is required when `orderInformation.lineItems[].productCode` is not set to **default** or one of the other values that are related to shipping and/or handling.  #### Tax Calculation Optional field for U.S. and Canadian taxes. Not applicable to international and value added taxes. For an authorization or capture transaction (`processingOptions.capture` is set to `true` or `false`), this field is required when `orderInformation.lineItems[].productCode` is not `default` or one of the values related to shipping and/or handling.
     */
    productSKU?: string;
    /**
     * Indicates the level of risk for the product. This field can contain one of the following values: - `low`: The product is associated with few chargebacks. - `normal`: The product is associated with a normal number of chargebacks. - `high`: The product is associated with many chargebacks.
     */
    productRisk?: string;
    /**
     * For an authorization or capture transaction (`processingOptions.capture` is `true` or `false`), this field is required when `orderInformation.lineItems[].productCode` is not `default` or one of the other values that are related to shipping and/or handling.  #### Tax Calculation Optional field for U.S., Canadian, international tax, and value added taxes.
     */
    productName?: string;
    /**
     * Type of product. The value for this field is used to identify the product category (electronic, handling, physical, service, or shipping). The default value is `default`.  If you are performing an authorization transaction (`processingOptions.capture` is set to `false`), and you set this field to a value other than `default` or one of the values related to shipping and/or handling, then `orderInformation.lineItems[].quantity`, `orderInformation.lineItems[].productName`, and `orderInformation.lineItems[].productSku` fields are required.  Optional field.  For details, see the `product_code` field description in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/).  #### Tax Calculation Optional field for U.S., Canadian, international tax, and value added taxes.  To use the tax calculation service, use values listed in the Tax Product Code Guide. For information about this document, contact customer support. See \"Product Codes,\" page 14, for more information.
     */
    productCode?: string;
  }
  export interface Riskv1exportcomplianceinquiriesOrderInformationShipTo {
    /**
     * Country of the shipping address. Use the two-character [ISO Standard Country Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/countries_alpha_list.pdf)  Required field for authorization if any shipping address information is included in the request; otherwise, optional.  #### Tax Calculation Optional field for U.S., Canadian, international tax, and value added taxes. Billing address objects will be used to determine the cardholder’s location when shipTo objects are not present.
     */
    country?: string;
    /**
     * First name of the recipient.  #### Litle Maximum length: 25  #### All other processors Maximum length: 60  Optional field.
     */
    firstName?: string;
    /**
     * Last name of the recipient.  #### Litle Maximum length: 25  #### All other processors Maximum length: 60  Optional field.
     */
    lastName?: string;
  }
  /**
   * Contains information about the buyer.
   */
  export interface Riskv1liststypeentriesBuyerInformation {
    personalIdentification?: Array<Ptsv2paymentsBuyerInformationPersonalIdentification>;
  }
  export interface Riskv1liststypeentriesDeviceInformation {
    /**
     * IP address of the customer.  #### Used by **Authorization, Capture, and Credit** Optional field.
     */
    ipAddress?: string;
    /**
     * Network IP address of the customer (for example, 10.1.27). A network IP address includes up to 256 IP addresses.
     */
    networkIpAddress?: string;
  }
  export interface Riskv1liststypeentriesOrderInformation {
    address?: Riskv1liststypeentriesOrderInformationAddress;
    billTo?: Riskv1liststypeentriesOrderInformationBillTo;
    shipTo?: Riskv1liststypeentriesOrderInformationShipTo;
    /**
     * This array contains detailed information about individual products in the order.
     */
    lineItems?: Array<Riskv1liststypeentriesOrderInformationLineItems>;
  }
  /**
   * Contains address information related to the order
   */
  export interface Riskv1liststypeentriesOrderInformationAddress {
    /**
     * First line of the street address
     */
    address1?: string;
    /**
     * Second line of the street address
     */
    address2?: string;
    /**
     * City of the street address. Required when adding the address to a list.
     */
    locality?: string;
    /**
     * Country of the street address. Use the two-character codes located in the Support Center. Required if address1 is present.
     */
    country?: string;
    /**
     * State, province, or territory of the street address. Use the two-character codes located in the Support Center.
     */
    administrativeArea?: string;
    /**
     * Postal code of the street address. Required when adding the address to a list.
     */
    postalCode?: string;
  }
  export interface Riskv1liststypeentriesOrderInformationBillTo {
    /**
     * Payment card billing street address as it appears on the credit card issuer’s records.  #### Atos This field must not contain colons (:).  #### CyberSource through VisaNet **Important** When you populate orderInformation.billTo.address1 and orderInformation.billTo.address2, CyberSource through VisaNet concatenates the two values. If the concatenated value exceeds 40 characters, CyberSource through VisaNet truncates the value at 40 characters before sending it to Visa and the issuing bank. Truncating this value affects AVS results and therefore might also affect risk decisions and chargebacks. Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  #### FDMS Nashville When the street name is numeric, it must be sent in numeric format. For example, if the address is _One First Street_, it must be sent as _1 1st Street_.  Required if keyed; not used if swiped.  String (20)  #### TSYS Acquiring Solutions Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.  #### All other processors: Optional. String (60)  #### For Payouts This field may be sent only for FDC Compass.  **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
     */
    address1?: string;
    /**
     * Used for additional address information. For example: _Attention: Accounts Payable_ Optional field.  For Payouts: This field may be sent only for FDC Compass.  #### Atos This field must not contain colons (:).  #### CyberSource through VisaNet **Important** When you populate `orderInformation.billTo.address1` and `orderInformation.billTo.address2`, CyberSource through VisaNet concatenates the two values. If the concatenated value exceeds 40 characters, CyberSource through VisaNet truncates the value at 40 characters before sending it to Visa and the issuing bank. Truncating this value affects AVS results and therefore might also affect risk decisions and chargebacks. Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  #### Chase Paymentech Solutions, FDC Compass, and TSYS Acquiring Solutions This value is used for AVS.  #### FDMS Nashville `orderInformation.billTo.address1` and `orderInformation.billTo.address2` together cannot exceed 20 characters. String (20)  #### All Other Processors String (60)
     */
    address2?: string;
    /**
     * State or province of the billing address. Use the [State, Province, and Territory Codes for the United States and Canada](https://developer.cybersource.com/library/documentation/sbc/quickref/states_and_provinces.pdf).  For Payouts: This field may be sent only for FDC Compass.  ##### CyberSource through VisaNet Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  #### Chase Paymentech Solutions Optional field.  ####  Credit Mutuel-CIC Optional field.  #### OmniPay Direct Optional field.  #### SIX Optional field.  #### TSYS Acquiring Solutions Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.  #### Worldpay VAP Optional field.  #### All other processors Not used.
     */
    administrativeArea?: string;
    /**
     * Payment card billing country. Use the two-character [ISO Standard Country Codes](http://apps.cybersource.com/library/documentation/sbc/quickref/countries_alpha_list.pdf).  #### CyberSource through VisaNet Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  #### Chase Paymentech Solutions Optional field.  ####  Credit Mutuel-CIC Optional field.  #### OmniPay Direct Optional field.  #### SIX Optional field.  #### TSYS Acquiring Solutions Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.  #### Worldpay VAP Optional field.  #### All other processors Not used.
     */
    country?: string;
    /**
     * Payment card billing city.  #### Atos This field must not contain colons (:).  #### CyberSource through VisaNet Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  #### For Payouts: This field may be sent only for FDC Compass.  #### Chase Paymentech Solutions Optional field.  ####  Credit Mutuel-CIC Optional field.  #### OmniPay Direct Optional field.  #### SIX Optional field.  #### TSYS Acquiring Solutions Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.  #### Worldpay VAP Optional field.  #### All other processors Not used.
     */
    locality?: string;
    /**
     * Postal code for the billing address. The postal code must consist of 5 to 9 digits.  When the billing country is the U.S., the 9-digit postal code must follow this format: [5 digits][dash][4 digits]  **Example** `12345-6789`  When the billing country is Canada, the 6-digit postal code must follow this format: [alpha][numeric][alpha][space][numeric][alpha][numeric]  **Example** `A1B 2C3`  **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  #### For Payouts:  This field may be sent only for FDC Compass.  #### American Express Direct Before sending the postal code to the processor, CyberSource removes all nonalphanumeric characters and, if the remaining value is longer than nine characters, truncates the value starting from the right side.  #### Atos This field must not contain colons (:).  #### CyberSource through VisaNet Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  #### FDMS Nashville Required if `pointOfSaleInformation.entryMode=keyed` and the address is in the U.S. or Canada. Optional if `pointOfSaleInformation.entryMode=keyed` and the address is **not** in the U.S. or Canada. Not used if swiped.  #### RBS WorldPay Atlanta: For best card-present keyed rates, send the postal code if `pointOfSaleInformation.entryMode=keyed`.  #### TSYS Acquiring Solutions Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.  #### All other processors: Optional field.
     */
    postalCode?: string;
    /**
     * Customer’s first name. This name must be the same as the name on the card.  **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  #### CyberSource Latin American Processing **Important** For an authorization request, CyberSource Latin American Processing concatenates `orderInformation.billTo.firstName` and `orderInformation.billTo.lastName`. If the concatenated value exceeds 30 characters, CyberSource Latin American Processing declines the authorization request.\\ **Note** CyberSource Latin American Processing is the name of a specific processing connection that CyberSource supports. In the CyberSource API documentation, CyberSource Latin American Processing does not refer to the general topic of processing in Latin America. The information in this field description is for the specific processing connection called _CyberSource Latin American Processing_. It is not for any other Latin American processors that CyberSource supports.  #### CyberSource through VisaNet Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  #### For Payouts: This field may be sent only for FDC Compass.  #### Chase Paymentech Solutions Optional field.  ####  Credit Mutuel-CIC Optional field.  #### OmniPay Direct Optional field.  #### SIX Optional field.  #### TSYS Acquiring Solutions Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.  #### Worldpay VAP Optional field.  #### All other processors Not used.
     */
    firstName?: string;
    /**
     * Customer’s last name. This name must be the same as the name on the card.  **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  #### Chase Paymentech Solutions Optional field.  ####  Credit Mutuel-CIC Optional field.  #### CyberSource Latin American Processing **Important** For an authorization request, CyberSource Latin American Processing concatenates `orderInformation.billTo.firstName` and `orderInformation.billTo.lastName`. If the concatenated value exceeds 30 characters, CyberSource Latin American Processing declines the authorization request.\\ **Note** CyberSource Latin American Processing is the name of a specific processing connection that CyberSource supports. In the CyberSource API documentation, CyberSource Latin American Processing does not refer to the general topic of processing in Latin America. The information in this field description is for the specific processing connection called CyberSource Latin American Processing. It is not for any other Latin American processors that CyberSource supports.  #### CyberSource through VisaNet Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  #### For Payouts: This field may be sent only for FDC Compass.  #### OmniPay Direct Optional field.  #### RBS WorldPay Atlanta Optional field.  #### SIX Optional field.  #### TSYS Acquiring Solutions Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.  #### Worldpay VAP Optional field.  #### All other processors Not used.
     */
    lastName?: string;
    /**
     * Customer’s phone number.  It is recommended that you include the country code when the order is from outside the U.S.  #### Chase Paymentech Solutions Optional field.  ####  Credit Mutuel-CIC Optional field.  #### CyberSource through VisaNet Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  #### For Payouts: This field may be sent only for FDC Compass.  #### OmniPay Direct Optional field.  #### SIX Optional field.  #### TSYS Acquiring Solutions Optional field.  #### Worldpay VAP Optional field.  #### All other processors Not used.
     */
    phoneNumber?: string;
    /**
     * Customer's email address, including the full domain name.  #### CyberSource through VisaNet Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  For processor-specific information, see the `customer_email` request-level field description in [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)  #### Invoicing Email address for the customer for sending the invoice. If the invoice is in SENT status and email is updated, the old email customer payment link won't work and you must resend the invoice with the new payment link.  #### Chase Paymentech Solutions Optional field.  ####  Credit Mutuel-CIC Optional field.  #### OmniPay Direct Optional field.  #### SIX Optional field.  #### TSYS Acquiring Solutions Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.  #### Worldpay VAP Optional field.  #### All other processors Not used.
     */
    email?: string;
    /**
     * Email domain of the customer. The domain of the email address comprises all characters that follow the @ symbol, such as mail.example.com. For the Risk Update service, if the email address and the domain are sent in the request, the domain supersedes the email address.
     */
    emailDomain?: string;
  }
  export interface Riskv1liststypeentriesOrderInformationLineItems {
    /**
     * Per-item price of the product. This value for this field cannot be negative.  You must include either this field or the request-level field `orderInformation.amountDetails.totalAmount` in your request.  You can include a decimal point (.), but you cannot include any other special characters. The value is truncated to the correct number of decimal places.  #### DCC with a Third-Party Provider Set this field to the converted amount that was returned by the DCC provider. You must include either the 1st line item in the order and this field, or the request-level field `orderInformation.amountDetails.totalAmount` in your request.  #### FDMS South If you accept IDR or CLP currencies, see the entry for FDMS South in the [Merchant Descriptors Using the SCMP API Guide.] (https://apps.cybersource.com/library/documentation/dev_guides/Merchant_Descriptors_SCMP_API/html/)  #### Tax Calculation Required field for U.S., Canadian, international and value added taxes.  #### Zero Amount Authorizations If your processor supports zero amount authorizations, you can set this field to 0 for the authorization to check if the card is lost or stolen.  #### Maximum Field Lengths For GPN and JCN Gateway: Decimal (10) All other processors: Decimal (15)
     */
    unitPrice?: string;
  }
  /**
   * Contains recipient shipping information.
   */
  export interface Riskv1liststypeentriesOrderInformationShipTo {
    /**
     * First line of the shipping address.  Required field for authorization if any shipping address information is included in the request; otherwise, optional.  #### Tax Calculation Optional field for U.S. and Canadian taxes. Not applicable to international and value added taxes. Billing address objects will be used to determine the cardholder’s location when shipTo objects are not present.
     */
    address1?: string;
    /**
     * Second line of the shipping address.  Optional field.  #### Tax Calculation Optional field for U.S. and Canadian taxes. Not applicable to international and value added taxes. Billing address objects will be used to determine the cardholder’s location when shipTo objects are not present.
     */
    address2?: string;
    /**
     * State or province of the shipping address. Use the [State, Province, and Territory Codes for the United States and Canada](https://developer.cybersource.com/library/documentation/sbc/quickref/states_and_provinces.pdf)  Required field for authorization if any shipping address information is included in the request and shipping to the U.S. or Canada; otherwise, optional.  #### Tax Calculation Optional field for U.S. and Canadian taxes. Not applicable to international and value added taxes. Billing address objects will be used to determine the cardholder’s location when shipTo objects are not present.
     */
    administrativeArea?: string;
    /**
     * Country of the shipping address. Use the two-character [ISO Standard Country Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/countries_alpha_list.pdf)  Required field for authorization if any shipping address information is included in the request; otherwise, optional.  #### Tax Calculation Optional field for U.S., Canadian, international tax, and value added taxes. Billing address objects will be used to determine the cardholder’s location when shipTo objects are not present.
     */
    country?: string;
    /**
     * City of the shipping address.  Required field for authorization if any shipping address information is included in the request and shipping to the U.S. or Canada; otherwise, optional.  #### Tax Calculation Optional field for U.S. and Canadian taxes. Not applicable to international and value added taxes. Billing address objects will be used to determine the cardholder’s location when shipTo objects are not present.
     */
    locality?: string;
    /**
     * Postal code for the shipping address. The postal code must consist of 5 to 9 digits.  Required field for authorization if any shipping address information is included in the request and shipping to the U.S. or Canada; otherwise, optional.  When the billing country is the U.S., the 9-digit postal code must follow this format: [5 digits][dash][4 digits]  Example 12345-6789  When the billing country is Canada, the 6-digit postal code must follow this format: [alpha][numeric][alpha][space][numeric][alpha][numeric]  Example A1B 2C3  #### American Express Direct Before sending the postal code to the processor, all nonalphanumeric characters are removed and, if the remaining value is longer than nine characters, the value is truncated starting from the right side. #### Tax Calculation Optional field for U.S. and Canadian taxes. Not applicable to international and value added taxes. Billing address objects will be used to determine the cardholder’s location when shipTo objects are not present.
     */
    postalCode?: string;
  }
  /**
   * Contains the payment data for updating in List Management.
   */
  export interface Riskv1liststypeentriesPaymentInformation {
    card?: Riskv1liststypeentriesPaymentInformationCard;
    bank?: Riskv1liststypeentriesPaymentInformationBank;
  }
  /**
   * Customer's bank account details
   */
  export interface Riskv1liststypeentriesPaymentInformationBank {
    /**
     * Customer's bank account number. You can use this field only when scoring a direct debit transaction. Use this field if you do not or are not allowed to provide the IBAN. Note Do not use the IBAN in this field. Use nly the traditional account number information. For the IBAN, use bank_iban.
     */
    accountNumber?: string;
    /**
     * Country-specific code used to identify the customer’s bank. Required for some countries if you do not or are not allowed to provide the IBAN instead. You can use this field only when scoring a direct debit transaction. For specific requirements, see \"Required Bank Account Information by Country,\"
     */
    code?: string;
    /**
     * Country where the bank is located. Use the two-character ISO codes. You can use this field only when scoring a direct debit transaction.
     */
    country?: string;
    /**
     * International Bank Account Number (IBAN) for the bank account. For some countries you can provide this number instead of the traditional bank account information. You can use this field only when scoring a direct debit transaction. For specific requirements, see \"Required Bank Account Information by Country,\"
     */
    iban?: string;
  }
  export interface Riskv1liststypeentriesPaymentInformationCard {
    /**
     * The customer’s payment card number, also known as the Primary Account Number (PAN). You can also use this field for encoded account numbers.  #### FDMS Nashville Required. String (19)  #### GPX Required if `pointOfSaleInformation.entryMode=keyed`. However, this field is optional if your account is configured for relaxed requirements for address data and expiration date. **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  #### All other processors Required if `pointOfSaleInformation.entryMode=keyed`. However, this field is optional if your account is configured for relaxed requirements for address data and expiration date. **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
     */
    number?: string;
    /**
     * Three-digit value that indicates the card type.  **IMPORTANT** It is strongly recommended that you include the card type field in request messages even if it is optional for your processor and card type. Omitting the card type can cause the transaction to be processed with the wrong card type.  Possible values: - `001`: Visa. For card-present transactions on all processors except SIX, the Visa Electron card type is processed the same way that the Visa debit card is processed. Use card type value `001` for Visa Electron. - `002`: Mastercard, Eurocard[^1], which is a European regional brand of Mastercard. - `003`: American Express - `004`: Discover - `005`: Diners Club - `006`: Carte Blanche[^1] - `007`: JCB[^1] - `014`: Enroute[^1] - `021`: JAL[^1] - `024`: Maestro (UK Domestic)[^1] - `031`: Delta[^1]: Use this value only for Ingenico ePayments. For other processors, use `001` for all Visa card types. - `033`: Visa Electron[^1]. Use this value only for Ingenico ePayments and SIX. For other processors, use `001` for all Visa card types. - `034`: Dankort[^1] - `036`: Cartes Bancaires[^1] - `037`: Carta Si[^1] - `039`: Encoded account number[^1] - `040`: UATP[^1] - `042`: Maestro (International)[^1] - `050`: Hipercard[^2,3] - `051`: Aura - `054`: Elo[^3] - `062`: China UnionPay  [^1]: For this card type, you must include the `paymentInformation.card.type` or `paymentInformation.tokenizedCard.type` field in your request for an authorization or a stand-alone credit. [^2]: For this card type on Cielo 3.0, you must include the `paymentInformation.card.type` or `paymentInformation.tokenizedCard.type` field in a request for an authorization or a stand-alone credit. This card type is not supported on Cielo 1.5. [^3]: For this card type on Getnet and Rede, you must include the `paymentInformation.card.type` or `paymentInformation.tokenizedCard.type` field in a request for an authorization or a stand-alone credit.  #### Used by **Authorization** Required for Carte Blanche and JCB. Optional for all other card types.  #### Card Present reply This field is included in the reply message when the client software that is installed on the POS terminal uses the token management service (TMS) to retrieve tokenized payment details. You must contact customer support to have your account enabled to receive these fields in the credit reply message.  Returned by the Credit service.  This reply field is only supported by the following processors: - American Express Direct - Credit Mutuel-CIC - FDC Nashville Global - OmniPay Direct - SIX  #### GPX This field only supports transactions from the following card types: - Visa - Mastercard - AMEX - Discover - Diners - JCB - Union Pay International
     */
    type?: string;
    /**
     * description: The BIN is the first six digits of the card's Primary Account Number (PAN).
     */
    bin?: string;
  }
  export interface Riskv1liststypeentriesRiskInformation {
    markingDetails?: Riskv1liststypeentriesRiskInformationMarkingDetails;
  }
  /**
   * Details for marking the transaction as either positive or negative.
   */
  export interface Riskv1liststypeentriesRiskInformationMarkingDetails {
    /**
     * Notes or details that explain the reasons for adding the transaction to either the positive or negative list.
     */
    notes?: string;
    /**
     * Reason for adding the transaction to the negative list. This field can contain one of the following values: - `fraud_chargeback:` You have received a fraud-related chargeback for the transaction. - `non_fraud_chargeback:` You have received a non-fraudulent chargeback for the transaction. - `suspected:` You believe that you will probably receive a chargeback for the transaction. - `creditback:` You issued a refund to the customer to avoid a chargeback for the transaction.
     */
    reason?: string;
    /**
     * Name of the customer’s record entered in the list. For the positive list, it is required if `action_ code`=`add_positive`. If absent from the request, `ics_risk_update` creates the value for this field by concatenating the customer’s first and last names. For the negative and the review lists, `record_name`, `customer_firstname`, and `customer_lastname` are optional.
     */
    recordName?: string;
    /**
     * Indicates whether to add to or remove a customer’s identity from the negative or positive list. This field can contain one of the following values: - add: Add information to the list. - convert: moves the data. - delete: deletes the data from the list.
     */
    action?: string;
  }
  export interface SearchRequest {
    /**
     * This is the orgId of the organization which the user belongs to.
     */
    organizationId?: string;
    /**
     * User ID of the user you want to get details on.
     */
    userName?: string;
    /**
     * role of the user you are trying to search on.
     */
    roleId?: string;
    /**
     * permission that you are trying to search user on.
     */
    permissionId?: string;
  }
  /**
   * A paginated container of Shipping Addresses.
   */
  export interface ShippingAddressListForCustomer {
    links?: ShippingAddressListForCustomerLinks;
    /**
     * The offset parameter supplied in the request.
     */
    offset?: number;
    /**
     * The limit parameter supplied in the request.
     */
    limit?: number;
    /**
     * The number of Shipping Addresses returned in the array.
     */
    count?: number;
    /**
     * The total number of Shipping Addresses associated with the Customer.
     */
    total?: number;
    embedded?: ShippingAddressListForCustomerEmbedded;
  }
  /**
   * Shipping Address Resources.
   */
  export interface ShippingAddressListForCustomerEmbedded {
    shippingAddresses?: Array<Tmsv2customersEmbeddedDefaultShippingAddress>;
  }
  export interface ShippingAddressListForCustomerLinks {
    self?: ShippingAddressListForCustomerLinksSelf;
    first?: ShippingAddressListForCustomerLinksFirst;
    prev?: ShippingAddressListForCustomerLinksPrev;
    next?: ShippingAddressListForCustomerLinksNext;
    last?: ShippingAddressListForCustomerLinksLast;
  }
  export interface ShippingAddressListForCustomerLinksFirst {
    /**
     * Link to the first page.
     */
    href?: string;
  }
  export interface ShippingAddressListForCustomerLinksLast {
    /**
     * Link to the last page.
     */
    href?: string;
  }
  export interface ShippingAddressListForCustomerLinksNext {
    /**
     * Link to the next page.
     */
    href?: string;
  }
  export interface ShippingAddressListForCustomerLinksPrev {
    /**
     * Link to the previous page.
     */
    href?: string;
  }
  export interface ShippingAddressListForCustomerLinksSelf {
    /**
     * Link to the current page.
     */
    href?: string;
  }
  export interface TaxRequest {
    clientReferenceInformation?: Vasv2taxClientReferenceInformation;
    taxInformation?: Vasv2taxTaxInformation;
    orderInformation?: Vasv2taxOrderInformation;
    merchantInformation?: Vasv2taxMerchantInformation;
    buyerInformation?: Vasv2taxBuyerInformation;
  }
  export interface Tmsv2customersBuyerInformation {
    /**
     * Your identifier for the customer.
     */
    merchantCustomerID?: string;
    /**
     * Customer's primary email address, including the full domain name.
     */
    email?: string;
  }
  export interface Tmsv2customersClientReferenceInformation {
    /**
     * Client-generated order reference or tracking number.
     */
    code?: string;
  }
  export interface Tmsv2customersDefaultPaymentInstrument {
    /**
     * The id of the Customers default Payment Instrument
     */
    id?: string;
  }
  export interface Tmsv2customersDefaultShippingAddress {
    /**
     * The id of the Customers default Shipping Address
     */
    id?: string;
  }
  /**
   * Additional resources for the Customer token.
   */
  export interface Tmsv2customersEmbedded {
    defaultPaymentInstrument?: Tmsv2customersEmbeddedDefaultPaymentInstrument;
    defaultShippingAddress?: Tmsv2customersEmbeddedDefaultShippingAddress;
  }
  export interface Tmsv2customersEmbeddedDefaultPaymentInstrument {
    links?: Tmsv2customersEmbeddedDefaultPaymentInstrumentLinks;
    /**
     * The id of the Payment Instrument Token.
     */
    id?: string;
    /**
     * The type of token.  Valid values: - paymentInstrument
     */
    object?: string;
    /**
     * Issuers state for the card number. Valid values: - ACTIVE - CLOSED : The account has been closed.
     */
    state?: string;
    bankAccount?: Tmsv2customersEmbeddedDefaultPaymentInstrumentBankAccount;
    card?: Tmsv2customersEmbeddedDefaultPaymentInstrumentCard;
    buyerInformation?: Tmsv2customersEmbeddedDefaultPaymentInstrumentBuyerInformation;
    billTo?: Tmsv2customersEmbeddedDefaultPaymentInstrumentBillTo;
    processingInformation?: Tmsv2customersEmbeddedDefaultPaymentInstrumentProcessingInformation;
    merchantInformation?: Tmsv2customersEmbeddedDefaultPaymentInstrumentMerchantInformation;
    instrumentIdentifier?: Tmsv2customersEmbeddedDefaultPaymentInstrumentInstrumentIdentifier;
    metadata?: Tmsv2customersEmbeddedDefaultPaymentInstrumentMetadata;
    embedded?: Tmsv2customersEmbeddedDefaultPaymentInstrumentEmbedded;
  }
  export interface Tmsv2customersEmbeddedDefaultPaymentInstrumentBankAccount {
    /**
     * Account type.  Valid values:  - checking : C  - general ledger : G This value is supported only on Wells Fargo ACH  - savings : S (U.S. dollars only)  - corporate checking : X (U.S. dollars only)
     */
    type?: string;
  }
  export interface Tmsv2customersEmbeddedDefaultPaymentInstrumentBillTo {
    /**
     * Customer’s first name. This name must be the same as the name on the card.
     */
    firstName?: string;
    /**
     * Customer’s last name. This name must be the same as the name on the card.
     */
    lastName?: string;
    /**
     * Name of the customer’s company.
     */
    company?: string;
    /**
     * Payment card billing street address as it appears on the credit card issuer’s records.
     */
    address1?: string;
    /**
     * Additional address information.
     */
    address2?: string;
    /**
     * Payment card billing city.
     */
    locality?: string;
    /**
     * State or province of the billing address. Use the State, Province, and Territory Codes for the United States and Canada.
     */
    administrativeArea?: string;
    /**
     * Postal code for the billing address. The postal code must consist of 5 to 9 digits.  When the billing country is the U.S., the 9-digit postal code must follow this format: [5 digits][dash][4 digits]  **Example** `12345-6789`  When the billing country is Canada, the 6-digit postal code must follow this format: [alpha][numeric][alpha][space][numeric][alpha][numeric]  **Example** `A1B 2C3`
     */
    postalCode?: string;
    /**
     * Payment card billing country. Use the two-character ISO Standard Country Codes.
     */
    country?: string;
    /**
     * Customer's email address, including the full domain name.
     */
    email?: string;
    /**
     * Customer’s phone number.
     */
    phoneNumber?: string;
  }
  export interface Tmsv2customersEmbeddedDefaultPaymentInstrumentBuyerInformation {
    /**
     * Company’s tax identifier. This is only used for eCheck service.
     */
    companyTaxID?: string;
    /**
     * Currency used for the order. Use the three-character I[ISO Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf)  For details about currency as used in partial authorizations, see \"Features for Debit Cards and Prepaid Cards\" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  For an authorization reversal (`reversalInformation`) or a capture (`processingOptions.capture` is set to `true`), you must use the same currency that you used in your payment authorization request.  #### DCC for First Data Your local currency. For details, see the `currency` field description in [Dynamic Currency Conversion For First Data Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/DCC_FirstData_SCMP/DCC_FirstData_SCMP_API.pdf).
     */
    currency?: string;
    /**
     * Date of birth of the customer. Format: YYYY-MM-DD
     */
    dateOfBirth?: string;
    personalIdentification?: Array<Tmsv2customersEmbeddedDefaultPaymentInstrumentBuyerInformationPersonalIdentification>;
  }
  export interface Tmsv2customersEmbeddedDefaultPaymentInstrumentBuyerInformationIssuedBy {
    /**
     * The State or province where the customer’s driver’s license was issued.  Use the two-character State, Province, and Territory Codes for the United States and Canada.
     */
    administrativeArea?: string;
  }
  export interface Tmsv2customersEmbeddedDefaultPaymentInstrumentBuyerInformationPersonalIdentification {
    /**
     * The value of the identification type.
     */
    id?: string;
    /**
     * The type of the identification.  Valid values:   - driver license
     */
    type?: string;
    issuedBy?: Tmsv2customersEmbeddedDefaultPaymentInstrumentBuyerInformationIssuedBy;
  }
  export interface Tmsv2customersEmbeddedDefaultPaymentInstrumentCard {
    /**
     * Two-digit month in which the payment card expires.  Format: `MM`.  Valid values: `01` through `12`.
     */
    expirationMonth?: string;
    /**
     * Four-digit year in which the credit card expires.  Format: `YYYY`.
     */
    expirationYear?: string;
    /**
     * Value that indicates the card type. Valid v2 : v1 - description values:   * 001 : visa   * 002 : mastercard - Eurocard—European regional brand of Mastercard   * 003 : american express   * 004 : discover   * 005 : diners club   * 006 : carte blanche   * 007 : jcb   * 008 : optima   * 011 : twinpay credit   * 012 : twinpay debit   * 013 : walmart   * 014 : enRoute   * 015 : lowes consumer   * 016 : home depot consumer   * 017 : mbna   * 018 : dicks sportswear   * 019 : casual corner   * 020 : sears   * 021 : jal   * 023 : disney   * 024 : maestro uk domestic   * 025 : sams club consumer   * 026 : sams club business   * 028 : bill me later   * 029 : bebe   * 030 : restoration hardware   * 031 : delta online — use this value only for Ingenico ePayments. For other processors, use 001 for all Visa card types.   * 032 : solo   * 033 : visa electron   * 034 : dankort   * 035 : laser   * 036 : carte bleue — formerly Cartes Bancaires   * 037 : carta si   * 038 : pinless debit   * 039 : encoded account   * 040 : uatp   * 041 : household   * 042 : maestro international   * 043 : ge money uk   * 044 : korean cards   * 045 : style   * 046 : jcrew   * 047 : payease china processing ewallet   * 048 : payease china processing bank transfer   * 049 : meijer private label   * 050 : hipercard — supported only by the Comercio Latino processor.   * 051 : aura — supported only by the Comercio Latino processor.   * 052 : redecard   * 054 : elo — supported only by the Comercio Latino processor.   * 055 : capital one private label   * 056 : synchrony private label   * 057 : costco private label   * 060 : mada   * 062 : china union pay   * 063 : falabella private label
     */
    type?: string;
    /**
     * Number of times a Maestro (UK Domestic) card has been issued to the account holder. The card might or might not have an issue number. The number can consist of one or two digits, and the first digit might be a zero. When you include this value in your request, include exactly what is printed on the card. A value of 2 is different than a value of 02. Do not include the field, even with a blank value, if the card is not a Maestro (UK Domestic) card.  **Note** The issue number is not required for Maestro (UK Domestic) transactions.
     */
    issueNumber?: string;
    /**
     * Month of the start of the Maestro (UK Domestic) card validity period. Do not include the field, even with a blank value, if the card is not a Maestro (UK Domestic) card. `Format: MM`. Valid values: 01 through 12.  **Note** The start date is not required for Maestro (UK Domestic) transactions.
     */
    startMonth?: string;
    /**
     * Year of the start of the Maestro (UK Domestic) card validity period. Do not include the field, even with a blank value, if the card is not a Maestro (UK Domestic) card. `Format: YYYY`.  **Note** The start date is not required for Maestro (UK Domestic) transactions.
     */
    startYear?: string;
    /**
     * 'Payment Instrument was created / updated as part of a pinless debit transaction.'
     */
    useAs?: string;
    tokenizedInformation?: Tmsv2customersEmbeddedDefaultPaymentInstrumentCardTokenizedInformation;
  }
  export interface Tmsv2customersEmbeddedDefaultPaymentInstrumentCardTokenizedInformation {
    /**
     * Value that identifies your business and indicates that the cardholder’s account number is tokenized. This value is assigned by the token service provider and is unique within the token service provider’s database.  **Note** This field is supported only for **CyberSource through VisaNet** and **FDC Nashville Global**.
     */
    requestorID?: string;
    /**
     * Type of transaction that provided the token data. This value does not specify the token service provider; it specifies the entity that provided you with information about the token.  Set the value for this field to 1. An application on the customer’s mobile device provided the token data.
     */
    transactionType?: string;
  }
  /**
   * Additional resources for the Payment Instrument token.
   */
  export interface Tmsv2customersEmbeddedDefaultPaymentInstrumentEmbedded {
    instrumentIdentifier?: Tmsv2customersEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifier;
  }
  export interface Tmsv2customersEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifier {
    links?: Tmsv2customersEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierLinks;
    /**
     * The id of the Instrument Identifier Token.
     */
    id?: string;
    /**
     * The type of token.  Valid values: - instrumentIdentifier
     */
    object?: string;
    /**
     * Issuers state for the card number. Valid values: - ACTIVE - CLOSED : The account has been closed.
     */
    state?: string;
    /**
     * The type of Instrument Identifier. Valid values: - enrollable card
     */
    type?: string;
    card?: Tmsv2customersEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierCard;
    bankAccount?: Tmsv2customersEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierBankAccount;
    tokenizedCard?: Tmsv2customersEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierTokenizedCard;
    issuer?: Tmsv2customersEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierIssuer;
    processingInformation?: Tmsv2customersEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierProcessingInformation;
    billTo?: Tmsv2customersEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierBillTo;
    metadata?: Tmsv2customersEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierMetadata;
  }
  export interface Tmsv2customersEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierBankAccount {
    /**
     * Account number.  When processing encoded account numbers, use this field for the encoded account number.
     */
    number?: string;
    /**
     * Bank routing number. This is also called the transit number.  For details, see `ecp_rdfi` field description in the [Electronic Check Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/EChecks_SCMP_API/html/)
     */
    routingNumber?: string;
  }
  /**
   * This information is sent to the issuer as part of network token enrollment and is not stored under the Instrument Identifier token.
   */
  export interface Tmsv2customersEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierBillTo {
    /**
     * Payment card billing street address as it appears on the credit card issuer’s records.
     */
    address1?: string;
    /**
     * Additional address information.
     */
    address2?: string;
    /**
     * Payment card billing city.
     */
    locality?: string;
    /**
     * State or province of the billing address. Use the State, Province, and Territory Codes for the United States and Canada.
     */
    administrativeArea?: string;
    /**
     * Postal code for the billing address. The postal code must consist of 5 to 9 digits.  When the billing country is the U.S., the 9-digit postal code must follow this format: [5 digits][dash][4 digits]  **Example** `12345-6789`  When the billing country is Canada, the 6-digit postal code must follow this format: [alpha][numeric][alpha][space][numeric][alpha][numeric]  **Example** `A1B 2C3`
     */
    postalCode?: string;
    /**
     * Payment card billing country. Use the two-character ISO Standard Country Codes.
     */
    country?: string;
  }
  /**
   * The expirationMonth, expirationYear and securityCode is sent to the issuer as part of network token enrollment and is not stored under the Instrument Identifier token.
   */
  export interface Tmsv2customersEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierCard {
    /**
     * The customer’s payment card number, also known as the Primary Account Number (PAN). You can also use this field for encoded account numbers.
     */
    number?: string;
    /**
     * Two-digit month in which the payment card expires.  Format: `MM`.  Valid values: `01` through `12`.
     */
    expirationMonth?: string;
    /**
     * Four-digit year in which the credit card expires.  Format: `YYYY`.
     */
    expirationYear?: string;
    /**
     * Card Verification Number.
     */
    securityCode?: string;
  }
  export interface Tmsv2customersEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierIssuer {
    /**
     * This reference number serves as a link to the cardholder account and to all transactions for that account.
     */
    paymentAccountReference?: string;
  }
  export interface Tmsv2customersEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierLinks {
    self?: Tmsv2customersEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierLinksSelf;
    paymentInstruments?: Tmsv2customersEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierLinksPaymentInstruments;
  }
  export interface Tmsv2customersEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierLinksPaymentInstruments {
    /**
     * Link to the Instrument Identifiers Payment Instruments.
     */
    href?: string;
  }
  export interface Tmsv2customersEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierLinksSelf {
    /**
     * Link to the Instrument Identifier.
     */
    href?: string;
  }
  export interface Tmsv2customersEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierMetadata {
    /**
     * The creator of the Instrument Identifier token.
     */
    creator?: string;
  }
  export interface Tmsv2customersEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierProcessingInformation {
    authorizationOptions?: Tmsv2customersEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptions;
  }
  export interface Tmsv2customersEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptions {
    initiator?: Tmsv2customersEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator;
  }
  export interface Tmsv2customersEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator {
    merchantInitiatedTransaction?: Tmsv2customersEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction;
  }
  export interface Tmsv2customersEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction {
    /**
     * Network transaction identifier that was returned in the payment response field _processorInformation.transactionID_ in the reply message for either the original merchant-initiated payment in the series or the previous merchant-initiated payment in the series.
     */
    previousTransactionId?: string;
  }
  export interface Tmsv2customersEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierTokenizedCard {
    /**
     * The network token card association brand Valid values: - visa - mastercard
     */
    type?: string;
    /**
     * Issuers state for the network token Valid values: - ACTIVE - SUSPENDED : This state can change to ACTIVE or DELETED. - DELETED : This is a final state for the network token.
     */
    state?: string;
    /**
     * The token requestors customer’s payment network token
     */
    number?: string;
    /**
     * Two-digit month in which the network token expires.  Format: `MM`.  Valid values: `01` through `12`.
     */
    expirationMonth?: string;
    /**
     * Four-digit year in which the network token expires.  Format: `YYYY`.
     */
    expirationYear?: string;
    /**
     * Generated value used in conjunction with the network token for making a payment.
     */
    cryptogram?: string;
    card?: Tmsv2customersEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierTokenizedCardCard;
  }
  /**
   * The latest card details associated with the network token
   */
  export interface Tmsv2customersEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierTokenizedCardCard {
    /**
     * The customer’s latest payment card number suffix
     */
    suffix?: string;
    /**
     *  Two-digit month in which the customer’s latest payment card expires.  Format: `MM`.  Valid values: `01` through `12`.
     */
    expirationMonth?: string;
    /**
     * Four-digit year in which the customer’s latest payment card expires.  Format: `YYYY`.
     */
    expirationYear?: string;
  }
  export interface Tmsv2customersEmbeddedDefaultPaymentInstrumentInstrumentIdentifier {
    /**
     * The id of the Instrument Identifier token linked to the Payment Instrument.
     */
    id?: string;
  }
  export interface Tmsv2customersEmbeddedDefaultPaymentInstrumentLinks {
    self?: Tmsv2customersEmbeddedDefaultPaymentInstrumentLinksSelf;
    customer?: Tmsv2customersLinksSelf;
  }
  export interface Tmsv2customersEmbeddedDefaultPaymentInstrumentLinksSelf {
    /**
     * Link to the Payment Instrument.
     */
    href?: string;
  }
  export interface Tmsv2customersEmbeddedDefaultPaymentInstrumentMerchantInformation {
    merchantDescriptor?: Tmsv2customersEmbeddedDefaultPaymentInstrumentMerchantInformationMerchantDescriptor;
  }
  export interface Tmsv2customersEmbeddedDefaultPaymentInstrumentMerchantInformationMerchantDescriptor {
    /**
     * Alternate contact information for your business,such as an email address or URL. This value might be displayed on the cardholder’s statement. When you do not include this value in your capture or credit request, CyberSource uses the merchant URL from your CyberSource account. Important This value must consist of English characters
     */
    alternateName?: string;
  }
  export interface Tmsv2customersEmbeddedDefaultPaymentInstrumentMetadata {
    /**
     * The creator of the Payment Instrument token.
     */
    creator?: string;
  }
  export interface Tmsv2customersEmbeddedDefaultPaymentInstrumentProcessingInformation {
    /**
     * Flag that indicates that this is a payment for a bill or for an existing contractual loan. For processor-specific details, see the `bill_payment` field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  Valid values: - `true`: Bill payment or loan payment. - `false` (default): Not a bill payment or loan payment.
     */
    billPaymentProgramEnabled?: boolean;
    bankTransferOptions?: Tmsv2customersEmbeddedDefaultPaymentInstrumentProcessingInformationBankTransferOptions;
  }
  export interface Tmsv2customersEmbeddedDefaultPaymentInstrumentProcessingInformationBankTransferOptions {
    /**
     * Specifies the authorization method for the transaction.  #### TeleCheck Valid values: - `ARC`: account receivable conversion - `CCD`: corporate cash disbursement - `POP`: point of purchase conversion - `PPD`: prearranged payment and deposit entry - `TEL`: telephone-initiated entry - `WEB`: internet-initiated entry  For details, see `ecp_sec_code` field description in the [Electronic Check Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/EChecks_SCMP_API/html/)
     */
    sECCode?: string;
  }
  export interface Tmsv2customersEmbeddedDefaultShippingAddress {
    links?: Tmsv2customersEmbeddedDefaultShippingAddressLinks;
    /**
     * The id of the Shipping Address Token.
     */
    id?: string;
    shipTo?: Tmsv2customersEmbeddedDefaultShippingAddressShipTo;
    metadata?: Tmsv2customersEmbeddedDefaultShippingAddressMetadata;
  }
  export interface Tmsv2customersEmbeddedDefaultShippingAddressLinks {
    self?: Tmsv2customersEmbeddedDefaultShippingAddressLinksSelf;
    customer?: Tmsv2customersEmbeddedDefaultShippingAddressLinksCustomer;
  }
  export interface Tmsv2customersEmbeddedDefaultShippingAddressLinksCustomer {
    /**
     * Link to the Customer
     */
    href?: string;
  }
  export interface Tmsv2customersEmbeddedDefaultShippingAddressLinksSelf {
    /**
     * Link to the Customers Shipping Address
     */
    href?: string;
  }
  export interface Tmsv2customersEmbeddedDefaultShippingAddressMetadata {
    /**
     * The creator of the Shipping Address token.
     */
    creator?: string;
  }
  export interface Tmsv2customersEmbeddedDefaultShippingAddressShipTo {
    /**
     * First name of the recipient.
     */
    firstName?: string;
    /**
     * Last name of the recipient.
     */
    lastName?: string;
    /**
     * Company associated with the shipping address.
     */
    company?: string;
    /**
     * First line of the shipping address.
     */
    address1?: string;
    /**
     * Second line of the shipping address.
     */
    address2?: string;
    /**
     * City of the shipping address.
     */
    locality?: string;
    /**
     * State or province of the shipping address. Use 2 character the State, Province, and Territory Codes for the United States and Canada.
     */
    administrativeArea?: string;
    /**
     * Postal code for the shipping address. The postal code must consist of 5 to 9 digits.  When the billing country is the U.S., the 9-digit postal code must follow this format: [5 digits][dash][4 digits]  Example 12345-6789  When the billing country is Canada, the 6-digit postal code must follow this format: [alpha][numeric][alpha][space][numeric][alpha][numeric]  Example A1B 2C3  **American Express Direct**\\ Before sending the postal code to the processor, CyberSource removes all nonalphanumeric characters and, if the remaining value is longer than nine characters, truncates the value starting from the right side.
     */
    postalCode?: string;
    /**
     * Country of the shipping address. Use the two-character ISO Standard Country Codes.
     */
    country?: string;
    /**
     * Email associated with the shipping address.
     */
    email?: string;
    /**
     * Phone number associated with the shipping address.
     */
    phoneNumber?: string;
  }
  export interface Tmsv2customersLinks {
    self?: Tmsv2customersLinksSelf;
    paymentInstruments?: Tmsv2customersLinksPaymentInstruments;
    shippingAddress?: Tmsv2customersLinksShippingAddress;
  }
  export interface Tmsv2customersLinksPaymentInstruments {
    /**
     * Link to the Customers Payment Instruments.
     */
    href?: string;
  }
  export interface Tmsv2customersLinksSelf {
    /**
     * Link to the Customer.
     */
    href?: string;
  }
  export interface Tmsv2customersLinksShippingAddress {
    /**
     * Link to the Customers Shipping Addresses.
     */
    href?: string;
  }
  export interface Tmsv2customersMerchantDefinedInformation {
    /**
     * The number you assign as the name for your merchant-defined data or secure field. Valid values are data1 to data4 and sensitive1 to sensitive4  For example, to set the name for merchant-defined data 2 field, you would reference merchantDefinedInformation[x].name as data2 Valid values: - data1 - data2 - data3 - data4 - sensitive1 - sensitive2 - sensitive3 - sensitive4
     */
    name?: string;
    /**
     * The value you assign for your merchant-defined data field.  **Warning** Merchant-defined data fields are not intended to and must not be used to capture personally identifying information. Accordingly, merchants are prohibited from capturing, obtaining, and/or transmitting any personally identifying information in or via the merchant-defined data fields. Personally identifying information includes, but is not limited to, address, credit card number, social security number, driver's license number, state-issued identification number, passport number, and card verification numbers (CVV, CVC2, CVV2, CID, CVN). In the event CyberSource discovers that a merchant is capturing and/or transmitting personally identifying information via the merchant-defined data fields, whether or not intentionally, CyberSource will immediately suspend the merchant's account, which will result in a rejection of any and all transaction requests submitted by the merchant after the point of suspension.
     */
    value?: string;
  }
  export interface Tmsv2customersMetadata {
    /**
     * The creator of the Customer token.
     */
    creator?: string;
  }
  export interface Tmsv2customersObjectInformation {
    /**
     * Name or title of the customer.
     */
    title?: string;
    /**
     * Comments that you can make about the customer.
     */
    comment?: string;
  }
  export interface TokenizeRequest {
    /**
     * Unique identifier for the generated token. This is obtained from the Generate Key request. See the [Java Script and Java examples](http://apps.cybersource.com/library/documentation/dev_guides/Secure_Acceptance_Flex/Key/html) on how to import the key and encrypt using the imported key.
     */
    keyId: string;
    cardInfo?: Flexv1tokensCardInfo;
  }
  export interface TssV2TransactionsGet200Response {
    /**
     * An unique identification number to identify the submitted request. It is also appended to the endpoint of the resource.  On incremental authorizations, this value with be the same as the identification number returned in the original authorization response.  #### PIN debit Returned for all PIN debit services.
     */
    id?: string;
    /**
     * Contains the transaction identifier for the first transaction in the series of transactions. For example, you might send an authorization request for a payment, followed by a capture request for that payment, and then a refund request for that captured payment. Each of those requests, if successful, creates a resource that is assigned an identifier, which is returned in the response. The rootId identifies the first ID in the series, which in this case would be the ID of the original authorization.
     */
    rootId?: string;
    /**
     * Reference number for the transaction. This value is not returned for all processors.  Returned by authorization service.  ##### PIN debit Returned by PIN debit credit, PIN debit purchase, and PIN debit reversal.  #### Atos Positive string (6)  #### All other processors String (60)
     */
    reconciliationId?: string;
    /**
     * Your CyberSource merchant ID.
     */
    merchantId?: string;
    /**
     * The status of the submitted transaction.
     */
    status?: string;
    /**
     * Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ` **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The `T` separates the date and the time. The `Z` indicates UTC.  Returned by authorization service.  #### PIN debit Time when the PIN debit credit, PIN debit purchase or PIN debit reversal was requested.  Returned by PIN debit credit, PIN debit purchase or PIN debit reversal.
     */
    submitTimeUTC?: string;
    applicationInformation?: TssV2TransactionsGet200ResponseApplicationInformation;
    buyerInformation?: TssV2TransactionsGet200ResponseBuyerInformation;
    clientReferenceInformation?: TssV2TransactionsGet200ResponseClientReferenceInformation;
    consumerAuthenticationInformation?: TssV2TransactionsGet200ResponseConsumerAuthenticationInformation;
    deviceInformation?: TssV2TransactionsGet200ResponseDeviceInformation;
    errorInformation?: TssV2TransactionsGet200ResponseErrorInformation;
    installmentInformation?: TssV2TransactionsGet200ResponseInstallmentInformation;
    fraudMarkingInformation?: TssV2TransactionsGet200ResponseFraudMarkingInformation;
    /**
     * The object containing the custom data that the merchant defines.
     */
    merchantDefinedInformation?: Array<Ptsv2paymentsMerchantDefinedInformation>;
    merchantInformation?: TssV2TransactionsGet200ResponseMerchantInformation;
    orderInformation?: TssV2TransactionsGet200ResponseOrderInformation;
    paymentInformation?: TssV2TransactionsGet200ResponsePaymentInformation;
    processingInformation?: TssV2TransactionsGet200ResponseProcessingInformation;
    processorInformation?: TssV2TransactionsGet200ResponseProcessorInformation;
    pointOfSaleInformation?: TssV2TransactionsGet200ResponsePointOfSaleInformation;
    riskInformation?: TssV2TransactionsGet200ResponseRiskInformation;
    senderInformation?: TssV2TransactionsGet200ResponseSenderInformation;
    links?: TssV2TransactionsGet200ResponseLinks;
    httpCode?: number;
  }
  export interface TssV2TransactionsGet200ResponseApplicationInformation {
    /**
     * The status of the submitted transaction.
     */
    status?: string;
    /**
     * Indicates the reason why a request succeeded or failed and possible action to take if a request fails.  For details, see the appendix of reason codes in the documentation for the relevant payment method.
     */
    reasonCode?: string;
    /**
     * Indicates whether the service request was successful. Possible values:  - `-1`: An error occurred. - `0`: The request was declined. - `1`: The request was successful.
     */
    rCode?: string;
    /**
     * One-word description of the result of the application.
     */
    rFlag?: string;
    applications?: Array<TssV2TransactionsGet200ResponseApplicationInformationApplications>;
  }
  export interface TssV2TransactionsGet200ResponseApplicationInformationApplications {
    /**
     * The name of the CyberSource transaction type (such as CC settlement or CC authorization) that the merchant wants to process in a transaction request. More than one transaction type can included in a transaction request. Each transaction type separately returns their own status, reasonCode, rCode, and rFlag messages.
     */
    name?: string;
    /**
     * The description for this field is not available.
     */
    status?: string;
    /**
     * 3-digit reason code that indicates why the customer profile payment succeeded or failed.
     */
    reasonCode?: string;
    /**
     * Indicates whether the service request was successful. Possible values:  - `-1`: An error occurred. - `0`: The request was declined. - `1`: The request was successful.
     */
    rCode?: string;
    /**
     * One-word description of the result of the application.
     */
    rFlag?: string;
    /**
     * Reference number that you use to reconcile your CyberSource reports with your processor reports.
     */
    reconciliationId?: string;
    /**
     * Message that explains the reply flag for the application.
     */
    rMessage?: string;
    /**
     * The description for this field is not available.
     */
    returnCode?: number;
  }
  export interface TssV2TransactionsGet200ResponseBuyerInformation {
    /**
     * Your identifier for the customer.  When a subscription or customer profile is being created, the maximum length for this field for most processors is 30. Otherwise, the maximum length is 100.  #### Comercio Latino For recurring payments in Mexico, the value is the customer’s contract number. Note Before you request the authorization, you must inform the issuer of the customer contract numbers that will be used for recurring transactions.  #### Worldpay VAP For a follow-on credit with Worldpay VAP, CyberSource checks the following locations, in the order given, for a customer account ID value and uses the first value it finds: 1. `customer_account_id` value in the follow-on credit request 2. Customer account ID value that was used for the capture that is being credited 3. Customer account ID value that was used for the original authorization If a customer account ID value cannot be found in any of these locations, then no value is used.  For processor-specific information, see the `customer_account_id` field description in [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
     */
    merchantCustomerId?: string;
    /**
     * The merchant's password that CyberSource hashes and stores as a hashed password.  For details about this field, see the `customer_password` field description in _Decision Manager Using the SCMP API Developer Guide_ on the [CyberSource Business Center.](https://ebc2.cybersource.com/ebc2/) Click **Decision Manager** > **Documentation** > **Guides** > _Decision Manager Using the SCMP API Developer Guide_ (PDF link).
     */
    hashedPassword?: string;
  }
  export interface TssV2TransactionsGet200ResponseClientReferenceInformation {
    /**
     * Merchant-generated order reference or tracking number. It is recommended that you send a unique value for each transaction so that you can perform meaningful searches for the transaction.  #### Used by **Authorization** Required field.  #### PIN Debit Requests for PIN debit reversals need to use the same merchant reference number that was used in the transaction that is being reversed.  Required field for all PIN Debit requests (purchase, credit, and reversal).  #### FDC Nashville Global Certain circumstances can cause the processor to truncate this value to 15 or 17 characters for Level II and Level III processing, which can cause a discrepancy between the value you submit and the value included in some processor reports.
     */
    code?: string;
    /**
     * Version of the CyberSource application or integration used for a transaction.
     */
    applicationVersion?: string;
    /**
     * The name of the Connection Method client (such as Virtual Terminal or SOAP Toolkit API) that the merchant uses to send a transaction request to CyberSource.
     */
    applicationName?: string;
    /**
     * The entity that is responsible for running the transaction and submitting the processing request to CyberSource. This could be a person, a system, or a connection method.
     */
    applicationUser?: string;
    /**
     * Brief description of the order or any comment you wish to add to the order.
     */
    comments?: string;
  }
  export interface TssV2TransactionsGet200ResponseConsumerAuthenticationInformation {
    /**
     * Raw electronic commerce indicator (ECI).  For details, see `eci_raw` request field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
     */
    eciRaw?: string;
    /**
     * Cardholder authentication verification value (CAVV).
     */
    cavv?: string;
    /**
     * Transaction identifier.  For details, see `xid` request field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
     */
    xid?: string;
    /**
     * Payer auth Transaction identifier.
     */
    transactionId?: string;
  }
  export interface TssV2TransactionsGet200ResponseDeviceInformation {
    /**
     * IP address of the customer.  #### Used by **Authorization, Capture, and Credit** Optional field.
     */
    ipAddress?: string;
    /**
     * DNS resolved hostname from `ipAddress`.
     */
    hostName?: string;
    /**
     * Whether the customer’s browser accepts cookies. This field can contain one of the following values: - `yes`: The customer’s browser accepts cookies. - `no`: The customer’s browser does not accept cookies.
     */
    cookiesAccepted?: string;
  }
  export interface TssV2TransactionsGet200ResponseErrorInformation {
    /**
     * 1-word description of why a request succeeded or failed.
     */
    reason?: string;
    /**
     * The user-facing description for why a request succeeded or failed.
     */
    message?: string;
    details?: Array<PtsV2PaymentsPost201ResponseErrorInformationDetails>;
  }
  export interface TssV2TransactionsGet200ResponseFraudMarkingInformation {
    /**
     * Reason for adding the transaction to the negative list. This field can contain one of the following values: - fraud_chargeback: You have received a fraudrelated chargeback for the transaction. - non_fraud_chargeback: You have received a non-fraudulent chargeback for the transaction. - suspected: You believe that you will probably receive a chargeback for the transaction. - creditback: You issued a refund to the customer to avoid a chargeback for the transaction.
     */
    reason?: string;
  }
  export interface TssV2TransactionsGet200ResponseInstallmentInformation {
    /**
     * Number of Installments.
     */
    numberOfInstallments?: string;
  }
  export interface TssV2TransactionsGet200ResponseLinks {
    self?: PtsV2PaymentsPost201ResponseLinksSelf;
    relatedTransactions?: Array<PtsV2PaymentsPost201ResponseLinksSelf>;
  }
  export interface TssV2TransactionsGet200ResponseMerchantInformation {
    merchantDescriptor?: TssV2TransactionsGet200ResponseMerchantInformationMerchantDescriptor;
  }
  export interface TssV2TransactionsGet200ResponseMerchantInformationMerchantDescriptor {
    /**
     * Your merchant name.  **Note** For Paymentech processor using Cybersource Payouts, the maximum data length is 22.  #### PIN debit Your business name. This name is displayed on the cardholder’s statement. When you include more than one consecutive space, extra spaces are removed.  When you do not include this value in your PIN debit request, the merchant name from your account is used. **Important** This value must consist of English characters.  Optional field for PIN debit credit or PIN debit purchase requests.  #### Airline processing Your merchant name. This name is displayed on the cardholder’s statement. When you include more than one consecutive space, extra spaces are removed.  **Note** Some airline fee programs may require the original ticket number (ticket identifier) or the ancillary service description in positions 13 through 23 of this field.  **Important** This value must consist of English characters.  Required for captures and credits.
     */
    name?: string;
  }
  export interface TssV2TransactionsGet200ResponseOrderInformation {
    billTo?: TssV2TransactionsGet200ResponseOrderInformationBillTo;
    shipTo?: TssV2TransactionsGet200ResponseOrderInformationShipTo;
    /**
     * Transaction Line Item data.
     */
    lineItems?: Array<TssV2TransactionsGet200ResponseOrderInformationLineItems>;
    amountDetails?: TssV2TransactionsGet200ResponseOrderInformationAmountDetails;
    shippingDetails?: TssV2TransactionsGet200ResponseOrderInformationShippingDetails;
    invoiceDetails?: TssV2TransactionsGet200ResponseOrderInformationInvoiceDetails;
  }
  export interface TssV2TransactionsGet200ResponseOrderInformationAmountDetails {
    /**
     * Grand total for the order. This value cannot be negative. You can include a decimal point (.), but no other special characters. CyberSource truncates the amount to the correct number of decimal places.  **Note** For CTV, FDCCompass, Paymentech processors, the maximum length for this field is 12.  **Important** Some processors have specific requirements and limitations, such as maximum amounts and maximum field lengths. For details, see: - \"Authorization Information for Specific Processors\" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/). - \"Capture Information for Specific Processors\" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/). - \"Credit Information for Specific Processors\" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/).  If your processor supports zero amount authorizations, you can set this field to 0 for the authorization to check if the card is lost or stolen. For details, see \"Zero Amount Authorizations,\" \"Credit Information for Specific Processors\" in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  #### Card Present Required to include either this field or `orderInformation.lineItems[].unitPrice` for the order.  #### Invoicing Required for creating a new invoice.  #### PIN Debit Amount you requested for the PIN debit purchase. This value is returned for partial authorizations. The issuing bank can approve a partial amount if the balance on the debit card is less than the requested transaction amount.  Required field for PIN Debit purchase and PIN Debit credit requests. Optional field for PIN Debit reversal requests.  #### GPX This field is optional for reversing an authorization or credit; however, for all other processors, these fields are required.  #### DCC with a Third-Party Provider Set this field to the converted amount that was returned by the DCC provider. You must include either this field or the 1st line item in the order and the specific line-order amount in your request. For details, see `grand_total_amount` field description in [Dynamic Currency Conversion For First Data Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/DCC_FirstData_SCMP/DCC_FirstData_SCMP_API.pdf).  #### FDMS South If you accept IDR or CLP currencies, see the entry for FDMS South in \"Authorization Information for Specific Processors\" of the [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  #### DCC for First Data Not used.
     */
    totalAmount?: string;
    /**
     * Currency used for the order. Use the three-character [ISO Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf)  #### Used by **Authorization** Required field.  **Authorization Reversal** For an authorization reversal (`reversalInformation`) or a capture (`processingOptions.capture` is set to `true`), you must use the same currency that you used in your payment authorization request.  #### PIN Debit Currency for the amount you requested for the PIN debit purchase. This value is returned for partial authorizations. The issuing bank can approve a partial amount if the balance on the debit card is less than the requested transaction amount. For the possible values, see the [ISO Standard Currency Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/currencies.pdf). Returned by PIN debit purchase.  For PIN debit reversal requests, you must use the same currency that was used for the PIN debit purchase or PIN debit credit that you are reversing. For the possible values, see the [ISO Standard Currency Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/currencies.pdf).  Required field for PIN Debit purchase and PIN Debit credit requests. Optional field for PIN Debit reversal requests.  #### GPX This field is optional for reversing an authorization or credit.  #### DCC for First Data Your local currency. For details, see the `currency` field description in [Dynamic Currency Conversion For First Data Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/DCC_FirstData_SCMP/DCC_FirstData_SCMP_API.pdf).  #### Tax Calculation Required for international tax and value added tax only. Optional for U.S. and Canadian taxes. Your local currency.
     */
    currency?: string;
    /**
     * Total tax amount for all the items in the order.
     */
    taxAmount?: string;
    /**
     * Amount that was authorized.  Returned by authorization service.  #### PIN debit Amount of the purchase.  Returned by PIN debit purchase.  #### FDMS South If you accept IDR or CLP currencies, see the entry for FDMS South in Merchant Descriptors Using the SCMP API.
     */
    authorizedAmount?: string;
    /**
     * This is a multicurrency field. It contains the transaction amount (field 4), converted to the Currency used to bill the cardholder’s account.
     */
    settlementAmount?: string;
    /**
     * This is a multicurrency-only field. It contains a 3-digit numeric code that identifies the currency used by the issuer to bill the cardholder's account.
     */
    settlementCurrency?: string;
  }
  export interface TssV2TransactionsGet200ResponseOrderInformationBillTo {
    /**
     * Customer’s first name. This name must be the same as the name on the card.  **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  #### CyberSource Latin American Processing **Important** For an authorization request, CyberSource Latin American Processing concatenates `orderInformation.billTo.firstName` and `orderInformation.billTo.lastName`. If the concatenated value exceeds 30 characters, CyberSource Latin American Processing declines the authorization request.\\ **Note** CyberSource Latin American Processing is the name of a specific processing connection that CyberSource supports. In the CyberSource API documentation, CyberSource Latin American Processing does not refer to the general topic of processing in Latin America. The information in this field description is for the specific processing connection called _CyberSource Latin American Processing_. It is not for any other Latin American processors that CyberSource supports.  #### CyberSource through VisaNet Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  #### For Payouts: This field may be sent only for FDC Compass.  #### Chase Paymentech Solutions Optional field.  ####  Credit Mutuel-CIC Optional field.  #### OmniPay Direct Optional field.  #### SIX Optional field.  #### TSYS Acquiring Solutions Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.  #### Worldpay VAP Optional field.  #### All other processors Not used.
     */
    firstName?: string;
    /**
     * Customer’s last name. This name must be the same as the name on the card.  **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  #### Chase Paymentech Solutions Optional field.  ####  Credit Mutuel-CIC Optional field.  #### CyberSource Latin American Processing **Important** For an authorization request, CyberSource Latin American Processing concatenates `orderInformation.billTo.firstName` and `orderInformation.billTo.lastName`. If the concatenated value exceeds 30 characters, CyberSource Latin American Processing declines the authorization request.\\ **Note** CyberSource Latin American Processing is the name of a specific processing connection that CyberSource supports. In the CyberSource API documentation, CyberSource Latin American Processing does not refer to the general topic of processing in Latin America. The information in this field description is for the specific processing connection called CyberSource Latin American Processing. It is not for any other Latin American processors that CyberSource supports.  #### CyberSource through VisaNet Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  #### For Payouts: This field may be sent only for FDC Compass.  #### OmniPay Direct Optional field.  #### RBS WorldPay Atlanta Optional field.  #### SIX Optional field.  #### TSYS Acquiring Solutions Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.  #### Worldpay VAP Optional field.  #### All other processors Not used.
     */
    lastName?: string;
    /**
     * Customer’s middle name.
     */
    middleName?: string;
    /**
     * Customer’s name suffix.
     */
    nameSuffix?: string;
    /**
     * Payment card billing street address as it appears on the credit card issuer’s records.  #### Atos This field must not contain colons (:).  #### CyberSource through VisaNet **Important** When you populate orderInformation.billTo.address1 and orderInformation.billTo.address2, CyberSource through VisaNet concatenates the two values. If the concatenated value exceeds 40 characters, CyberSource through VisaNet truncates the value at 40 characters before sending it to Visa and the issuing bank. Truncating this value affects AVS results and therefore might also affect risk decisions and chargebacks. Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  #### FDMS Nashville When the street name is numeric, it must be sent in numeric format. For example, if the address is _One First Street_, it must be sent as _1 1st Street_.  Required if keyed; not used if swiped.  String (20)  #### TSYS Acquiring Solutions Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.  #### All other processors: Optional. String (60)  #### For Payouts This field may be sent only for FDC Compass.  **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
     */
    address1?: string;
    /**
     * Used for additional address information. For example: _Attention: Accounts Payable_ Optional field.  For Payouts: This field may be sent only for FDC Compass.  #### Atos This field must not contain colons (:).  #### CyberSource through VisaNet **Important** When you populate `orderInformation.billTo.address1` and `orderInformation.billTo.address2`, CyberSource through VisaNet concatenates the two values. If the concatenated value exceeds 40 characters, CyberSource through VisaNet truncates the value at 40 characters before sending it to Visa and the issuing bank. Truncating this value affects AVS results and therefore might also affect risk decisions and chargebacks. Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  #### Chase Paymentech Solutions, FDC Compass, and TSYS Acquiring Solutions This value is used for AVS.  #### FDMS Nashville `orderInformation.billTo.address1` and `orderInformation.billTo.address2` together cannot exceed 20 characters. String (20)  #### All Other Processors String (60)
     */
    address2?: string;
    /**
     * Payment card billing city.  #### Atos This field must not contain colons (:).  #### CyberSource through VisaNet Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  #### For Payouts: This field may be sent only for FDC Compass.  #### Chase Paymentech Solutions Optional field.  ####  Credit Mutuel-CIC Optional field.  #### OmniPay Direct Optional field.  #### SIX Optional field.  #### TSYS Acquiring Solutions Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.  #### Worldpay VAP Optional field.  #### All other processors Not used.
     */
    locality?: string;
    /**
     * State or province of the billing address. Use the [State, Province, and Territory Codes for the United States and Canada](https://developer.cybersource.com/library/documentation/sbc/quickref/states_and_provinces.pdf).  For Payouts: This field may be sent only for FDC Compass.  ##### CyberSource through VisaNet Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  #### Chase Paymentech Solutions Optional field.  ####  Credit Mutuel-CIC Optional field.  #### OmniPay Direct Optional field.  #### SIX Optional field.  #### TSYS Acquiring Solutions Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.  #### Worldpay VAP Optional field.  #### All other processors Not used.
     */
    administrativeArea?: string;
    /**
     * Postal code for the billing address. The postal code must consist of 5 to 9 digits.  When the billing country is the U.S., the 9-digit postal code must follow this format: [5 digits][dash][4 digits]  **Example** `12345-6789`  When the billing country is Canada, the 6-digit postal code must follow this format: [alpha][numeric][alpha][space][numeric][alpha][numeric]  **Example** `A1B 2C3`  **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  #### For Payouts:  This field may be sent only for FDC Compass.  #### American Express Direct Before sending the postal code to the processor, CyberSource removes all nonalphanumeric characters and, if the remaining value is longer than nine characters, truncates the value starting from the right side.  #### Atos This field must not contain colons (:).  #### CyberSource through VisaNet Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  #### FDMS Nashville Required if `pointOfSaleInformation.entryMode=keyed` and the address is in the U.S. or Canada. Optional if `pointOfSaleInformation.entryMode=keyed` and the address is **not** in the U.S. or Canada. Not used if swiped.  #### RBS WorldPay Atlanta: For best card-present keyed rates, send the postal code if `pointOfSaleInformation.entryMode=keyed`.  #### TSYS Acquiring Solutions Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.  #### All other processors: Optional field.
     */
    postalCode?: string;
    /**
     * Name of the customer’s company.  **CyberSource through VisaNet** Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  For processor-specific information, see the `company_name` field in [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
     */
    company?: string;
    /**
     * Customer's email address, including the full domain name.  #### CyberSource through VisaNet Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  For processor-specific information, see the `customer_email` request-level field description in [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)  #### Invoicing Email address for the customer for sending the invoice. If the invoice is in SENT status and email is updated, the old email customer payment link won't work and you must resend the invoice with the new payment link.  #### Chase Paymentech Solutions Optional field.  ####  Credit Mutuel-CIC Optional field.  #### OmniPay Direct Optional field.  #### SIX Optional field.  #### TSYS Acquiring Solutions Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.  #### Worldpay VAP Optional field.  #### All other processors Not used.
     */
    email?: string;
    /**
     * Payment card billing country. Use the two-character [ISO Standard Country Codes](http://apps.cybersource.com/library/documentation/sbc/quickref/countries_alpha_list.pdf).  #### CyberSource through VisaNet Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  #### Chase Paymentech Solutions Optional field.  ####  Credit Mutuel-CIC Optional field.  #### OmniPay Direct Optional field.  #### SIX Optional field.  #### TSYS Acquiring Solutions Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.  #### Worldpay VAP Optional field.  #### All other processors Not used.
     */
    country?: string;
    /**
     * Title.
     */
    title?: string;
    /**
     * Customer’s phone number.  It is recommended that you include the country code when the order is from outside the U.S.  #### Chase Paymentech Solutions Optional field.  ####  Credit Mutuel-CIC Optional field.  #### CyberSource through VisaNet Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  #### For Payouts: This field may be sent only for FDC Compass.  #### OmniPay Direct Optional field.  #### SIX Optional field.  #### TSYS Acquiring Solutions Optional field.  #### Worldpay VAP Optional field.  #### All other processors Not used.
     */
    phoneNumber?: string;
  }
  export interface TssV2TransactionsGet200ResponseOrderInformationInvoiceDetails {
    /**
     * Transaction identifier that is generated. You have the option of printing the sales slip number on the receipt. This field is supported only on Cybersource through Visanet and JCN gateway.  Optional field.  #### Card Present processing message If you included this field in the request, the returned value is the value that you sent in the request. If you did not include this field in the request, the system generated this value for you.  The difference between this reply field and the `processorInformation.systemTraceAuditNumber` field is that the system generates the system trace audit number (STAN), and you must print the receipt number on the receipt; whereas you can generate the sales slip number, and you can choose to print the sales slip number on the receipt.
     */
    salesSlipNumber?: number;
  }
  export interface TssV2TransactionsGet200ResponseOrderInformationLineItems {
    /**
     * Type of product. This value is used to determine the category that the product is in: electronic, handling, physical, service, or shipping. The default value is **default**.  For a payment, when you set this field to a value other than default or any of the values related to shipping and handling, below fields _quantity_, _productName_, and _productSKU_ are required.
     */
    productCode?: string;
    /**
     * For PAYMENT and CAPTURE API, this field is required when above _productCode_ is not **default** or one of the values related to shipping and handling.
     */
    productName?: string;
    /**
     * Identification code for the product. For Payment and Capture APIs, this field is required when above `productCode` is not **default** or one of the values related to shipping and/or handling.
     */
    productSku?: string;
    /**
     * Total tax to apply to the product. This value cannot be negative. The tax amount and the offer amount must be in the same currency. The tax amount field is additive.  The following example uses a two-exponent currency such as USD:  1. You include each line item in your request.     - 1st line item has `amount=10.00`, `quantity=1`, and `taxAmount=0.80`     - 2nd line item has `amount=20.00`, `quantity=1`, and `taxAmount=1.60` 2. The total amount authorized will be 32.40, not 30.00 with 2.40 of tax included.  This field is frequently used for Level II and Level III transactions.  For details, see `tax_amount` field description in [Level II and Level III Processing Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/Level_2_3_SCMP_API/html/)
     */
    taxAmount?: string;
    /**
     * For a payment or capture, this field is required when _productCode_ is not **default** or one of the values related to shipping and handling.
     */
    quantity?: number;
    /**
     * Per-item price of the product. This value cannot be negative. You can include a decimal point (.), but you cannot include any other special characters. CyberSource truncates the amount to the correct number of decimal places.  For processor-specific information, see the amount field in [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
     */
    unitPrice?: string;
    /**
     * The description for this field is not available.
     */
    fulfillmentType?: string;
  }
  export interface TssV2TransactionsGet200ResponseOrderInformationShipTo {
    /**
     * First name of the recipient.  #### Litle Maximum length: 25  #### All other processors Maximum length: 60  Optional field.
     */
    firstName?: string;
    /**
     * Last name of the recipient.  #### Litle Maximum length: 25  #### All other processors Maximum length: 60  Optional field.
     */
    lastName?: string;
    /**
     * First line of the shipping address.  Required field for authorization if any shipping address information is included in the request; otherwise, optional.  #### Tax Calculation Optional field for U.S. and Canadian taxes. Not applicable to international and value added taxes. Billing address objects will be used to determine the cardholder’s location when shipTo objects are not present.
     */
    address1?: string;
    /**
     * Second line of the shipping address.  Optional field.  #### Tax Calculation Optional field for U.S. and Canadian taxes. Not applicable to international and value added taxes. Billing address objects will be used to determine the cardholder’s location when shipTo objects are not present.
     */
    address2?: string;
    /**
     * City of the shipping address.  Required field for authorization if any shipping address information is included in the request and shipping to the U.S. or Canada; otherwise, optional.  #### Tax Calculation Optional field for U.S. and Canadian taxes. Not applicable to international and value added taxes. Billing address objects will be used to determine the cardholder’s location when shipTo objects are not present.
     */
    locality?: string;
    /**
     * State or province of the billing address. Use the [State, Province, and Territory Codes for the United States and Canada](https://developer.cybersource.com/library/documentation/sbc/quickref/states_and_provinces.pdf).  For Payouts: This field may be sent only for FDC Compass.  ##### CyberSource through VisaNet Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  #### Chase Paymentech Solutions Optional field.  ####  Credit Mutuel-CIC Optional field.  #### OmniPay Direct Optional field.  #### SIX Optional field.  #### TSYS Acquiring Solutions Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.  #### Worldpay VAP Optional field.  #### All other processors Not used.
     */
    administrativeArea?: string;
    /**
     * Postal code for the shipping address. The postal code must consist of 5 to 9 digits.  Required field for authorization if any shipping address information is included in the request and shipping to the U.S. or Canada; otherwise, optional.  When the billing country is the U.S., the 9-digit postal code must follow this format: [5 digits][dash][4 digits]  Example 12345-6789  When the billing country is Canada, the 6-digit postal code must follow this format: [alpha][numeric][alpha][space][numeric][alpha][numeric]  Example A1B 2C3  #### American Express Direct Before sending the postal code to the processor, all nonalphanumeric characters are removed and, if the remaining value is longer than nine characters, the value is truncated starting from the right side. #### Tax Calculation Optional field for U.S. and Canadian taxes. Not applicable to international and value added taxes. Billing address objects will be used to determine the cardholder’s location when shipTo objects are not present.
     */
    postalCode?: string;
    /**
     * Name of the customer’s company.  For processor-specific information, see the company_name field in [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
     */
    company?: string;
    /**
     * Country of the shipping address. Use the two-character [ISO Standard Country Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/countries_alpha_list.pdf)  Required field for authorization if any shipping address information is included in the request; otherwise, optional.  #### Tax Calculation Optional field for U.S., Canadian, international tax, and value added taxes. Billing address objects will be used to determine the cardholder’s location when shipTo objects are not present.
     */
    country?: string;
    /**
     * Phone number associated with the shipping address.
     */
    phoneNumber?: string;
  }
  export interface TssV2TransactionsGet200ResponseOrderInformationShippingDetails {
    /**
     * Boolean that indicates whether the customer requested gift wrapping for this purchase. This field can contain one of the following values: - true: The customer requested gift wrapping. - false: The customer did not request gift wrapping.
     */
    giftWrap?: boolean;
    /**
     * Shipping method for the product. Possible values:   - `lowcost`: Lowest-cost service  - `sameday`: Courier or same-day service  - `oneday`: Next-day or overnight service  - `twoday`: Two-day service  - `threeday`: Three-day service  - `pickup`: Store pick-up  - `other`: Other shipping method  - `none`: No shipping method because product is a service or subscription
     */
    shippingMethod?: string;
  }
  export interface TssV2TransactionsGet200ResponsePaymentInformation {
    paymentType?: TssV2TransactionsGet200ResponsePaymentInformationPaymentType;
    customer?: Riskv1authenticationsetupsPaymentInformationCustomer;
    card?: TssV2TransactionsGet200ResponsePaymentInformationCard;
    invoice?: TssV2TransactionsGet200ResponsePaymentInformationInvoice;
    bank?: TssV2TransactionsGet200ResponsePaymentInformationBank;
    accountFeatures?: TssV2TransactionsGet200ResponsePaymentInformationAccountFeatures;
  }
  export interface TssV2TransactionsGet200ResponsePaymentInformationAccountFeatures {
    /**
     * Remaining balance on the account.  Returned by authorization service.  #### PIN debit Remaining balance on the prepaid card.  Returned by PIN debit purchase.
     */
    balanceAmount?: string;
    /**
     * Remaining balance on the account.  Returned by authorization service.  #### PIN debit Remaining balance on the prepaid card.  Returned by PIN debit purchase.
     */
    previousBalanceAmount?: string;
    /**
     * Currency of the remaining balance on the account. For the possible values, see the [ISO Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf)  Returned by authorization service.  #### PIN debit Currency of the remaining balance on the prepaid card.  Returned by PIN debit purchase.
     */
    currency?: string;
  }
  export interface TssV2TransactionsGet200ResponsePaymentInformationBank {
    /**
     * Bank routing number. This is also called the transit number.  For details, see `ecp_rdfi` field description in the [Electronic Check Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/EChecks_SCMP_API/html/)
     */
    routingNumber?: string;
    /**
     * Code used to identify the branch of the customer’s bank. Required for some countries if you do not or are not allowed to provide the IBAN. Use this field only when scoring a direct debit transaction.  For all possible values, see the `branch_code` field description in the _Decision Manager Using the SCMP API Developer Guide_ on the [CyberSource Business Center.](https://ebc2.cybersource.com/ebc2/) Click **Decision Manager** > **Documentation** > **Guides** > _Decision Manager Using the SCMP API Developer Guide_ (PDF link).
     */
    branchCode?: string;
    /**
     * Bank’s SWIFT code. You can use this field only when scoring a direct debit transaction. Required only for crossborder transactions.  For all possible values, see the `bank_swiftcode` field description in the _Decision Manager Using the SCMP API Developer Guide_ on the [CyberSource Business Center.](https://ebc2.cybersource.com/ebc2/) Click **Decision Manager** > **Documentation** > **Guides** > _Decision Manager Using the SCMP API Developer Guide_ (PDF link).
     */
    swiftCode?: string;
    /**
     * Country-specific code used to identify the customer’s bank. Required for some countries if you do not or are not allowed to provide the IBAN instead. You can use this field only when scoring a direct debit transaction.  For all possible values, see the `bank_code` field description in the _Decision Manager Using the SCMP API Developer Guide_ on the [CyberSource Business Center.](https://ebc2.cybersource.com/ebc2/) Click **Decision Manager** > **Documentation** > **Guides** > _Decision Manager Using the SCMP API Developer Guide_ (PDF link).
     */
    bankCode?: string;
    /**
     * International Bank Account Number (IBAN) for the bank account. For some countries you can provide this number instead of the traditional bank account information. You can use this field only when scoring a direct debit transaction.  For all possible values, see the `bank_iban` field description in the _Decision Manager Using the SCMP API Developer Guide_ on the [CyberSource Business Center.](https://ebc2.cybersource.com/ebc2/) Click **Decision Manager** > **Documentation** > **Guides** > _Decision Manager Using the SCMP API Developer Guide_ (PDF link).
     */
    iban?: string;
    account?: TssV2TransactionsGet200ResponsePaymentInformationBankAccount;
    mandate?: TssV2TransactionsGet200ResponsePaymentInformationBankMandate;
  }
  export interface TssV2TransactionsGet200ResponsePaymentInformationBankAccount {
    /**
     * Last four digits of the customer’s payment account number.
     */
    suffix?: string;
    /**
     * Bank Identification Number (BIN). This is the initial four to six numbers on a credit card account number.
     */
    prefix?: string;
    /**
     * Check number.  Chase Paymentech Solutions - Optional. CyberSource ACH Service - Not used. RBS WorldPay Atlanta - Optional on debits. Required on credits. TeleCheck - Strongly recommended on debit requests. Optional on credits.
     */
    checkNumber?: string;
    /**
     * Account type.  Possible values:  - **C**: Checking.  - **G**: General ledger. This value is supported only on Wells Fargo ACH.  - **S**: Savings (U.S. dollars only).  - **X**: Corporate checking (U.S. dollars only).
     */
    type?: string;
    /**
     * Name used on the bank account. You can use this field only when scoring a direct debit transaction
     */
    name?: string;
    /**
     * Code used to validate the customer’s account number. Required for some countries if you do not or are not allowed to provide the IBAN instead. You may use this field only when scoring a direct debit transaction.  For all possible values, see the `bank_check_digit` field description in the _Decision Manager Using the SCMP API Developer Guide_ on the [CyberSource Business Center.](https://ebc2.cybersource.com/ebc2/) Click **Decision Manager** > **Documentation** > **Guides** > _Decision Manager Using the SCMP API Developer Guide_ (PDF link).
     */
    checkDigit?: string;
    /**
     * Identifier for the bank that provided the customer’s encoded account number.  To obtain the bank identifier, contact your processor.  For details, see `account_encoder_id` request-level field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
     */
    encoderId?: string;
  }
  export interface TssV2TransactionsGet200ResponsePaymentInformationBankMandate {
    /**
     * Unique value generated by CyberSource that identifies the transaction. Use this value to identify transactions in the Collections Report, which provides settlement information.  For details, see the `direct_debit_reconciliation_reference_number` reply field description in [Ingenico ePayments Developer Guide For Direct Debits.](https://apps.cybersource.com/library/documentation/dev_guides/Ingenico_ePayments_Dev/html/)
     */
    referenceNumber?: string;
    /**
     * Whether the direct debit is the first or last direct debit associated with the mandate, or one in between. Required only for the United Kingdom. Possible values: - `001`: First direct debit associated with this mandate. Use this value if a one-time direct debit). - `002`: Subsequent direct debits associated with this mandate. - `003`: Last direct debit associated with this mandate.  For details, see the `direct_debit_recurring_type` request field description in [Ingenico ePayments Developer Guide For Direct Debits.](https://apps.cybersource.com/library/documentation/dev_guides/Ingenico_ePayments_Dev/html/)
     */
    recurringType?: string;
    /**
     * The mandate ID. Required only for the United Kingdom.  For details, see the `mandate_id` request field description in [Ingenico ePayments Developer Guide For Direct Debits.](https://apps.cybersource.com/library/documentation/dev_guides/Ingenico_ePayments_Dev/html/)
     */
    id?: string;
  }
  export interface TssV2TransactionsGet200ResponsePaymentInformationCard {
    /**
     * Last four digits of the cardholder’s account number. This field is included in the reply message when the client software that is installed on the POS terminal uses the token management service (TMS) to retrieve tokenized payment details.  You must contact customer support to have your account enabled to receive these fields in the credit reply message.  #### PIN debit This field is returned only for tokenized transactions. You can use this value on the receipt that you give to the cardholder.  Returned by PIN debit credit and PIN debit purchase.  This field is supported only by the following processors: - American Express Direct - Credit Mutuel-CIC - FDC Nashville Global - OmniPay Direct - SIX
     */
    suffix?: string;
    /**
     * Bank Identification Number (BIN). This is the initial four to six numbers on a credit card account number.
     */
    prefix?: string;
    /**
     * Two-digit month in which the payment card expires.  Format: `MM`.  Valid values: `01` through `12`. Leading 0 is required.  #### Barclays and Streamline For Maestro (UK Domestic) and Maestro (International) cards on Barclays and Streamline, this must be a valid value (`01` through `12`) but is not required to be a valid expiration date. In other words, an expiration date that is in the past does not cause CyberSource to reject your request. However, an invalid expiration date might cause the issuer to reject your request.  #### Encoded Account Numbers For encoded account numbers (_type_=039), if there is no expiration date on the card, use `12`.  #### FDMS Nashville Required field.  #### GPX Required if `pointOfSaleInformation.entryMode=keyed`. However, this field is optional if your account is configured for relaxed requirements for address data and expiration date. **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  #### All other processors Required if `pointOfSaleInformation.entryMode=keyed`. However, this field is optional if your account is configured for relaxed requirements for address data and expiration date. **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
     */
    expirationMonth?: string;
    /**
     * Four-digit year in which the payment card expires.  Format: `YYYY`.  #### Barclays and Streamline For Maestro (UK Domestic) and Maestro (International) cards on Barclays and Streamline, this must be a valid value (`1900` through `3000`) but is not required to be a valid expiration date. In other words, an expiration date that is in the past does not cause CyberSource to reject your request. However, an invalid expiration date might cause the issuer to reject your request.  #### Encoded Account Numbers For encoded account numbers (**_type_**`=039`), if there is no expiration date on the card, use `2021`.  #### FDMS Nashville Required field.  #### FDC Nashville Global and FDMS South You can send in 2 digits or 4 digits. If you send in 2 digits, they must be the last 2 digits of the year.  #### GPX Required if `pointOfSaleInformation.entryMode=keyed`. However, this field is optional if your account is configured for relaxed requirements for address data and expiration date. **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  #### All other processors Required if `pointOfSaleInformation.entryMode=keyed`. However, this field is optional if your account is configured for relaxed requirements for address data and expiration date. **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
     */
    expirationYear?: string;
    /**
     * Month of the start of the Maestro (UK Domestic) card validity period. Do not include the field, even with a blank value, if the card is not a Maestro (UK Domestic) card. `Format: MM`. Possible values: 01 through 12.  **Note** The start date is not required for Maestro (UK Domestic) transactions.
     */
    startMonth?: string;
    /**
     * Year of the start of the Maestro (UK Domestic) card validity period. Do not include the field, even with a blank value, if the card is not a Maestro (UK Domestic) card. `Format: YYYY`.  **Note** The start date is not required for Maestro (UK Domestic) transactions.
     */
    startYear?: string;
    /**
     * Number of times a Maestro (UK Domestic) card has been issued to the account holder. The card might or might not have an issue number. The number can consist of one or two digits, and the first digit might be a zero. When you include this value in your request, include exactly what is printed on the card. A value of 2 is different than a value of 02. Do not include the field, even with a blank value, if the card is not a Maestro (UK Domestic) card.  **Note** The issue number is not required for Maestro (UK Domestic) transactions.
     */
    issueNumber?: string;
    /**
     * Three-digit value that indicates the card type.  **IMPORTANT** It is strongly recommended that you include the card type field in request messages even if it is optional for your processor and card type. Omitting the card type can cause the transaction to be processed with the wrong card type.  Possible values: - `001`: Visa. For card-present transactions on all processors except SIX, the Visa Electron card type is processed the same way that the Visa debit card is processed. Use card type value `001` for Visa Electron. - `002`: Mastercard, Eurocard[^1], which is a European regional brand of Mastercard. - `003`: American Express - `004`: Discover - `005`: Diners Club - `006`: Carte Blanche[^1] - `007`: JCB[^1] - `014`: Enroute[^1] - `021`: JAL[^1] - `024`: Maestro (UK Domestic)[^1] - `031`: Delta[^1]: Use this value only for Ingenico ePayments. For other processors, use `001` for all Visa card types. - `033`: Visa Electron[^1]. Use this value only for Ingenico ePayments and SIX. For other processors, use `001` for all Visa card types. - `034`: Dankort[^1] - `036`: Cartes Bancaires[^1] - `037`: Carta Si[^1] - `039`: Encoded account number[^1] - `040`: UATP[^1] - `042`: Maestro (International)[^1] - `050`: Hipercard[^2,3] - `051`: Aura - `054`: Elo[^3] - `062`: China UnionPay  [^1]: For this card type, you must include the `paymentInformation.card.type` or `paymentInformation.tokenizedCard.type` field in your request for an authorization or a stand-alone credit. [^2]: For this card type on Cielo 3.0, you must include the `paymentInformation.card.type` or `paymentInformation.tokenizedCard.type` field in a request for an authorization or a stand-alone credit. This card type is not supported on Cielo 1.5. [^3]: For this card type on Getnet and Rede, you must include the `paymentInformation.card.type` or `paymentInformation.tokenizedCard.type` field in a request for an authorization or a stand-alone credit.  #### Used by **Authorization** Required for Carte Blanche and JCB. Optional for all other card types.  #### Card Present reply This field is included in the reply message when the client software that is installed on the POS terminal uses the token management service (TMS) to retrieve tokenized payment details. You must contact customer support to have your account enabled to receive these fields in the credit reply message.  Returned by the Credit service.  This reply field is only supported by the following processors: - American Express Direct - Credit Mutuel-CIC - FDC Nashville Global - OmniPay Direct - SIX  #### GPX This field only supports transactions from the following card types: - Visa - Mastercard - AMEX - Discover - Diners - JCB - Union Pay International
     */
    type?: string;
    /**
     * Identifier for the issuing bank that provided the customer’s encoded account number. Contact your processor for the bank’s ID.
     */
    accountEncoderId?: string;
    /**
     * Flag that specifies the type of account associated with the card. The cardholder provides this information during the payment process.  #### Cielo and Comercio Latino  Possible values:   - CREDIT: Credit card  - DEBIT: Debit card  This field is required for:  - Debit transactions on Cielo and Comercio Latino.  - Transactions with Brazilian-issued cards on CyberSource through VisaNet.  **Note** The value for this field corresponds to the following data in the TC 33 capture file5: - Record: CP07 TCR0 - Position: 51 - Field: Combination Card Transaction Identifier  This field is supported only for Mastercard transactions in Brazil on CyberSource through VisaNet.
     */
    useAs?: string;
  }
  export interface TssV2TransactionsGet200ResponsePaymentInformationInvoice {
    /**
     * Invoice Number.
     */
    number?: string;
    /**
     * Barcode Number.
     */
    barcodeNumber?: string;
    /**
     * Expiration Date.
     */
    expirationDate?: string;
  }
  export interface TssV2TransactionsGet200ResponsePaymentInformationPaymentType {
    /**
     * A Payment Type is an agreed means for a payee to receive legal tender from a payer. The way one pays for a commercial financial transaction. Examples: Card, Bank Transfer, Digital, Direct Debit. Possible values: - `CARD` (use this for a PIN debit transaction) - `CHECK` (use this for all eCheck payment transactions - ECP Debit, ECP Follow-on Credit, ECP StandAlone Credit)
     */
    name?: string;
    /**
     * Indicates the payment type used in this payment transaction. Example: credit card, check
     */
    type?: string;
    /**
     * Indicates the payment method used in this payment transaction.
     */
    method?: string;
  }
  export interface TssV2TransactionsGet200ResponsePointOfSaleInformation {
    /**
     * Identifier for the terminal at your retail location. You can define this value yourself, but consult the processor for requirements.  #### CyberSource through VisaNet A list of all possible values is stored in your CyberSource account. If terminal ID validation is enabled for your CyberSource account, the value you send for this field is validated against the list each time you include the field in a request. To enable or disable terminal ID validation, contact CyberSource Customer Support.  When you do not include this field in a request, CyberSource uses the default value that is defined in your CyberSource account.  #### FDC Nashville Global To have your account configured to support this field, contact CyberSource Customer Support. This value must be a value that FDC Nashville Global issued to you.  #### For Payouts This field is applicable for CyberSource through VisaNet.  #### GPX Identifier for the terminal at your retail location. A list of all possible values is stored in your account. If terminal ID validation is enabled for your account, the value you send for this field is validated against the list each time you include the field in a request. To enable or disable terminal ID validation, contact customer support.  When you do not include this field in a request, the default value that is defined in your account is used.  Optional for authorizations.  #### Used by **Authorization** Optional for the following processors. When you do not include this field in a request, the default value that is defined in your account is used.   - American Express Direct   - Credit Mutuel-CIC   - FDC Nashville Global   - SIX - Chase Paymentech Solutions: Optional field. If you include this field in your request, you must also include `pointOfSaleInformation.catLevel`. - FDMS Nashville: The default value that is defined in your account is used. - GPX - OmniPay Direct: Optional field.  For the following processors, this field is not used. - GPN - JCN Gateway - RBS WorldPay Atlanta - TSYS Acquiring Solutions - Worldpay VAP  #### Card Present reply Terminal identifier assigned by the acquirer. This value must be printed on the receipt.
     */
    terminalId?: string;
    /**
     * Method of entering payment card information into the POS terminal. Possible values:   - `contact`: Read from direct contact with chip card.  - `contactless`: Read from a contactless interface using chip data.  - `keyed`: Manually keyed into POS terminal. This value is not supported on OmniPay Direct.  - `msd`: Read from a contactless interface using magnetic stripe data (MSD). This value is not supported on OmniPay Direct.  - `swiped`: Read from credit card magnetic stripe.  The `contact`, `contactless`, and `msd` values are supported only for EMV transactions.  #### Used by **Authorization** Required field.  #### Card Present Card present information about EMV applies only to credit card processing and PIN debit processing. All other card present information applies only to credit card processing.  #### PIN debit Required for a PIN debit purchase and a PIN debit credit request.
     */
    entryMode?: string;
    /**
     * POS terminal’s capability. Possible values:   - `1`: Terminal has a magnetic stripe reader only.  - `2`: Terminal has a magnetic stripe reader and manual entry capability.  - `3`: Terminal has manual entry capability only.  - `4`: Terminal can read chip cards.  - `5`: Terminal can read contactless chip cards; cannot use contact to read chip cards.  For an EMV transaction, the value of this field must be `4` or `5`.  #### PIN debit Required for PIN debit purchase and PIN debit credit request.  #### Used by **Authorization** Required for the following processors: - American Express Direct - Chase Paymentech Solutions - Credit Mutuel-CIC - FDC Nashville Global - FDMS Nashville - OmniPay Direct - SIX - Worldpay VAP  Optional for the following processors: - CyberSource through VisaNet - GPN - GPX - JCN Gateway - RBS WorldPay Atlanta - TSYS Acquiring Solutions
     */
    terminalCapability?: number;
    emv?: Ptsv2paymentsidreversalsPointOfSaleInformationEmv;
  }
  export interface TssV2TransactionsGet200ResponseProcessingInformation {
    /**
     * Type of digital payment solution for the transaction. Possible Values:   - `visacheckout`: Visa Checkout. This value is required for Visa Checkout transactions. For details, see `payment_solution` field description in [Visa Checkout Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/VCO_SCMP_API/html/)  - `001`: Apple Pay.  - `004`: Cybersource In-App Solution.  - `005`: Masterpass. This value is required for Masterpass transactions on OmniPay Direct. For details, see \"Masterpass\" in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  - `006`: Android Pay.  - `007`: Chase Pay.  - `008`: Samsung Pay.  - `012`: Google Pay.
     */
    paymentSolution?: string;
    /**
     * Type of transaction. Some payment card companies use this information when determining discount rates.  #### Used by **Authorization** Required payer authentication transactions; otherwise, optional. **Credit** Required for standalone credits on Chase Paymentech solutions; otherwise, optional. Only `internet`, `moto`, `install`, `recurring`, and `recurring_internet` are valid values.  #### Ingenico ePayments When you omit this field for Ingenico ePayments, the processor uses the default transaction type they have on file for you instead of the default value (listed in Appendix I, \"Commerce Indicators,\" on page 441.)  #### Payer Authentication Transactions For the possible values and requirements, see \"Payer Authentication,\" page 195.  #### Other Types of Transactions See Appendix I, \"Commerce Indicators,\" on page 441.  #### Card Present You must set this field to `retail`. This field is required for a card-present transaction.
     */
    commerceIndicator?: string;
    businessApplicationId?: string;
    authorizationOptions?: TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptions;
    bankTransferOptions?: TssV2TransactionsGet200ResponseProcessingInformationBankTransferOptions;
    japanPaymentOptions?: TssV2TransactionsGet200ResponseProcessingInformationJapanPaymentOptions;
  }
  export interface TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptions {
    /**
     * Authorization type. Possible values:   - `AUTOCAPTURE`: automatic capture.  - `STANDARDCAPTURE`: standard capture.  - `VERBAL`: forced capture. Include it in the payment request for a forced capture. Include it in the capture request for a verbal payment.  #### Asia, Middle East, and Africa Gateway; Cielo; Comercio Latino; and CyberSource Latin American Processing Set this field to `AUTOCAPTURE` and include it in a bundled request to indicate that you are requesting an automatic capture. If your account is configured to enable automatic captures, set this field to `STANDARDCAPTURE` and include it in a standard authorization or bundled request to indicate that you are overriding an automatic capture. For more information, see the `auth_type` field description in [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  #### Forced Capture Set this field to `VERBAL` and include it in the authorization request to indicate that you are performing a forced capture; therefore, you receive the authorization code outside the CyberSource system.  #### Verbal Authorization Set this field to `VERBAL` and include it in the capture request to indicate that the request is for a verbal authorization. For more information, see \"Verbal Authorizations\" in [Credit Card Services Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html).
     */
    authType?: string;
  }
  export interface TssV2TransactionsGet200ResponseProcessingInformationBankTransferOptions {
    /**
     * Specifies the authorization method for the transaction.  Possible values: - `ARC`: account receivable conversion - `CCD`: corporate cash disbursement - `POP`: point of purchase conversion - `PPD`: prearranged payment and deposit entry - `TEL`: telephone-initiated entry - `WEB`: internet-initiated entry
     */
    secCode?: string;
  }
  export interface TssV2TransactionsGet200ResponseProcessingInformationJapanPaymentOptions {
    /**
     * This value is a 2-digit code indicating the payment method. Use Payment Method Code value that applies to the tranasction. - 10 (One-time payment) - 21, 22, 23, 24  (Bonus(one-time)payment) - 61 (Installment payment) - 31, 32, 33, 34  (Integrated (Bonus + Installment)payment) - 80 (Revolving payment)
     */
    paymentMethod?: string;
    /**
     * Unique Japan Credit Card Association (JCCA) terminal identifier.  The difference between this field and the `pointOfSaleInformation.terminalID` field is that you can define `pointOfSaleInformation.terminalID`, but `processingInformation.japanPaymentOptions.terminalId` is defined by the JCCA and is used only in Japan.  This field is supported only on CyberSource through VisaNet and JCN Gateway.  Optional field.
     */
    terminalId?: string;
    /**
     * Business name in Japanese characters. This field is supported only on JCN Gateway and for the Sumitomo Mitsui Card Co. acquirer on CyberSource through VisaNet.
     */
    businessName?: string;
    /**
     * Business name in Katakana characters. This field is supported only on JCN Gateway and for the Sumitomo Mitsui Card Co. acquirer on CyberSource through VisaNet.
     */
    businessNameKatakana?: string;
  }
  export interface TssV2TransactionsGet200ResponseProcessorInformation {
    processor?: TssV2TransactionsGet200ResponseProcessorInformationProcessor;
    /**
     * Network transaction identifier (TID). You can use this value to identify a specific transaction when you are discussing the transaction with your processor. Not all processors provide this value.  Returned by the authorization service.  #### PIN debit Transaction identifier generated by the processor.  Returned by PIN debit credit.  #### GPX Processor transaction ID.  #### Cielo For Cielo, this value is the non-sequential unit (NSU) and is supported for all transactions. The value is generated by Cielo or the issuing bank.  #### Comercio Latino For Comercio Latino, this value is the proof of sale or non-sequential unit (NSU) number generated by the acquirers Cielo and Rede, or the issuing bank.  #### CyberSource through VisaNet and GPN For details about this value for CyberSource through VisaNet and GPN, see \"Network Transaction Identifiers\" in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  #### Moneris This value identifies the transaction on a host system. It contains the following information: - Terminal used to process the transaction - Shift during which the transaction took place - Batch number - Transaction number within the batch You must store this value. If you give the customer a receipt, display this value on the receipt.  **Example** For the value 66012345001069003: - Terminal ID = 66012345 - Shift number = 001 - Batch number = 069 - Transaction number = 003
     */
    transactionId?: string;
    /**
     * The description for this field is not available.
     */
    networkTransactionId?: string;
    /**
     * Response ID sent from the processor.
     */
    responseId?: string;
    /**
     * The description for this field is not available.
     */
    providerTransactionId?: string;
    /**
     * Authorization code. Returned only when the processor returns this value.  The length of this value depends on your processor.  Returned by authorization service.  #### PIN debit Authorization code that is returned by the processor.  Returned by PIN debit credit.  #### Elavon Encrypted Account Number Program The returned value is OFFLINE.  #### TSYS Acquiring Solutions The returned value for a successful zero amount authorization is 000000.
     */
    approvalCode?: string;
    /**
     * For most processors, this is the error message sent directly from the bank. Returned only when the processor returns this value.  **Important** Do not use this field to evaluate the result of the authorization.  #### PIN debit Response value that is returned by the processor or bank. **Important** Do not use this field to evaluate the results of the transaction request.  Returned by PIN debit credit, PIN debit purchase, and PIN debit reversal.  #### AIBMS If this value is `08`, you can accept the transaction if the customer provides you with identification.  #### Atos This value is the response code sent from Atos and it might also include the response code from the bank. Format: `aa,bb` with the two values separated by a comma and where: - `aa` is the two-digit error message from Atos. - `bb` is the optional two-digit error message from the bank.  #### Comercio Latino This value is the status code and the error or response code received from the processor separated by a colon. Format: [status code]:E[error code] or [status code]:R[response code] Example `2:R06`  #### JCN Gateway Processor-defined detail error code. The associated response category code is in the `processorInformation.responseCategoryCode` field. String (3)
     */
    responseCode?: string;
    avs?: PtsV2PaymentsPost201ResponseProcessorInformationAvs;
    cardVerification?: Riskv1decisionsProcessorInformationCardVerification;
    achVerification?: PtsV2PaymentsPost201ResponseProcessorInformationAchVerification;
    electronicVerificationResults?: TssV2TransactionsGet200ResponseProcessorInformationElectronicVerificationResults;
    /**
     * This field is returned only for **American Express Direct** and **CyberSource through VisaNet**. Returned by authorization and incremental authorization services.  #### American Express Direct  System trace audit number (STAN). This value identifies the transaction and is useful when investigating a chargeback dispute.  #### CyberSource through VisaNet  System trace number that must be printed on the customer’s receipt.
     */
    systemTraceAuditNumber?: string;
    /**
     * Used by Visa only and contains the response source/reason code that identifies the source of the response decision.
     */
    responseCodeSource?: string;
  }
  export interface TssV2TransactionsGet200ResponseProcessorInformationElectronicVerificationResults {
    /**
     * Mapped Electronic Verification response code for the customer’s email address.  For details, see `auth_ev_email` field description in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
     */
    email?: string;
    /**
     * Raw Electronic Verification response code from the processor for the customer’s email address.
     */
    emailRaw?: string;
    /**
     * Mapped Electronic Verification response code for the customer’s name.
     */
    name?: string;
    /**
     * Raw Electronic Verification response code from the processor for the customer’s name.
     */
    nameRaw?: string;
    /**
     * Mapped Electronic Verification response code for the customer’s phone number.  For details, see `auth_ev_phone_number` field description in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
     */
    phoneNumber?: string;
    /**
     * Raw Electronic Verification response code from the processor for the customer’s phone number.
     */
    phoneNumberRaw?: string;
    /**
     * Mapped Electronic Verification response code for the customer’s street address.  For details, see `auth_ev_street` field description in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
     */
    street?: string;
    /**
     * Raw Electronic Verification response code from the processor for the customer’s street address.
     */
    streetRaw?: string;
    /**
     * Mapped Electronic Verification response code for the customer’s postal code.  For details, see `auth_ev_postal_code` field description in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
     */
    postalCode?: string;
    /**
     * Raw Electronic Verification response code from the processor for the customer’s postal code.
     */
    postalCodeRaw?: string;
  }
  export interface TssV2TransactionsGet200ResponseProcessorInformationProcessor {
    /**
     * Name of the Processor.
     */
    name?: string;
  }
  export interface TssV2TransactionsGet200ResponseRiskInformation {
    profile?: TssV2TransactionsGet200ResponseRiskInformationProfile;
    rules?: Array<TssV2TransactionsGet200ResponseRiskInformationRules>;
    passiveProfile?: TssV2TransactionsGet200ResponseRiskInformationProfile;
    passiveRules?: Array<TssV2TransactionsGet200ResponseRiskInformationRules>;
    score?: TssV2TransactionsGet200ResponseRiskInformationScore;
    /**
     * Time that the transaction was submitted in local time.
     */
    localTime?: string;
  }
  export interface TssV2TransactionsGet200ResponseRiskInformationProfile {
    /**
     * The name of the profile.
     */
    name?: string;
    /**
     * Decision returned by the profile; this field contains one of these values: - ACCEPT - REJECT - REVIEW
     */
    decision?: string;
  }
  /**
   * Names of one or more rules that were processed, and the decisions made by the rules.
   */
  export interface TssV2TransactionsGet200ResponseRiskInformationRules {
    /**
     * Description of the rule as it appears in the Profile Editor.
     */
    name?: string;
    /**
     * Summarizes the result for the rule according to the setting that you chose in the Profile Editor. This field can contain one of the following values: - `IGNORE` - `REVIEW` - `REJECT` - `ACCEPT`
     */
    decision?: string;
  }
  export interface TssV2TransactionsGet200ResponseRiskInformationScore {
    /**
     * Array of factor codes.
     */
    factorCodes?: Array<string>;
    /**
     * The description for this field is not available.
     */
    result?: number;
  }
  export interface TssV2TransactionsGet200ResponseSenderInformation {
    /**
     * Reference number generated by you that uniquely identifies the sender.
     */
    referenceNumber?: string;
  }
  export interface TssV2TransactionsPost201Response {
    /**
     * An unique identification number assigned by CyberSource to identify each Search request.
     */
    searchId?: string;
    /**
     * Indicates whether or not you want to save this search request for future use. The options are:  * `true` * `false` (default value)  If set to `true`, this field returns `searchID` in the response. You can use this value to retrieve the details of the saved search.
     */
    save?: boolean;
    /**
     * Name of this search. When `save` is set to `true`, this search is saved with this name.
     */
    name?: string;
    /**
     * Merchant’s time zone in ISO standard, using the TZ database format. For example: `America/Chicago`
     */
    timezone?: string;
    /**
     * String that contains the filters and variables for which you want to search. For information about supported field-filters and operators, see the [Query Filters]( https://developer.cybersource.com/api/developer-guides/dita-txn-search-details-rest-api-dev-guide-102718/txn_search_api/creating_txn_search_request.html) section of the Transaction Search Developer Guide.
     */
    query?: string;
    /**
     * Controls the starting point within the collection of results, which defaults to 0. The first item in the collection is retrieved by setting a zero offset.  For example, if you have a collection of 15 items to be retrieved from a resource and you specify limit=5, you can retrieve the entire set of results in 3 successive requests by varying the offset value like this:  `offset=0` `offset=5` `offset=10`  **Note:** If an offset larger than the number of results is provided, this will result in no embedded object being returned.
     */
    offset?: number;
    /**
     * Controls the maximum number of items that may be returned for a single request. The default is 20, the maximum is 2000.
     */
    limit?: number;
    /**
     * A comma separated list of the following form:  `submitTimeUtc:desc`
     */
    sort?: string;
    /**
     * Results for this page, this could be below the limit.
     */
    count?: number;
    /**
     * Total number of results.
     */
    totalCount?: number;
    /**
     * The status of the submitted transaction.
     */
    status?: string;
    httpCode?: number;
    /**
     * Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ` **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The `T` separates the date and the time. The `Z` indicates UTC.  Returned by authorization service.  #### PIN debit Time when the PIN debit credit, PIN debit purchase or PIN debit reversal was requested.  Returned by PIN debit credit, PIN debit purchase or PIN debit reversal.
     */
    submitTimeUtc?: string;
    embedded?: TssV2TransactionsPost201ResponseEmbedded;
    links?: PtsV2IncrementalAuthorizationPatch201ResponseLinks;
  }
  export interface TssV2TransactionsPost201ResponseEmbedded {
    /**
     * transaction search summary
     */
    transactionSummaries?: Array<TssV2TransactionsPost201ResponseEmbeddedTransactionSummaries>;
  }
  export interface TssV2TransactionsPost201ResponseEmbeddedApplicationInformation {
    /**
     * Indicates the reason why a request succeeded or failed and possible action to take if a request fails.  For details, see the appendix of reason codes in the documentation for the relevant payment method.
     */
    reasonCode?: string;
    /**
     * Indicates whether the service request was successful. Possible values:  - `-1`: An error occurred. - `0`: The request was declined. - `1`: The request was successful.
     */
    rCode?: string;
    /**
     * One-word description of the result of the application.
     */
    rFlag?: string;
    applications?: Array<TssV2TransactionsPost201ResponseEmbeddedApplicationInformationApplications>;
    /**
     * The description for this field is not available.
     */
    returnCode?: number;
  }
  export interface TssV2TransactionsPost201ResponseEmbeddedApplicationInformationApplications {
    /**
     * The name of the CyberSource transaction type (such as CC settlement or CC authorization) that the merchant wants to process in a transaction request. More than one transaction type can included in a transaction request. Each transaction type separately returns their own status, reasonCode, rCode, and rFlag messages.
     */
    name?: string;
    /**
     * 3-digit reason code that indicates why the customer profile payment succeeded or failed.
     */
    reasonCode?: string;
    /**
     * Indicates whether the service request was successful. Possible values:  - `-1`: An error occurred. - `0`: The request was declined. - `1`: The request was successful.
     */
    rCode?: string;
    /**
     * One-word description of the result of the application.
     */
    rFlag?: string;
    /**
     * Reference number that you use to reconcile your CyberSource reports with your processor reports.
     */
    reconciliationId?: string;
    /**
     * Message that explains the reply flag for the application.
     */
    rMessage?: string;
    /**
     * The description for this field is not available.
     */
    returnCode?: number;
  }
  export interface TssV2TransactionsPost201ResponseEmbeddedBuyerInformation {
    /**
     * Your identifier for the customer.  When a subscription or customer profile is being created, the maximum length for this field for most processors is 30. Otherwise, the maximum length is 100.  #### Comercio Latino For recurring payments in Mexico, the value is the customer’s contract number. Note Before you request the authorization, you must inform the issuer of the customer contract numbers that will be used for recurring transactions.  #### Worldpay VAP For a follow-on credit with Worldpay VAP, CyberSource checks the following locations, in the order given, for a customer account ID value and uses the first value it finds: 1. `customer_account_id` value in the follow-on credit request 2. Customer account ID value that was used for the capture that is being credited 3. Customer account ID value that was used for the original authorization If a customer account ID value cannot be found in any of these locations, then no value is used.  For processor-specific information, see the `customer_account_id` field description in [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
     */
    merchantCustomerId?: string;
  }
  export interface TssV2TransactionsPost201ResponseEmbeddedClientReferenceInformation {
    /**
     * Merchant-generated order reference or tracking number. It is recommended that you send a unique value for each transaction so that you can perform meaningful searches for the transaction.  #### Used by **Authorization** Required field.  #### PIN Debit Requests for PIN debit reversals need to use the same merchant reference number that was used in the transaction that is being reversed.  Required field for all PIN Debit requests (purchase, credit, and reversal).  #### FDC Nashville Global Certain circumstances can cause the processor to truncate this value to 15 or 17 characters for Level II and Level III processing, which can cause a discrepancy between the value you submit and the value included in some processor reports.
     */
    code?: string;
    /**
     * The name of the Connection Method client (such as Virtual Terminal or SOAP Toolkit API) that the merchant uses to send a transaction request to CyberSource.
     */
    applicationName?: string;
    /**
     * The entity that is responsible for running the transaction and submitting the processing request to CyberSource. This could be a person, a system, or a connection method.
     */
    applicationUser?: string;
  }
  export interface TssV2TransactionsPost201ResponseEmbeddedConsumerAuthenticationInformation {
    /**
     * Transaction identifier.  For details, see `xid` request field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
     */
    xid?: string;
    /**
     * Payer auth Transaction identifier.
     */
    transactionId?: string;
    /**
     * Raw electronic commerce indicator (ECI).  For details, see `eci_raw` request field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
     */
    eciRaw?: string;
  }
  export interface TssV2TransactionsPost201ResponseEmbeddedDeviceInformation {
    /**
     * IP address of the customer.  #### Used by **Authorization, Capture, and Credit** Optional field.
     */
    ipAddress?: string;
  }
  export interface TssV2TransactionsPost201ResponseEmbeddedLinks {
    transactionDetail?: PtsV2PaymentsPost201ResponseLinksSelf;
  }
  export interface TssV2TransactionsPost201ResponseEmbeddedMerchantInformation {
    /**
     * An unique identification number to identify the submitted request. It is also appended to the endpoint of the resource.  On incremental authorizations, this value with be the same as the identification number returned in the original authorization response.  #### PIN debit Returned for all PIN debit services.
     */
    resellerId?: string;
  }
  export interface TssV2TransactionsPost201ResponseEmbeddedOrderInformation {
    billTo?: TssV2TransactionsPost201ResponseEmbeddedOrderInformationBillTo;
    shipTo?: TssV2TransactionsPost201ResponseEmbeddedOrderInformationShipTo;
    amountDetails?: Ptsv2paymentsidreversalsReversalInformationAmountDetails;
  }
  export interface TssV2TransactionsPost201ResponseEmbeddedOrderInformationBillTo {
    /**
     * Customer’s first name. This name must be the same as the name on the card.  **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  #### CyberSource Latin American Processing **Important** For an authorization request, CyberSource Latin American Processing concatenates `orderInformation.billTo.firstName` and `orderInformation.billTo.lastName`. If the concatenated value exceeds 30 characters, CyberSource Latin American Processing declines the authorization request.\\ **Note** CyberSource Latin American Processing is the name of a specific processing connection that CyberSource supports. In the CyberSource API documentation, CyberSource Latin American Processing does not refer to the general topic of processing in Latin America. The information in this field description is for the specific processing connection called _CyberSource Latin American Processing_. It is not for any other Latin American processors that CyberSource supports.  #### CyberSource through VisaNet Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  #### For Payouts: This field may be sent only for FDC Compass.  #### Chase Paymentech Solutions Optional field.  ####  Credit Mutuel-CIC Optional field.  #### OmniPay Direct Optional field.  #### SIX Optional field.  #### TSYS Acquiring Solutions Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.  #### Worldpay VAP Optional field.  #### All other processors Not used.
     */
    firstName?: string;
    /**
     * Customer’s last name. This name must be the same as the name on the card.  **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  #### Chase Paymentech Solutions Optional field.  ####  Credit Mutuel-CIC Optional field.  #### CyberSource Latin American Processing **Important** For an authorization request, CyberSource Latin American Processing concatenates `orderInformation.billTo.firstName` and `orderInformation.billTo.lastName`. If the concatenated value exceeds 30 characters, CyberSource Latin American Processing declines the authorization request.\\ **Note** CyberSource Latin American Processing is the name of a specific processing connection that CyberSource supports. In the CyberSource API documentation, CyberSource Latin American Processing does not refer to the general topic of processing in Latin America. The information in this field description is for the specific processing connection called CyberSource Latin American Processing. It is not for any other Latin American processors that CyberSource supports.  #### CyberSource through VisaNet Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  #### For Payouts: This field may be sent only for FDC Compass.  #### OmniPay Direct Optional field.  #### RBS WorldPay Atlanta Optional field.  #### SIX Optional field.  #### TSYS Acquiring Solutions Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.  #### Worldpay VAP Optional field.  #### All other processors Not used.
     */
    lastName?: string;
    /**
     * Customer's email address, including the full domain name.  #### CyberSource through VisaNet Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  For processor-specific information, see the `customer_email` request-level field description in [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)  #### Invoicing Email address for the customer for sending the invoice. If the invoice is in SENT status and email is updated, the old email customer payment link won't work and you must resend the invoice with the new payment link.  #### Chase Paymentech Solutions Optional field.  ####  Credit Mutuel-CIC Optional field.  #### OmniPay Direct Optional field.  #### SIX Optional field.  #### TSYS Acquiring Solutions Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.  #### Worldpay VAP Optional field.  #### All other processors Not used.
     */
    email?: string;
    /**
     * Payment card billing country. Use the two-character [ISO Standard Country Codes](http://apps.cybersource.com/library/documentation/sbc/quickref/countries_alpha_list.pdf).  #### CyberSource through VisaNet Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  #### Chase Paymentech Solutions Optional field.  ####  Credit Mutuel-CIC Optional field.  #### OmniPay Direct Optional field.  #### SIX Optional field.  #### TSYS Acquiring Solutions Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.  #### Worldpay VAP Optional field.  #### All other processors Not used.
     */
    country?: string;
    /**
     * Customer’s phone number.  It is recommended that you include the country code when the order is from outside the U.S.  #### Chase Paymentech Solutions Optional field.  ####  Credit Mutuel-CIC Optional field.  #### CyberSource through VisaNet Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  #### For Payouts: This field may be sent only for FDC Compass.  #### OmniPay Direct Optional field.  #### SIX Optional field.  #### TSYS Acquiring Solutions Optional field.  #### Worldpay VAP Optional field.  #### All other processors Not used.
     */
    phoneNumber?: string;
  }
  export interface TssV2TransactionsPost201ResponseEmbeddedOrderInformationShipTo {
    /**
     * First name of the recipient.  #### Litle Maximum length: 25  #### All other processors Maximum length: 60  Optional field.
     */
    firstName?: string;
    /**
     * Last name of the recipient.  #### Litle Maximum length: 25  #### All other processors Maximum length: 60  Optional field.
     */
    lastName?: string;
    /**
     * First line of the shipping address.  Required field for authorization if any shipping address information is included in the request; otherwise, optional.  #### Tax Calculation Optional field for U.S. and Canadian taxes. Not applicable to international and value added taxes. Billing address objects will be used to determine the cardholder’s location when shipTo objects are not present.
     */
    address1?: string;
    /**
     * Country of the shipping address. Use the two-character [ISO Standard Country Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/countries_alpha_list.pdf)  Required field for authorization if any shipping address information is included in the request; otherwise, optional.  #### Tax Calculation Optional field for U.S., Canadian, international tax, and value added taxes. Billing address objects will be used to determine the cardholder’s location when shipTo objects are not present.
     */
    country?: string;
    /**
     * Phone number associated with the shipping address.
     */
    phoneNumber?: string;
  }
  export interface TssV2TransactionsPost201ResponseEmbeddedPaymentInformation {
    paymentType?: TssV2TransactionsPost201ResponseEmbeddedPaymentInformationPaymentType;
    customer?: Riskv1authenticationsetupsPaymentInformationCustomer;
    card?: TssV2TransactionsPost201ResponseEmbeddedPaymentInformationCard;
  }
  export interface TssV2TransactionsPost201ResponseEmbeddedPaymentInformationCard {
    /**
     * Last four digits of the cardholder’s account number. This field is included in the reply message when the client software that is installed on the POS terminal uses the token management service (TMS) to retrieve tokenized payment details.  You must contact customer support to have your account enabled to receive these fields in the credit reply message.  #### PIN debit This field is returned only for tokenized transactions. You can use this value on the receipt that you give to the cardholder.  Returned by PIN debit credit and PIN debit purchase.  This field is supported only by the following processors: - American Express Direct - Credit Mutuel-CIC - FDC Nashville Global - OmniPay Direct - SIX
     */
    suffix?: string;
    /**
     * Bank Identification Number (BIN). This is the initial four to six numbers on a credit card account number.
     */
    prefix?: string;
    /**
     * Three-digit value that indicates the card type.  **IMPORTANT** It is strongly recommended that you include the card type field in request messages even if it is optional for your processor and card type. Omitting the card type can cause the transaction to be processed with the wrong card type.  Possible values: - `001`: Visa. For card-present transactions on all processors except SIX, the Visa Electron card type is processed the same way that the Visa debit card is processed. Use card type value `001` for Visa Electron. - `002`: Mastercard, Eurocard[^1], which is a European regional brand of Mastercard. - `003`: American Express - `004`: Discover - `005`: Diners Club - `006`: Carte Blanche[^1] - `007`: JCB[^1] - `014`: Enroute[^1] - `021`: JAL[^1] - `024`: Maestro (UK Domestic)[^1] - `031`: Delta[^1]: Use this value only for Ingenico ePayments. For other processors, use `001` for all Visa card types. - `033`: Visa Electron[^1]. Use this value only for Ingenico ePayments and SIX. For other processors, use `001` for all Visa card types. - `034`: Dankort[^1] - `036`: Cartes Bancaires[^1] - `037`: Carta Si[^1] - `039`: Encoded account number[^1] - `040`: UATP[^1] - `042`: Maestro (International)[^1] - `050`: Hipercard[^2,3] - `051`: Aura - `054`: Elo[^3] - `062`: China UnionPay  [^1]: For this card type, you must include the `paymentInformation.card.type` or `paymentInformation.tokenizedCard.type` field in your request for an authorization or a stand-alone credit. [^2]: For this card type on Cielo 3.0, you must include the `paymentInformation.card.type` or `paymentInformation.tokenizedCard.type` field in a request for an authorization or a stand-alone credit. This card type is not supported on Cielo 1.5. [^3]: For this card type on Getnet and Rede, you must include the `paymentInformation.card.type` or `paymentInformation.tokenizedCard.type` field in a request for an authorization or a stand-alone credit.  #### Used by **Authorization** Required for Carte Blanche and JCB. Optional for all other card types.  #### Card Present reply This field is included in the reply message when the client software that is installed on the POS terminal uses the token management service (TMS) to retrieve tokenized payment details. You must contact customer support to have your account enabled to receive these fields in the credit reply message.  Returned by the Credit service.  This reply field is only supported by the following processors: - American Express Direct - Credit Mutuel-CIC - FDC Nashville Global - OmniPay Direct - SIX  #### GPX This field only supports transactions from the following card types: - Visa - Mastercard - AMEX - Discover - Diners - JCB - Union Pay International
     */
    type?: string;
  }
  export interface TssV2TransactionsPost201ResponseEmbeddedPaymentInformationPaymentType {
    /**
     * Indicates the payment type used in this payment transaction. Example: credit card, check
     */
    type?: string;
    /**
     * Indicates the payment method used in this payment transaction.
     */
    method?: string;
  }
  export interface TssV2TransactionsPost201ResponseEmbeddedPointOfSaleInformation {
    /**
     * Identifier for the terminal at your retail location. You can define this value yourself, but consult the processor for requirements.  #### CyberSource through VisaNet A list of all possible values is stored in your CyberSource account. If terminal ID validation is enabled for your CyberSource account, the value you send for this field is validated against the list each time you include the field in a request. To enable or disable terminal ID validation, contact CyberSource Customer Support.  When you do not include this field in a request, CyberSource uses the default value that is defined in your CyberSource account.  #### FDC Nashville Global To have your account configured to support this field, contact CyberSource Customer Support. This value must be a value that FDC Nashville Global issued to you.  #### For Payouts This field is applicable for CyberSource through VisaNet.  #### GPX Identifier for the terminal at your retail location. A list of all possible values is stored in your account. If terminal ID validation is enabled for your account, the value you send for this field is validated against the list each time you include the field in a request. To enable or disable terminal ID validation, contact customer support.  When you do not include this field in a request, the default value that is defined in your account is used.  Optional for authorizations.  #### Used by **Authorization** Optional for the following processors. When you do not include this field in a request, the default value that is defined in your account is used.   - American Express Direct   - Credit Mutuel-CIC   - FDC Nashville Global   - SIX - Chase Paymentech Solutions: Optional field. If you include this field in your request, you must also include `pointOfSaleInformation.catLevel`. - FDMS Nashville: The default value that is defined in your account is used. - GPX - OmniPay Direct: Optional field.  For the following processors, this field is not used. - GPN - JCN Gateway - RBS WorldPay Atlanta - TSYS Acquiring Solutions - Worldpay VAP  #### Card Present reply Terminal identifier assigned by the acquirer. This value must be printed on the receipt.
     */
    terminalId?: string;
    /**
     * Terminal serial number assigned by the hardware manufacturer. This value is provided by the client software that is installed on the POS terminal.  This value is not forwarded to the processor. Instead, the value is forwarded to the reporting functionality.  #### Used by **Authorization and Credit** Optional. This field is supported only by client software that is installed on your POS terminals for the following processors: - American Express Direct - Credit Mutuel-CIC - FDC Nashville Global - OmniPay Direct - SIX
     */
    terminalSerialNumber?: string;
    /**
     * Value created by the client software that uniquely identifies the POS device. CyberSource does not forward this value to the processor. Instead, the value is forwarded to the CyberSource reporting functionality.  This field is supported only for authorizations and credits on these processors: - American Express Direct - Credit Mutuel-CIC - FDC Nashville Global - OmniPay Direct - SIX  Optional field. String (32)
     */
    deviceId?: string;
    partner?: TssV2TransactionsPost201ResponseEmbeddedPointOfSaleInformationPartner;
  }
  export interface TssV2TransactionsPost201ResponseEmbeddedPointOfSaleInformationPartner {
    /**
     * Value that links the previous transaction to the current follow-on request. This value is assigned by the client software that is installed on the POS terminal, which makes it available to the terminal’s software and to CyberSource. Therefore, you can use this value to reconcile transactions between CyberSource and the terminal’s software.  CyberSource does not forward this value to the processor. Instead, the value is forwarded to the CyberSource reporting functionality.  This field is supported only on American Express Direct, FDC Nashville Global, and SIX.
     */
    originalTransactionId?: string;
  }
  export interface TssV2TransactionsPost201ResponseEmbeddedProcessingInformation {
    /**
     * Type of digital payment solution for the transaction. Possible Values:   - `visacheckout`: Visa Checkout. This value is required for Visa Checkout transactions. For details, see `payment_solution` field description in [Visa Checkout Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/VCO_SCMP_API/html/)  - `001`: Apple Pay.  - `004`: Cybersource In-App Solution.  - `005`: Masterpass. This value is required for Masterpass transactions on OmniPay Direct. For details, see \"Masterpass\" in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)  - `006`: Android Pay.  - `007`: Chase Pay.  - `008`: Samsung Pay.  - `012`: Google Pay.
     */
    paymentSolution?: string;
    businessApplicationId?: string;
    /**
     * Type of transaction. Some payment card companies use this information when determining discount rates.  #### Used by **Authorization** Required payer authentication transactions; otherwise, optional. **Credit** Required for standalone credits on Chase Paymentech solutions; otherwise, optional. Only `internet`, `moto`, `install`, `recurring`, and `recurring_internet` are valid values.  #### Ingenico ePayments When you omit this field for Ingenico ePayments, the processor uses the default transaction type they have on file for you instead of the default value (listed in Appendix I, \"Commerce Indicators,\" on page 441.)  #### Payer Authentication Transactions For the possible values and requirements, see \"Payer Authentication,\" page 195.  #### Other Types of Transactions See Appendix I, \"Commerce Indicators,\" on page 441.  #### Card Present You must set this field to `retail`. This field is required for a card-present transaction.
     */
    commerceIndicator?: string;
  }
  export interface TssV2TransactionsPost201ResponseEmbeddedProcessorInformation {
    processor?: TssV2TransactionsGet200ResponseProcessorInformationProcessor;
    /**
     * Authorization code. Returned only when the processor returns this value.  The length of this value depends on your processor.  Returned by authorization service.  #### PIN debit Authorization code that is returned by the processor.  Returned by PIN debit credit.  #### Elavon Encrypted Account Number Program The returned value is OFFLINE.  #### TSYS Acquiring Solutions The returned value for a successful zero amount authorization is 000000.
     */
    approvalCode?: string;
  }
  export interface TssV2TransactionsPost201ResponseEmbeddedRiskInformation {
    providers?: TssV2TransactionsPost201ResponseEmbeddedRiskInformationProviders;
  }
  export interface TssV2TransactionsPost201ResponseEmbeddedRiskInformationProviders {
    fingerprint?: TssV2TransactionsPost201ResponseEmbeddedRiskInformationProvidersFingerprint;
  }
  export interface TssV2TransactionsPost201ResponseEmbeddedRiskInformationProvidersFingerprint {
    /**
     * Customer’s true IP address detected by the application.  For details, see the `true_ipaddress` field description in _Device Fingerprinting Guide_ on the [CyberSource Business Center.](https://ebc2.cybersource.com/ebc2/) Click **Decision Manager** > **Documentation** > **Guides** > _Device Fingerprinting Guide_ (PDF link).
     */
    trueIpaddress?: string;
    /**
     * The unique identifier of the device that is returned in the `riskInformation.providers.fingerprint.device_fingerprint_hash` API reply field.  NOTE: For details about the value of this field, see the `decision_provider_#_field_#_value` field description in the _Decision Manager Using the SCMP API Developer Guide_ on the [CyberSource Business Center.](https://ebc2.cybersource.com/ebc2/) Click **Decision Manager** > **Documentation** > **Guides** > _Decision Manager Using the SCMP API Developer Guide_ (PDF link).  For more details about this field, see the `device_fingerprint_hash` field description in the _Device Fingerprinting Guide_ on the [CyberSource Business Center.](https://ebc2.cybersource.com/ebc2/) Click **Decision Manager** > **Documentation** > **Guides** > _Device Fingerprinting Guide_ (PDF link).
     */
    hash?: string;
    /**
     * The device identifier generated from attributes collected during profiling. Returned by a 3rd party when you use device fingerprinting.  For details, see the `device_fingerprint_smart_id` field description in [CyberSource Decision Manager Device Fingerprinting Guide.](https://www.cybersource.com/developers/documentation/fraud_management)
     */
    smartId?: string;
  }
  export interface TssV2TransactionsPost201ResponseEmbeddedTransactionSummaries {
    /**
     * An unique identification number to identify the submitted request. It is also appended to the endpoint of the resource.  On incremental authorizations, this value with be the same as the identification number returned in the original authorization response.  #### PIN debit Returned for all PIN debit services.
     */
    id?: string;
    /**
     * Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ` **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The `T` separates the date and the time. The `Z` indicates UTC.  Returned by authorization service.  #### PIN debit Time when the PIN debit credit, PIN debit purchase or PIN debit reversal was requested.  Returned by PIN debit credit, PIN debit purchase or PIN debit reversal.
     */
    submitTimeUtc?: string;
    /**
     * Your CyberSource merchant ID.
     */
    merchantId?: string;
    applicationInformation?: TssV2TransactionsPost201ResponseEmbeddedApplicationInformation;
    buyerInformation?: TssV2TransactionsPost201ResponseEmbeddedBuyerInformation;
    clientReferenceInformation?: TssV2TransactionsPost201ResponseEmbeddedClientReferenceInformation;
    consumerAuthenticationInformation?: TssV2TransactionsPost201ResponseEmbeddedConsumerAuthenticationInformation;
    deviceInformation?: TssV2TransactionsPost201ResponseEmbeddedDeviceInformation;
    fraudMarkingInformation?: TssV2TransactionsGet200ResponseFraudMarkingInformation;
    /**
     * The object containing the custom data that the merchant defines.
     */
    merchantDefinedInformation?: Array<Ptsv2paymentsMerchantDefinedInformation>;
    merchantInformation?: TssV2TransactionsPost201ResponseEmbeddedMerchantInformation;
    orderInformation?: TssV2TransactionsPost201ResponseEmbeddedOrderInformation;
    paymentInformation?: TssV2TransactionsPost201ResponseEmbeddedPaymentInformation;
    processingInformation?: TssV2TransactionsPost201ResponseEmbeddedProcessingInformation;
    processorInformation?: TssV2TransactionsPost201ResponseEmbeddedProcessorInformation;
    pointOfSaleInformation?: TssV2TransactionsPost201ResponseEmbeddedPointOfSaleInformation;
    riskInformation?: TssV2TransactionsPost201ResponseEmbeddedRiskInformation;
    links?: TssV2TransactionsPost201ResponseEmbeddedLinks;
  }
  export interface TssV2TransactionsPost400Response {
    /**
     * Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ` **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The `T` separates the date and the time. The `Z` indicates UTC.  Returned by authorization service.  #### PIN debit Time when the PIN debit credit, PIN debit purchase or PIN debit reversal was requested.  Returned by PIN debit credit, PIN debit purchase or PIN debit reversal.
     */
    submitTimeUtc?: string;
    /**
     * The status of the submitted transaction.  Possible values:  - INVALID_REQUEST
     */
    status?: string;
    /**
     * The detail message related to the status and reason listed above.
     */
    message?: string;
    details?: Array<PtsV2PaymentsPost201ResponseErrorInformationDetails>;
  }
  export interface UmsV1UsersGet200Response {
    users?: Array<UmsV1UsersGet200ResponseUsers>;
  }
  export interface UmsV1UsersGet200ResponseAccountInformation {
    userName?: string;
    roleId?: string;
    permissions?: Array<string>;
    /**
     * Valid values: - active - inactive - locked - disabled - forgotpassword - deleted
     */
    status?: string;
    createdTime?: Date;
    lastAccessTime?: Date;
    languagePreference?: string;
    timezone?: string;
  }
  export interface UmsV1UsersGet200ResponseContactInformation {
    email?: string;
    phoneNumber?: string;
    firstName?: string;
    lastName?: string;
  }
  export interface UmsV1UsersGet200ResponseOrganizationInformation {
    organizationId?: string;
  }
  export interface UmsV1UsersGet200ResponseUsers {
    accountInformation?: UmsV1UsersGet200ResponseAccountInformation;
    organizationInformation?: UmsV1UsersGet200ResponseOrganizationInformation;
    contactInformation?: UmsV1UsersGet200ResponseContactInformation;
    customFields?: any;
  }
  export interface UpdateInvoiceRequest {
    customerInformation?: Invoicingv2invoicesCustomerInformation;
    invoiceInformation?: Invoicingv2invoicesidInvoiceInformation;
    orderInformation?: Invoicingv2invoicesOrderInformation;
  }
  export interface V1FileDetailsGet200Response {
    fileDetails?: Array<V1FileDetailsGet200ResponseFileDetails>;
    links?: V1FileDetailsGet200ResponseLinks;
  }
  export interface V1FileDetailsGet200ResponseFileDetails {
    /**
     * Unique identifier of a file
     */
    fileId?: string;
    /**
     * Name of the file
     */
    name?: string;
    /**
     * Date and time for the file in PST
     */
    createdTime?: Date;
    /**
     * Date and time for the file in PST
     */
    lastModifiedTime?: Date;
    /**
     * Date and time for the file in PST
     */
    date?: string;
    /**
     * 'File extension'  Valid values: - 'application/xml' - 'text/csv' - 'application/pdf' - 'application/octet-stream'
     */
    mimeType?: string;
    /**
     * Size of the file in bytes
     */
    size?: number;
  }
  export interface V1FileDetailsGet200ResponseLinks {
    self?: V1FileDetailsGet200ResponseLinksSelf;
    files?: Array<V1FileDetailsGet200ResponseLinksFiles>;
  }
  export interface V1FileDetailsGet200ResponseLinksFiles {
    /**
     * Unique identifier for each file
     */
    fileId?: string;
    href?: string;
    method?: string;
  }
  export interface V1FileDetailsGet200ResponseLinksSelf {
    href?: string;
    method?: string;
  }
  export interface ValidateExportComplianceRequest {
    clientReferenceInformation?: Riskv1addressverificationsClientReferenceInformation;
    orderInformation?: Riskv1exportcomplianceinquiriesOrderInformation;
    buyerInformation?: Riskv1addressverificationsBuyerInformation;
    deviceInformation?: Riskv1exportcomplianceinquiriesDeviceInformation;
    exportComplianceInformation?: Riskv1exportcomplianceinquiriesExportComplianceInformation;
  }
  export interface ValidateRequest {
    clientReferenceInformation?: Riskv1authenticationsetupsClientReferenceInformation;
    processingInformation?: Riskv1authenticationsetupsProcessingInformation;
    orderInformation?: Riskv1authenticationresultsOrderInformation;
    paymentInformation?: Riskv1authenticationresultsPaymentInformation;
    consumerAuthenticationInformation?: Riskv1authenticationresultsConsumerAuthenticationInformation;
  }
  export interface VasV2PaymentsPost201Response {
    links?: VasV2PaymentsPost201ResponseLinks;
    /**
     * An unique identification number to identify the submitted request. It is also appended to the endpoint of the resource.  On incremental authorizations, this value with be the same as the identification number returned in the original authorization response.  #### PIN debit Returned for all PIN debit services.
     */
    id?: string;
    /**
     * Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ` **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The `T` separates the date and the time. The `Z` indicates UTC.  Returned by authorization service.  #### PIN debit Time when the PIN debit credit, PIN debit purchase or PIN debit reversal was requested.  Returned by PIN debit credit, PIN debit purchase or PIN debit reversal.
     */
    submitTimeUtc?: string;
    /**
     * The status of the submitted transaction.  Possible values:  - COMPLETED
     */
    status?: string;
    clientReferenceInformation?: PtsV2PaymentsPost201ResponseClientReferenceInformation;
    taxInformation?: VasV2PaymentsPost201ResponseTaxInformation;
    orderInformation?: VasV2PaymentsPost201ResponseOrderInformation;
  }
  export interface VasV2PaymentsPost201ResponseLinks {
    _void?: PtsV2PaymentsPost201ResponseLinksSelf;
  }
  export interface VasV2PaymentsPost201ResponseOrderInformation {
    /**
     * Total amount of tax exempt amounts. This value is the sum of the values for all the `orderInformation.lineItems[].exemptAmount` fields in the tax calculation request.
     */
    exemptAmount?: string;
    /**
     * Total amount of all taxable amounts. This value is the sum of the values for all the `orderInformation.lineItems[].taxAmount` fields in the tax calculation request.
     */
    taxableAmount?: string;
    /**
     * Total amount of tax for all lineItems in the tax calculation request.
     */
    taxAmount?: string;
    lineItems?: Array<VasV2PaymentsPost201ResponseOrderInformationLineItems>;
    taxDetails?: Array<VasV2PaymentsPost201ResponseOrderInformationTaxDetails>;
    amountDetails?: Ptsv2paymentsidreversalsReversalInformationAmountDetails;
  }
  export interface VasV2PaymentsPost201ResponseOrderInformationJurisdiction {
    /**
     * Type of tax jurisdiction for the item. Returned only if the `taxInformation.showTaxPerLineItem` field is set to `Yes`.  Possible values: - `city` - `county` - `state` - `country` - `special`
     */
    type?: string;
    /**
     * Name of the jurisdiction tax for the item. For example, CA State Tax. Returned only if the `taxInformation.showTaxPerLineItem` field is set to `Yes`.
     */
    taxName?: string;
    /**
     * Jurisdiction tax amount for the item. Returned only if the `taxInformation.showTaxPerLineItem` field is set to `Yes`.
     */
    taxAmount?: string;
    /**
     * Jurisdiction taxable amount for the item, not including product level exemptions. Returned only if the `taxInformation.showTaxPerLineItem` field is set to `Yes`.
     */
    taxable?: string;
    /**
     * Free-text description of the jurisdiction for the item. For example, San Mateo County. Returned only if the `taxInformation.showTaxPerLineItem` field is set to `Yes`.
     */
    name?: string;
    /**
     * Jurisdiction code assigned by the tax provider. Returned only if the `taxInformation.showTaxPerLineItem` field is set to `Yes`.
     */
    code?: string;
    /**
     * Jurisdiction tax rate for the item. Returned only if the `taxInformation.showTaxPerLineItem` field is set to `Yes`.
     */
    rate?: string;
    /**
     * Free-text description of the jurisdiction region for the item. For example, CA (California State) or GB (Great Britain). Returned only if the `taxInformation.showTaxPerLineItem` field is set to `Yes`.
     */
    region?: string;
    /**
     * Tax jurisdiction country for the item. Returned only if the `taxInformation.showTaxPerLineItem` field is set to `Yes`.
     */
    country?: string;
  }
  export interface VasV2PaymentsPost201ResponseOrderInformationLineItems {
    taxDetails?: Array<VasV2PaymentsPost201ResponseOrderInformationTaxDetails>;
    jurisdiction?: Array<VasV2PaymentsPost201ResponseOrderInformationJurisdiction>;
    /**
     * Exempt amount for the lineItem. Returned only if the `taxInformation.showTaxPerLineItem` field is set to `Yes`.
     */
    exemptAmount?: string;
    /**
     * Portion of the item amount that is taxable.
     */
    taxableAmount?: string;
    /**
     * Total tax for the item. This value is the sum of all taxes applied to the item.
     */
    taxAmount?: string;
  }
  export interface VasV2PaymentsPost201ResponseOrderInformationTaxDetails {
    /**
     * Allowed tax types: - city - county - state - national - special
     */
    type?: string;
    /**
     * Amount corresponding to different types of taxes applied.
     */
    amount?: string;
  }
  export interface VasV2PaymentsPost201ResponseTaxInformation {
    /**
     * Indicates whether this is a committed tax transaction. For a committed tax transaction, the status in the Tax Detail Report is “Committed.” For an uncommitted tax transaction, the status in the Tax Detail Report is “Uncommitted.” Possible values: - `true`: This is a committed tax transaction. - `false` (default): This is not a committed tax transaction.  A committed tax request is a tax service request that sets the status field in the Tax Detail Report to committed. The committed status indicates that the amount calculated by the tax service is included in the amount of a capture or credit.  Use a void service request to cancels a committed tax request or a committed refund tax request. The void transaction is included as a separate entry in the Tax Detail Report. The value of the status field is cancelled. The value of the link ID is the request ID of the committed tax request or refund tax request that was voided. You can use the value of the link ID to reconcile your orders.  Optional for U.S., Canadian, international tax, and value added taxes.
     */
    commitIndicator?: boolean;
    /**
     * Indicates whether this is a refund tax transaction. For a refund tax transaction, amounts in the Tax Detail Report will be negative. Possible values: - `true`: This is a refund tax transaction. - `false` (default): This is not a refund tax transaction.  A refund tax request is a tax service request that sets the transaction type field in the Tax Detail Report to refunded and makes the reported amount negative. Tax amounts are returned as positive amounts in reply messages, but they are saved in reports as negative amounts which enables the reporting software to accurately calculate the aggregate amounts.  Optional for U.S., Canadian, international tax, and value added taxes.
     */
    refundIndicator?: boolean;
  }
  export interface VasV2PaymentsPost400Response {
    /**
     * Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ` **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The `T` separates the date and the time. The `Z` indicates UTC.  Returned by authorization service.  #### PIN debit Time when the PIN debit credit, PIN debit purchase or PIN debit reversal was requested.  Returned by PIN debit credit, PIN debit purchase or PIN debit reversal.
     */
    submitTimeUtc?: string;
    /**
     * The status of the submitted transaction.  Possible values:  - INVALID_REQUEST
     */
    status?: string;
    /**
     * The reason of the status.  Possible values:  - MISSING_FIELD  - INVALID_DATA  - DUPLICATE_REQUEST  - PROCESSOR_UNAVAILABLE  - AVS_FAILED  - INVALID_MERCHANT_CONFIGURATION
     */
    reason?: string;
    /**
     * The detail message related to the status and reason listed above.
     */
    message?: string;
    details?: Array<PtsV2PaymentsPost201ResponseErrorInformationDetails>;
  }
  export interface VasV2TaxVoid200Response {
    /**
     * An unique identification number to identify the submitted request. It is also appended to the endpoint of the resource.  On incremental authorizations, this value with be the same as the identification number returned in the original authorization response.  #### PIN debit Returned for all PIN debit services.
     */
    id?: string;
    /**
     * Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ` **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The `T` separates the date and the time. The `Z` indicates UTC.  Returned by authorization service.  #### PIN debit Time when the PIN debit credit, PIN debit purchase or PIN debit reversal was requested.  Returned by PIN debit credit, PIN debit purchase or PIN debit reversal.
     */
    submitTimeUtc?: string;
    /**
     * The status of the submitted transaction.  Possible values:  - VOIDED
     */
    status?: string;
    clientReferenceInformation?: PtsV2IncrementalAuthorizationPatch201ResponseClientReferenceInformation;
    voidAmountDetails?: VasV2TaxVoid200ResponseVoidAmountDetails;
  }
  export interface VasV2TaxVoid200ResponseVoidAmountDetails {
    /**
     * Total amount of the void.  #### PIN Debit Amount of the reversal.  Returned by PIN debit reversal.
     */
    voidAmount?: string;
    /**
     * Currency used for the order. Use the three-character [ISO Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf)  #### Used by **Authorization** Required field.  **Authorization Reversal** For an authorization reversal (`reversalInformation`) or a capture (`processingOptions.capture` is set to `true`), you must use the same currency that you used in your payment authorization request.  #### PIN Debit Currency for the amount you requested for the PIN debit purchase. This value is returned for partial authorizations. The issuing bank can approve a partial amount if the balance on the debit card is less than the requested transaction amount. For the possible values, see the [ISO Standard Currency Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/currencies.pdf). Returned by PIN debit purchase.  For PIN debit reversal requests, you must use the same currency that was used for the PIN debit purchase or PIN debit credit that you are reversing. For the possible values, see the [ISO Standard Currency Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/currencies.pdf).  Required field for PIN Debit purchase and PIN Debit credit requests. Optional field for PIN Debit reversal requests.  #### GPX This field is optional for reversing an authorization or credit.  #### DCC for First Data Your local currency. For details, see the `currency` field description in [Dynamic Currency Conversion For First Data Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/DCC_FirstData_SCMP/DCC_FirstData_SCMP_API.pdf).  #### Tax Calculation Required for international tax and value added tax only. Optional for U.S. and Canadian taxes. Your local currency.
     */
    currency?: string;
  }
  export interface VasV2TaxVoidsPost400Response {
    /**
     * Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ` **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The `T` separates the date and the time. The `Z` indicates UTC.  Returned by authorization service.  #### PIN debit Time when the PIN debit credit, PIN debit purchase or PIN debit reversal was requested.  Returned by PIN debit credit, PIN debit purchase or PIN debit reversal.
     */
    submitTimeUtc?: string;
    /**
     * The status of the submitted transaction.  Possible values:  - INVALID_REQUEST
     */
    status?: string;
    /**
     * The reason of the status.  Possible values:  - INVALID_DATA  - NOT_VOIDABLE
     */
    reason?: string;
    /**
     * The detail message related to the status and reason listed above.
     */
    message?: string;
    details?: Array<PtsV2PaymentsPost201ResponseErrorInformationDetails>;
  }
  export interface Vasv2taxBuyerInformation {
    /**
     * Customer’s government-assigned tax identification number.  #### Tax Calculation Optional for international and value added taxes only. Not applicable to U.S. and Canadian taxes.  For processor-specific information, see the purchaser_vat_registration_number field in [Level II and Level III Processing Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/Level_2_3_SCMP_API/html)
     */
    vatRegistrationNumber?: string;
  }
  export interface Vasv2taxClientReferenceInformation {
    /**
     * Merchant-generated order reference or tracking number. It is recommended that you send a unique value for each transaction so that you can perform meaningful searches for the transaction.  #### Used by **Authorization** Required field.  #### PIN Debit Requests for PIN debit reversals need to use the same merchant reference number that was used in the transaction that is being reversed.  Required field for all PIN Debit requests (purchase, credit, and reversal).  #### FDC Nashville Global Certain circumstances can cause the processor to truncate this value to 15 or 17 characters for Level II and Level III processing, which can cause a discrepancy between the value you submit and the value included in some processor reports.
     */
    code?: string;
    partner?: Vasv2taxClientReferenceInformationPartner;
    /**
     * Comments
     */
    comments?: string;
  }
  export interface Vasv2taxClientReferenceInformationPartner {
    /**
     * Identifier for the developer that helped integrate a partner solution to CyberSource.  Send this value in all requests that are sent through the partner solutions built by that developer. CyberSource assigns the ID to the developer.  **Note** When you see a developer ID of 999 in reports, the developer ID that was submitted is incorrect.
     */
    developerId?: string;
    /**
     * Identifier for the partner that is integrated to CyberSource.  Send this value in all requests that are sent through the partner solution. CyberSource assigns the ID to the partner.  **Note** When you see a solutionId of 999 in reports, the solutionId that was submitted is incorrect.
     */
    solutionId?: string;
  }
  export interface Vasv2taxMerchantInformation {
    /**
     * Your government-assigned tax identification number.  #### Tax Calculation Required field for value added tax only. Not applicable to U.S. and Canadian taxes.  #### CyberSource through VisaNet For CtV processors, the maximum length is 20.  For other processor-specific information, see the `merchant_vat_registration_number` field description in [Level II and Level III Processing Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/Level_2_3_SCMP_API/html)
     */
    vatRegistrationNumber?: string;
  }
  export interface Vasv2taxOrderInformation {
    amountDetails?: RiskV1DecisionsPost201ResponseOrderInformationAmountDetails;
    billTo?: Vasv2taxOrderInformationBillTo;
    shippingDetails?: Vasv2taxOrderInformationShippingDetails;
    shipTo?: Vasv2taxOrderInformationShipTo;
    lineItems?: Array<Vasv2taxOrderInformationLineItems>;
    invoiceDetails?: Vasv2taxOrderInformationInvoiceDetails;
    orderAcceptance?: Vasv2taxOrderInformationOrderAcceptance;
    orderOrigin?: Vasv2taxOrderInformationOrderOrigin;
  }
  export interface Vasv2taxOrderInformationBillTo {
    /**
     * First line of the billing street address.  #### Tax Calculation Required for U.S. and Canadian taxes. Not applicable to international and value added taxes.
     */
    address1?: string;
    /**
     * Second line of the billing street address.  #### Tax Calculation Optional for U.S. and Canadian taxes. Not applicable to international and value added taxes.
     */
    address2?: string;
    /**
     * Credit card billing city.  #### Tax Calculation Required for U.S. and Canadian taxes only. Not applicable to international and value added taxes.
     */
    locality?: string;
    /**
     * Credit card billing state or province.  #### Tax Calculation Required for U.S. and Canadian taxes. Not applicable to international and value added taxes.
     */
    administrativeArea?: string;
    /**
     * Postal code for the billing address. The postal code must consist of 5 to 9 digits. If the billing country is the U.S., the 9-digit postal code must follow this format:  [5 digits][dash][4 digits]  **Example**: 12345-6789  If the billing country is Canada, the 6-digit postal code must follow this format:  [alpha][numeric][alpha] [numeric][alpha][numeric]  **Example**: A1B 2C3  #### Tax Calculation Required for U.S. and Canadian taxes. Not applicable to international and value added taxes.
     */
    postalCode?: string;
    /**
     * Credit card billing country. Use the [ISO Standard Country Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/countries_alpha_list.pdf).  If `orderInformation.shipTo.country` is not provided, `orderInformation.billTo.country` is used in its place. If  `orderInformation.billTo.country` is set to `US` or `CA`, then `orderInformation.billTo.postalCode` and `orderInformation.billTo.administrativeArea` are also required.  #### Tax Calculation Required for U.S., Canadian, international and value added taxes.
     */
    country?: string;
  }
  export interface Vasv2taxOrderInformationInvoiceDetails {
    /**
     * Date of the tax calculation. Use format YYYYMMDD. You can provide a date in the past if you are calculating tax for a refund and want to know what the tax was on the date the order was placed. You can provide a date in the future if you are calculating the tax for a future date, such as an upcoming tax holiday.  The default is the date, in Pacific time, that the bank receives the request. Keep this in mind if you are in a different time zone and want the tax calculated with the rates that are applicable on a specific date.  #### Tax Calculation Optional field for U.S., Canadian, international tax, and value added taxes.
     */
    invoiceDate?: string;
  }
  export interface Vasv2taxOrderInformationLineItems {
    /**
     * Product identifier code. Also known as the Stock Keeping Unit (SKU) code for the product.  For an authorization or capture transaction (`processingOptions.capture` is set to `true` or `false`), this field is required when `orderInformation.lineItems[].productCode` is not set to **default** or one of the other values that are related to shipping and/or handling.  #### Tax Calculation Optional field for U.S. and Canadian taxes. Not applicable to international and value added taxes. For an authorization or capture transaction (`processingOptions.capture` is set to `true` or `false`), this field is required when `orderInformation.lineItems[].productCode` is not `default` or one of the values related to shipping and/or handling.
     */
    productSKU?: string;
    /**
     * Type of product. The value for this field is used to identify the product category (electronic, handling, physical, service, or shipping). The default value is `default`.  If you are performing an authorization transaction (`processingOptions.capture` is set to `false`), and you set this field to a value other than `default` or one of the values related to shipping and/or handling, then `orderInformation.lineItems[].quantity`, `orderInformation.lineItems[].productName`, and `orderInformation.lineItems[].productSku` fields are required.  Optional field.  For details, see the `product_code` field description in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/).  #### Tax Calculation Optional field for U.S., Canadian, international tax, and value added taxes.  To use the tax calculation service, use values listed in the Tax Product Code Guide. For information about this document, contact customer support. See \"Product Codes,\" page 14, for more information.
     */
    productCode?: string;
    /**
     * Number of units for this order. Must be a non-negative integer.  The default is `1`. For an authorization or capture transaction (`processingOptions.capture` is set to `true` or `false`), this field is required when `orderInformation.lineItems[].productCode` is not `default` or one of the other values related to shipping and/or handling.  #### Tax Calculation Optional field for U.S., Canadian, international tax, and value added taxes.
     */
    quantity?: number;
    /**
     * For an authorization or capture transaction (`processingOptions.capture` is `true` or `false`), this field is required when `orderInformation.lineItems[].productCode` is not `default` or one of the other values that are related to shipping and/or handling.  #### Tax Calculation Optional field for U.S., Canadian, international tax, and value added taxes.
     */
    productName?: string;
    /**
     * Per-item price of the product. This value for this field cannot be negative.  You must include either this field or the request-level field `orderInformation.amountDetails.totalAmount` in your request.  You can include a decimal point (.), but you cannot include any other special characters. The value is truncated to the correct number of decimal places.  #### DCC with a Third-Party Provider Set this field to the converted amount that was returned by the DCC provider. You must include either the 1st line item in the order and this field, or the request-level field `orderInformation.amountDetails.totalAmount` in your request.  #### FDMS South If you accept IDR or CLP currencies, see the entry for FDMS South in the [Merchant Descriptors Using the SCMP API Guide.] (https://apps.cybersource.com/library/documentation/dev_guides/Merchant_Descriptors_SCMP_API/html/)  #### Tax Calculation Required field for U.S., Canadian, international and value added taxes.  #### Zero Amount Authorizations If your processor supports zero amount authorizations, you can set this field to 0 for the authorization to check if the card is lost or stolen.  #### Maximum Field Lengths For GPN and JCN Gateway: Decimal (10) All other processors: Decimal (15)
     */
    unitPrice?: string;
    /**
     * Total tax to apply to the product. This value cannot be negative. The tax amount and the offer amount must be in the same currency. The tax amount field is additive.  The following example uses a two-exponent currency such as USD:   1. You include each line item in your request.  ..- 1st line item has amount=10.00, quantity=1, and taxAmount=0.80  ..- 2nd line item has amount=20.00, quantity=1, and taxAmount=1.60  2. The total amount authorized will be 32.40, not 30.00 with 2.40 of tax included.  Optional field.  #### Airlines processing Tax portion of the order amount. This value cannot exceed 99999999999999 (fourteen 9s). Format: English characters only. Optional request field for a line item.  #### Tax Calculation Optional field for U.S., Canadian, international tax, and value added taxes.  Note if you send this field in your tax request, the value in the field will override the tax engine
     */
    taxAmount?: string;
    orderAcceptance?: Vasv2taxOrderInformationOrderAcceptance;
    orderOrigin?: Vasv2taxOrderInformationOrderOrigin;
    /**
     * Country from which the order is shipped. This field is used only when `orderInformation.shippingDetails.shipFromLocality` and `orderInformation.shippingDetails.shipFromAdministrativeArea` are present. Use the [ISO Standard Country Codes](http://apps.cybersource.com/library/documentation/sbc/quickref/countries_alpha_list.pdf).  **NOTE** If this field appears in a `lineItems` object, then the value of this field in the `lineItems` object overrides the value of the corresponding field at the request-level or order-level object.  #### Tax Calculation This field is used to determine tax rules and/ or rates applied to the transaction based on sourcing.  Optional for U.S., Canadian, international tax, and value added taxes.
     */
    shipFromCountry?: string;
    /**
     * State from which the order is shipped. This field is used only when `orderInformation.shippingDetails.shipFromLocality` and `orderInformation.shippingDetails.shipFromCountry` are present. Use the [State, Province, and Territory Codes for the United States and Canada](http://apps.cybersource.com/library/documentation/sbc/quickref/states_and_provinces.pdf).  **NOTE** If this field appears in a `lineItems` object, then the value of this field in the `lineItems` object overrides the value of the corresponding field at the request-level or order-level object.  #### Tax Calculation This field is used to determine tax rules and/or rates applied to the transaction based on sourcing.  Optional for U.S. and Canadian taxes. Not applicable to international and value added taxes.
     */
    shipFromAdministrativeArea?: string;
    /**
     * City where the product is shipped from. This field is used only when the `orderInformation.shipTo.administrativeArea` and `orderInformation.shipTo.country` fields are present.  **NOTE** If this field appears in a `lineItems` object, then the value of this field in the `lineItems` object overrides the value of the corresponding field at the request-level or order-level object.  #### Tax Calculation This field is used to determine tax rules and/or rates applied to the transaction based on sourcing.  Optional for U.S. and Canadian taxes. Not applicable to international and value added taxes.
     */
    shipFromLocality?: string;
    /**
     * Postal code where the product is shipped from.  #### Tax Calculation This field is used to determine tax rules and/or rates applied to the transaction based on sourcing.  Optional for U.S. and Canadian taxes. Not applicable to international and value added taxes.
     */
    shipFromPostalCode?: string;
    /**
     * Buyer’s VAT registration number.  **NOTE** If this field appears in a `lineItems` object, then the value of this field in the `lineItems` object overrides the value of the corresponding field at the request-level or order-level object.  #### Tax Calculation Optional field for international and value added taxes only. Not applicable to U.S. and Canadian taxes.
     */
    buyerVatRegistrationNumber?: string;
    /**
     * VAT seller registration number.  For details, see \"International Taxes and Value-Added Tax (VAT)\" in [Tax Calculation Service Using the SCMP API](https://apps.cybersource.com/library/documentation/dev_guides/Tax_SCMP_API/html/).  **NOTE** If this field appears in a `lineItems` object, then the value of this field in the `lineItems` object overrides the value of the corresponding field at the request-level or order-level object.  #### Tax Calculation Optional field for international and value added taxes only. Not applicable to U.S. and Canadian taxes.
     */
    sellerVatRegistrationNumber?: string;
  }
  /**
   * The place of business where you accept/approve the customer’s order, thereby becoming contractually obligated to make the sale.
   */
  export interface Vasv2taxOrderInformationOrderAcceptance {
    /**
     * Order acceptance city. This field is not used unless the `orderInformation.orderAcceptance.administrativeArea` and `orderInformation.orderAcceptance.country` fields are present.  **NOTE** If this field appears in a `lineItems` object, then the value of this field in the `lineItems` object overrides the value of the corresponding field at the request-level or order-level object.  #### Tax Calculation Optional field for U.S. and Canadian taxes. Not applicable to international and value added taxes. The place of business where you accept/approve the customer’s order, thereby becoming contractually obligated to make the sale.
     */
    locality?: string;
    /**
     * Order acceptance state. This field is not used unless the `orderInformation.orderAcceptance.locality` and `orderInformation.orderAcceptance.country` fields are present. Use the [State, Province, and Territory Codes for the United States and Canada](https://developer.cybersource.com/library/documentation/sbc/quickref/states_and_provinces.pdf).  **NOTE** If this field appears in a `lineItems` object, then the value of this field in the `lineItems` object overrides the value of the corresponding field at the request-level or order-level object.  #### Tax Calculation Optional field for U.S. and Canadian taxes. Not applicable to international and value added taxes. The place of business where you accept/approve the customer’s order, thereby becoming contractually obligated to make the sale.
     */
    administrativeArea?: string;
    /**
     * Order acceptance postal code. This field is not used unless the `orderInformation.orderAcceptance.locality`, `orderInformation.orderAcceptance.administrativeArea`, and `orderInformation.orderAcceptance.country` fields are present. Must be sent at the line or offer level to be surfaced in the Tax Detail Report.  **NOTE** If this field appears in a `lineItems` object, then the value of this field in the `lineItems` object overrides the value of the corresponding field at the request-level or order-level object.  #### Tax Calculation Optional field for U.S. and Canadian taxes. Not applicable to international and value added taxes. The place of business where you accept/approve the customer’s order, thereby becoming contractually obligated to make the sale.
     */
    postalCode?: string;
    /**
     * Order acceptance country. This field is not used unless the `orderInformation.orderAcceptance.administrativeArea` and `orderInformation.orderAcceptance.locality` fields are present. Use the [ISO Standard Country Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/countries_alpha_list.pdf)  **NOTE** If this field appears in a `lineItems` object, then the value of this field in the `lineItems` object overrides the value of the corresponding field at the request-level or order-level object.  #### Tax Calculation Optional field for U.S. and Canadian taxes. Not applicable to international and value added taxes. The place of business where you accept/approve the customer’s order, thereby becoming contractually obligated to make the sale.
     */
    country?: string;
  }
  /**
   * The location of the buyer at the time of placing the order.
   */
  export interface Vasv2taxOrderInformationOrderOrigin {
    /**
     * Order origin city. This field is not used unless the `orderInformation.orderOrigin.administrativeArea` and `orderInformation.orderOrigin.country` fields are present.  **NOTE** If this field appears in a `lineItems` object, then the value of this field in the `lineItems` object overrides the value of the corresponding field at the request-level or order-level object.  #### Tax Calculation Optional field for U.S. and Canadian taxes. Not applicable to international and value added taxes. The location of the buyer at the time of placing the order.
     */
    locality?: string;
    /**
     * Order origin state. This field is not used unless the `orderInformation.orderOrigin.locality` and `orderInformation.orderOrigin.country` fields are present. Use the [State, Province, and Territory Codes for the United States and Canada](http://apps.cybersource.com/library/documentation/sbc/quickref/states_and_provinces.pdf).  **NOTE** If this field appears in a `lineItems` object, then the value of this field in the `lineItems` object overrides the value of the corresponding field at the request-level or order-level object.  #### Tax Calculation Optional field for U.S. and Canadian taxes. Not applicable to international and value added taxes. The location of the buyer at the time of placing the order.
     */
    administrativeArea?: string;
    /**
     * Order origin postal code. This field is not used unless the `orderInformation.orderOrigin.locality`, `orderInformation.orderOrigin.administrativeArea` and `orderInformation.orderOrigin.country` fields are present. Must be sent at the lineItem level to appear in the Tax Detail Report.  **NOTE** If this field appears in a `lineItems` object, then the value of this field in the `lineItems` object overrides the value of the corresponding field at the request-level or order-level object.  #### Tax Calculation Optional field for U.S. and Canadian taxes. Not applicable to international and value added taxes. The location of the buyer at the time of placing the order.
     */
    postalCode?: string;
    /**
     * Order origin country. This field is not used unless the `orderInformation.orderOrigin.administrativeArea` and `orderInformation.orderOrigin.locality` fields are present. Use the [ISO Standard Country Codes](http://apps.cybersource.com/library/documentation/sbc/quickref/countries_alpha_list.pdf).  **NOTE** If this field appears in a `lineItems` object, then the value of this field in the `lineItems` object overrides the value of the corresponding field at the request-level or order-level object.  #### Tax Calculation Optional field for U.S. and Canadian taxes. Not applicable to international and value added taxes. The location of the buyer at the time of placing the order.
     */
    country?: string;
  }
  export interface Vasv2taxOrderInformationShipTo {
    /**
     * Country of the shipping address. Use the two-character [ISO Standard Country Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/countries_alpha_list.pdf)  Required field for authorization if any shipping address information is included in the request; otherwise, optional.  #### Tax Calculation Optional field for U.S., Canadian, international tax, and value added taxes. Billing address objects will be used to determine the cardholder’s location when shipTo objects are not present.
     */
    country?: string;
    /**
     * State or province of the shipping address. Use the [State, Province, and Territory Codes for the United States and Canada](https://developer.cybersource.com/library/documentation/sbc/quickref/states_and_provinces.pdf)  Required field for authorization if any shipping address information is included in the request and shipping to the U.S. or Canada; otherwise, optional.  #### Tax Calculation Optional field for U.S. and Canadian taxes. Not applicable to international and value added taxes. Billing address objects will be used to determine the cardholder’s location when shipTo objects are not present.
     */
    administrativeArea?: string;
    /**
     * City of the shipping address.  Required field for authorization if any shipping address information is included in the request and shipping to the U.S. or Canada; otherwise, optional.  #### Tax Calculation Optional field for U.S. and Canadian taxes. Not applicable to international and value added taxes. Billing address objects will be used to determine the cardholder’s location when shipTo objects are not present.
     */
    locality?: string;
    /**
     * Postal code for the shipping address. The postal code must consist of 5 to 9 digits.  Required field for authorization if any shipping address information is included in the request and shipping to the U.S. or Canada; otherwise, optional.  When the billing country is the U.S., the 9-digit postal code must follow this format: [5 digits][dash][4 digits]  Example 12345-6789  When the billing country is Canada, the 6-digit postal code must follow this format: [alpha][numeric][alpha][space][numeric][alpha][numeric]  Example A1B 2C3  #### American Express Direct Before sending the postal code to the processor, all nonalphanumeric characters are removed and, if the remaining value is longer than nine characters, the value is truncated starting from the right side. #### Tax Calculation Optional field for U.S. and Canadian taxes. Not applicable to international and value added taxes. Billing address objects will be used to determine the cardholder’s location when shipTo objects are not present.
     */
    postalCode?: string;
    /**
     * First line of the shipping address.  Required field for authorization if any shipping address information is included in the request; otherwise, optional.  #### Tax Calculation Optional field for U.S. and Canadian taxes. Not applicable to international and value added taxes. Billing address objects will be used to determine the cardholder’s location when shipTo objects are not present.
     */
    address1?: string;
    /**
     * Second line of the shipping address.  Optional field.  #### Tax Calculation Optional field for U.S. and Canadian taxes. Not applicable to international and value added taxes. Billing address objects will be used to determine the cardholder’s location when shipTo objects are not present.
     */
    address2?: string;
    /**
     * Third line of the shipping address.  #### Tax Calculation Optional field for U.S. and Canadian taxes. Not applicable to international and value added taxes. Billing address objects will be used to determine the cardholder’s location when shipTo objects are not present.
     */
    address3?: string;
  }
  export interface Vasv2taxOrderInformationShippingDetails {
    /**
     * City where the product is shipped from. This field is used only when the `orderInformation.shipTo.administrativeArea` and `orderInformation.shipTo.country` fields are present.  **NOTE** If this field appears in a `lineItems` object, then the value of this field in the `lineItems` object overrides the value of the corresponding field at the request-level or order-level object.  #### Tax Calculation This field is used to determine tax rules and/or rates applied to the transaction based on sourcing.  Optional for U.S. and Canadian taxes. Not applicable to international and value added taxes.
     */
    shipFromLocality?: string;
    /**
     * Country from which the order is shipped. This field is used only when `orderInformation.shippingDetails.shipFromLocality` and `orderInformation.shippingDetails.shipFromAdministrativeArea` are present. Use the [ISO Standard Country Codes](http://apps.cybersource.com/library/documentation/sbc/quickref/countries_alpha_list.pdf).  **NOTE** If this field appears in a `lineItems` object, then the value of this field in the `lineItems` object overrides the value of the corresponding field at the request-level or order-level object.  #### Tax Calculation This field is used to determine tax rules and/ or rates applied to the transaction based on sourcing.  Optional for U.S., Canadian, international tax, and value added taxes.
     */
    shipFromCountry?: string;
    /**
     * Postal code where the product is shipped from.  #### Tax Calculation This field is used to determine tax rules and/or rates applied to the transaction based on sourcing.  Optional for U.S. and Canadian taxes. Not applicable to international and value added taxes.
     */
    shipFromPostalCode?: string;
    /**
     * State from which the order is shipped. This field is used only when `orderInformation.shippingDetails.shipFromLocality` and `orderInformation.shippingDetails.shipFromCountry` are present. Use the [State, Province, and Territory Codes for the United States and Canada](http://apps.cybersource.com/library/documentation/sbc/quickref/states_and_provinces.pdf).  **NOTE** If this field appears in a `lineItems` object, then the value of this field in the `lineItems` object overrides the value of the corresponding field at the request-level or order-level object.  #### Tax Calculation This field is used to determine tax rules and/or rates applied to the transaction based on sourcing.  Optional for U.S. and Canadian taxes. Not applicable to international and value added taxes.
     */
    shipFromAdministrativeArea?: string;
  }
  export interface Vasv2taxTaxInformation {
    /**
     * Reporting date of transaction. Format: YYYYMMDD. Defaults to current date if not specified. Also the default tax calculation date unless a different date is specified in `orderInformation.invoiceDetails.invoiceDate`.  Optional for U.S., Canadian, international tax, and value added taxes.
     */
    reportingDate?: string;
    /**
     * If a past or future date is specified in `orderInformation.invoiceDetails.invoiceDate`, then provide the reason for that for audit purposes. Typical reasons include: 'Return', 'Layaway', 'Imported'.  Optional for U.S., Canadian, international tax, and value added taxes.
     */
    dateOverrideReason?: string;
    /**
     * Comma-separated list of states or provinces in which merchandise is taxable. Note merchandise may be still be non-taxable or tax exempt depending on the product taxability. Indicate the type of product you are selling in the product code field for product-level taxability rules to be applied. Do not use both the `taxInformation.nexus` and `taxInformation.noNexus` fields in your request. If you do not include this field in a tax calculation service request, the tax system makes its calculations as if you have nexus in every US state or Canadian province. Use the [State, Province, and Territory Codes for the United States and Canada](https://developer.cybersource.com/library/documentation/sbc/quickref/states_and_provinces.pdf).  If you indicate you do not have nexus in the destination state, jurisdiction level fields are left blank in the Tax Detail Report.  Optional field for U.S. and Canadian taxes only. Either this field or `taxInformation.noNexus` is required if you do not have nexus in every state or province.  Not applicable for international and value added taxes.
     */
    nexus?: Array<string>;
    /**
     * Comma-separated list of states or provinces where you do not have nexus. Check with a tax advisor to determine where your business has nexus. Do not use both the `taxInformation.nexus` and `taxInformation.noNexus` fields in your request. If you do not include this field in a tax calculation service request, the tax system makes its calculations as if you have nexus in every US state or Canadian province. Use the [State, Province, and Territory Codes for the United States and Canada](https://developer.cybersource.com/library/documentation/sbc/quickref/states_and_provinces.pdf).  If you indicate you do not have nexus in the destination state, jurisdiction level fields are left blank in the Tax Detail Report.  Optional field for U.S. and Canadian taxes only. Either this field or `taxInformation.nexus` is required if you do not have nexus in every state or province.  Not applicable for international and value added taxes.
     */
    noNexus?: Array<string>;
    /**
     * Whether or not to display tax amounts for each line item. This field can contain one of the following values: - `Yes` - Display tax amounts for each line item - `No` (default) - Do not display tax amounts for each line item  Optional for U.S., Canadian, international tax, and value added taxes.
     */
    showTaxPerLineItem?: string;
    /**
     * Indicates whether this is a committed tax transaction. For a committed tax transaction, the status in the Tax Detail Report is “Committed.” For an uncommitted tax transaction, the status in the Tax Detail Report is “Uncommitted.” Possible values: - `true`: This is a committed tax transaction. - `false` (default): This is not a committed tax transaction.  A committed tax request is a tax service request that sets the status field in the Tax Detail Report to committed. The committed status indicates that the amount calculated by the tax service is included in the amount of a capture or credit.  Use a void service request to cancels a committed tax request or a committed refund tax request. The void transaction is included as a separate entry in the Tax Detail Report. The value of the status field is cancelled. The value of the link ID is the request ID of the committed tax request or refund tax request that was voided. You can use the value of the link ID to reconcile your orders.  Optional for U.S., Canadian, international tax, and value added taxes.
     */
    commitIndicator?: boolean;
    /**
     * Indicates whether this is a refund tax transaction. For a refund tax transaction, amounts in the Tax Detail Report will be negative. Possible values: - `true`: This is a refund tax transaction. - `false` (default): This is not a refund tax transaction.  A refund tax request is a tax service request that sets the transaction type field in the Tax Detail Report to refunded and makes the reported amount negative. Tax amounts are returned as positive amounts in reply messages, but they are saved in reports as negative amounts which enables the reporting software to accurately calculate the aggregate amounts.  Optional for U.S., Canadian, international tax, and value added taxes.
     */
    refundIndicator?: boolean;
  }
  export interface Vasv2taxidClientReferenceInformation {
    /**
     * Merchant-generated order reference or tracking number. It is recommended that you send a unique value for each transaction so that you can perform meaningful searches for the transaction.  #### Used by **Authorization** Required field.  #### PIN Debit Requests for PIN debit reversals need to use the same merchant reference number that was used in the transaction that is being reversed.  Required field for all PIN Debit requests (purchase, credit, and reversal).  #### FDC Nashville Global Certain circumstances can cause the processor to truncate this value to 15 or 17 characters for Level II and Level III processing, which can cause a discrepancy between the value you submit and the value included in some processor reports.
     */
    code?: string;
    /**
     * Comments
     */
    comments?: string;
    partner?: Vasv2taxidClientReferenceInformationPartner;
  }
  export interface Vasv2taxidClientReferenceInformationPartner {
    /**
     * Identifier for the partner that is integrated to CyberSource.  Send this value in all requests that are sent through the partner solution. CyberSource assigns the ID to the partner.  **Note** When you see a solutionId of 999 in reports, the solutionId that was submitted is incorrect.
     */
    solutionId?: string;
    /**
     * Identifier for the developer that helped integrate a partner solution to CyberSource.  Send this value in all requests that are sent through the partner solutions built by that developer. CyberSource assigns the ID to the developer.  **Note** When you see a developer ID of 999 in reports, the developer ID that was submitted is incorrect.
     */
    developerId?: string;
  }
  export interface VerifyCustomerAddressRequest {
    clientReferenceInformation?: Riskv1addressverificationsClientReferenceInformation;
    orderInformation?: Riskv1addressverificationsOrderInformation;
    buyerInformation?: Riskv1addressverificationsBuyerInformation;
  }
  export interface VoidCaptureRequest {
    clientReferenceInformation?: Ptsv2paymentsidreversalsClientReferenceInformation;
    paymentInformation?: Ptsv2paymentsidvoidsPaymentInformation;
  }
  export interface VoidCreditRequest {
    clientReferenceInformation?: Ptsv2paymentsidreversalsClientReferenceInformation;
    paymentInformation?: Ptsv2paymentsidvoidsPaymentInformation;
  }
  export interface VoidPaymentRequest {
    clientReferenceInformation?: Ptsv2paymentsidreversalsClientReferenceInformation;
    paymentInformation?: Ptsv2paymentsidvoidsPaymentInformation;
  }
  export interface VoidRefundRequest {
    clientReferenceInformation?: Ptsv2paymentsidreversalsClientReferenceInformation;
    paymentInformation?: Ptsv2paymentsidvoidsPaymentInformation;
  }
  export interface VoidTaxRequest {
    clientReferenceInformation?: Vasv2taxidClientReferenceInformation;
  }

  export class AsymmetricKeyManagementApi {
    config: MerchantConfig;
    apiClient: ApiClient;

    constructor(config: MerchantConfig, apiClient: ApiClient);

    /**
     * 'Create one or more PKCS#12 keys'
     * @summary Create one or more PKCS#12 keys
     * @param createP12KeysRequest
     * @param {*} [options] Override http request options.
     */
    createP12Keys(
      createP12KeysRequest: CreateP12KeysRequest,
      callback?: any,
    ): KmsV2KeysAsymPost201Response;
    /**
     * 'Delete one or more PKCS#12 keys'
     * @summary Delete one or more PKCS#12 keys
     * @param deleteBulkP12KeysRequest
     * @param {*} [options] Override http request options.
     */
    deleteBulkP12Keys(
      deleteBulkP12KeysRequest: DeleteBulkP12KeysRequest,
      callback?: any,
    ): KmsV2KeysAsymDeletesPost200Response;
    /**
     * Retrieves keys details by providing the key id.
     * @summary Retrieves PKCS#12 key details
     * @param keyId Key ID.
     * @param {*} [options] Override http request options.
     */
    getP12KeyDetails(
      keyId: string,
      callback?: any,
    ): KmsV2KeysAsymGet200Response;
  }

  export class CaptureApi {
    config: MerchantConfig;
    apiClient: ApiClient;

    constructor(config: MerchantConfig, apiClient: ApiClient);

    /**
     * Include the payment ID in the POST request to capture the payment amount.
     * @summary Capture a Payment
     * @param capturePaymentRequest
     * @param id The payment ID returned from a previous payment request. This ID links the capture to the payment.
     * @param {*} [options] Override http request options.
     */
    capturePayment(
      capturePaymentRequest: CapturePaymentRequest,
      id: string,
      callback?: any,
    ): PtsV2PaymentsCapturesPost201Response;
  }

  export class ConversionDetailsApi {
    config: MerchantConfig;
    apiClient: ApiClient;

    constructor(config: MerchantConfig, apiClient: ApiClient);

    /**
     * Get conversion detail of transactions for a merchant.
     * @summary Get Conversion Detail Transactions
     * @param startTime Valid report Start Time in **ISO 8601 format** Please refer the following link to know more about ISO 8601 format.[Rfc Date Format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)  **Example date format:**   - yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ (e.g. 2018-01-01T00:00:00.000Z)
     * @param endTime Valid report End Time in **ISO 8601 format** Please refer the following link to know more about ISO 8601 format.[Rfc Date Format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)  **Example date format:**   - yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ (e.g. 2018-01-01T00:00:00.000Z)
     * @param organizationId Valid Cybersource Organization Id
     * @param {*} [options] Override http request options.
     */
    getConversionDetail(
      startTime: string,
      endTime: string,
      organizationId?: string,
      callback?: any,
    ): ReportingV3ConversionDetailsGet200Response;
  }

  export class CreateNewWebhooksApi {
    config: MerchantConfig;
    apiClient: ApiClient;

    constructor(config: MerchantConfig, apiClient: ApiClient);
    createWebhookSubscription(createWebhookRequest?: CreateWebhookRequest, callback?: any): InlineResponse2013;
    /**
     * Retrieve a list of products and event types that your account is eligible for. These products and events are the ones that you may subscribe to in the next step of creating webhooks.
     * @summary Find Products You Can Subscribe To
     * @param organizationId The Organization Identifier.
     * @param {*} [options] Override http request options.
     */
    // findProductsToSubscribe (organizationId: string, callback?: any) : Array&lt;InlineResponse2003: any;
    /**
     * Create security keys that CyberSource will use internally to connect to your servers and validate messages using a digital signature.  Select the CREATE example for CyberSource to generate the key on our server and maintain it for you as well. Remeber to save the key in the API response, so that you can use it to validate messages later. 
     * @summary Create Webhook Security Keys
     * @param vCSenderOrganizationId Sender organization id
     * @param vCPermissions Encoded user permissions returned by the CGK, for the entity user who initiated the boarding
     * @param vCCorrelationId A globally unique id associated with your request
     * @param saveSymEgressKey Provide egress Symmetric key information to save (create or store or refresh)
     * @param {*} [options] Override http request options.
     */
    saveSymEgressKey(vCSenderOrganizationId: string, vCPermissions: string, vCCorrelationId?: string, callback?: any): InlineResponse2012;
  }
  export interface CreateWebhookRequest {
    /**
     * Client friendly webhook name.
     */
    name?: string;
    /**
     * Client friendly webhook description.
     */
    description?: string;
    /**
     * Organization Identifier (OrgId) or Merchant Identifier (MID).
     */
    organizationId?: string;
    /**
     * To see the valid productId and eventTypes, call the \"Create and Manage Webhooks - Retrieve a list of event types\" endpoint.
     */
    productId?: string;
    /**
     * Array of the different events for a given product id.
     */
    eventTypes?: Array<string>;
    /**
     * The client's endpoint (URL) to receive webhooks.
     */
    webhookUrl?: string;
    /**
     * The client's health check endpoint (URL). This should be as close as possible to the actual webhookUrl. If the user does not provide the health check URL, it is the user's responsibility to re-activate the webhook if it is deactivated by calling the test endpoint. 
     */
    healthCheckUrl?: string;
    /**
     * The webhook scope. 1. SELF The Webhook is used to deliver webhooks for only this Organization (or Merchant). 2. DESCENDANTS The Webhook is used to deliver webhooks for this Organization and its children. 3. CUSTOM The Webhook is used to deliver webhooks for the OrgIds (or MiDs) explicitly listed in scopeData field. 
     */
    notificationScope?: string;
    retryPolicy?: Notificationsubscriptionsv1webhooksRetryPolicy;
    securityPolicy?: Notificationsubscriptionsv1webhooksSecurityPolicy1;
  }
  export interface Notificationsubscriptionsv1webhooksSecurityPolicy1 {
    /**
     * Security Policy of the client server.
     */
    securityType?: string;
    /**
     * Internal client proxy type to be used by security policy.
     */
    proxyType?: string;
    config?: Notificationsubscriptionsv1webhooksSecurityPolicy1Config;
  }
  export interface Notificationsubscriptionsv1webhooksSecurityPolicy1Config {
    /**
     * Token expiration for the oAuth server.
     */
    oAuthTokenExpiry?: string;
    /**
     * Client direct endpoint to the oAuth server.
     */
    oAuthURL?: string;
    /**
     * Token type for the oAuth config.
     */
    oAuthTokenType?: string;
    additionalConfig?: Notificationsubscriptionsv1webhooksSecurityPolicy1ConfigAdditionalConfig;
  }
  export interface Notificationsubscriptionsv1webhooksSecurityPolicy1ConfigAdditionalConfig {
    aud?: string;
    clientId?: string;
    keyId?: string;
    scope?: string;
  }
  export interface Notificationsubscriptionsv1webhooksRetryPolicy {
    /**
     * This is used to calculate the Retry Sequence.  Sample calculations using firstRetry=10, interval=30, maxNumberOfRetries=3 Arithmetic = a+r(n-1) Retry 1 - 10 minutes Retry 2 - 10+30x1 = 40 minutes Retry 3 - 10+30x2 = 70 minutes  Geometric = ar^(n-1) Retry 1 - 10 minutes Retry 2 - 10x30^1 = 300 minutes Retry 3 - 10x30^2 = 9,000 minutes 
     */
    algorithm?: string;
    /**
     * When to initiate first retry, after the initial call failed. (in mins).
     */
    firstRetry?: number;
    /**
     * The interval between retries (in mins).
     */
    interval?: number;
    /**
     * The number of retries per sequence.
     */
    numberOfRetries?: number;
    /**
     * Deactivate the subscription if your retries fail to deliver.  If this is set to `true`, the automatic suspend and resume feature will occur. This would prevent new webhooks from attempting to deliver and to queue up until your healthCheckUrl returns 200 again, then all messages will be sent.  If this is set to `false`, new individual messages will continue to retry and exhaust all failures, but the subscription will stay active. 
     */
    deactivateFlag?: string;
    /**
     * The number of times to repeat the complete retry sequence. 0 => don't repeat the retry sequence 1 => repeat the retry sequence once (R1, R2, R3)+ (R1, R2, R3) 2 => repeat the retry sequence twice (R1, R2, R3) + (R1, R2, R3) + (R1, R2, R3) 
     */
    repeatSequenceCount?: number;
    /**
     * The time to wait to before repeating the complete retry sequence. Amount of time to wait between each sequence. Sample calculation using repeatSequenceWaitTime=10 (R1, R2, R3) + (10) + (R1, R2, R3) + (10) + (R1, R2, R3) 
     */
    repeatSequenceWaitTime?: number;
    /**
     * Additional data, if any.
     */
    additionalAttributes?: Array<{ [key: string]: string; }>;
  }
  export interface InlineResponse2013 {
    httpCode?: number;
    /**
     * Webhook Id. This is generated by the server.
     */
    webhookId?: string;
    /**
     * Organization ID
     */
    organizationId?: string;
    /**
     * The product you are receiving a webhook for.
     */
    productId?: string;
    /**
     * Array of the different events for a given product id.
     */
    eventTypes?: Array<string>;
    /**
     * The client's endpoint (URL) to receive webhooks.
     */
    webhookUrl?: string;
    /**
     * The client's health check endpoint (URL). This should be as close as possible to the actual webhookUrl.
     */
    healthCheckUrl?: string;
    notificationScope?: Notificationsubscriptionsv1webhooksNotificationScope;
    /**
     * Webhook status.
     */
    status?: string;
    /**
     * Client friendly webhook name.
     */
    name?: string;
    /**
     * Client friendly webhook description.
     */
    description?: string;
    retryPolicy?: Notificationsubscriptionsv1webhooksRetryPolicy;
    securityPolicy?: Notificationsubscriptionsv1webhooksSecurityPolicy;
    /**
     * Date on which webhook was created/registered.
     */
    createdOn?: string;
    /**
     * Date on which webhook was most recently updated.
     */
    updatedOn?: string;
    /**
     * Additional, free form configuration data.
     */
    additionalAttributes?: Array<{ [key: string]: string; }>;
  }
  export interface Notificationsubscriptionsv1webhooksNotificationScope {
    /**
     * The webhook scope. 1. SELF The Webhook is used to deliver webhooks for only this Organization (or Merchant). 2. DESCENDANTS The Webhook is used to deliver webhooks for this Organization and its children. 3. CUSTOM The Webhook is used to deliver webhooks for the OrgIds (or MiDs) explicitly listed in scopeData field
     */
    scope?: string;
    /**
     * Applicable only if scope=CUSTOM. This should contains a Set of MIDs or OrgIDs for which this subscription is applicable.
     */
    scopeData?: Array<string>;
  }
  export interface Notificationsubscriptionsv1webhooksSecurityPolicy {
    /**
     * Security Policy of the client server.
     */
    securityType?: string;
    config?: Notificationsubscriptionsv1webhooksSecurityPolicyConfig;
  }
  export interface Notificationsubscriptionsv1webhooksSecurityPolicyConfig {
    /**
     * Token expiration for the oAuth server.
     */
    oAuthTokenExpiry?: string;
    /**
     * Client direct endpoint to the oAuth server.
     */
    oAuthURL?: string;
    /**
     * Token type for the oAuth config.
     */
    oAuthTokenType?: string;
  }
  export interface SaveSymEgressKey {
    clientReferenceInformation?: Kmsegressv2keyssymClientReferenceInformation;
    /**
     * Client request action. 
     */
    clientRequestAction: string;
    keyInformation: Kmsegressv2keyssymKeyInformation;
  }
  export interface Kmsegressv2keyssymClientReferenceInformation {
    /**
     * Client generated order reference or tracking number. CyberSource recommends that you send a unique value for each transaction so that you can perform meaningful searches for the transaction. 
     */
    'code'?: string;
  }
  export interface Kmsegressv2keyssymKeyInformation {
    /**
     * Provider name 
     */
    provider?: string;
    /**
     * Tenant name 
     */
    tenant?: string;
    /**
     * Type of the key 
     */
    keyType?: string;
    /**
     * Organization Id 
     */
    organizationId?: string;
    /**
     * Client key Id 
     */
    clientKeyId?: string;
    /**
     * Key Serial Number 
     */
    keyId?: string;
    /**
     * Value of the key 
     */
    key?: string;
    /**
     * The status of the key 
     */
    status?: string;
    /**
     * Key expiry duration in days 
     */
    expiryDuration?: string;
  }
  export interface InlineResponse2012 {
    /**
     * Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ` Example `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The `T` separates the date and the time. The `Z` indicates UTC. 
     */
    submitTimeUtc?: string;
    /**
     * The status of the submitted transaction. Possible values:  - ACCEPTED 
     */
    status?: string;
    clientReferenceInformation?: Kmsegressv2keyssymClientReferenceInformation;
    keyInformation?: InlineResponse2012KeyInformation;
  }
  export interface InlineResponse2012KeyInformation {
    /**
     * Provider name 
     */
    provider?: string;
    /**
     * Tenant name 
     */
    tenant?: string;
    /**
     * Organization Id 
     */
    organizationId?: string;
    /**
     * Client key Id 
     */
    clientKeyId?: string;
    /**
     * Key Serial Number 
     */
    keyId?: string;
    /**
     * Value of the key 
     */
    key?: string;
    /**
     * Type of the key 
     */
    keyType?: string;
    /**
     * The status of the key 
     */
    status?: string;
    /**
     * The expiration time in UTC. `Format: YYYY-MM-DDThh:mm:ssZ` Example 2016-08-11T22:47:57Z equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The T separates the date and the time. The Z indicates UTC. 
     */
    expirationDate?: string;
    /**
     * Message in case of failed key 
     */
    message?: string;
    errorInformation?: InlineResponse2012KeyInformationErrorInformation;
  }
  export interface InlineResponse2012KeyInformationErrorInformation {
    /**
     * The reason of the status. Possible values:  - MISSING_FIELD  - INVALID_DATA 
     */
    reason?: string;
    details?: Array<InlineResponse2012KeyInformationErrorInformationDetails>;
  }
  export interface InlineResponse2012KeyInformationErrorInformationDetails {
    /**
     * This is the flattened JSON object field name/path that is either missing or invalid
     */
    field?: string;
    /**
     * Possible reasons for the error. Possible values:  - MISSING_FIELD  - INVALID_DATA 
     */
    reason?: string;
  }
  export class ManageWebhooksApi {
    config: MerchantConfig;
    apiClient: ApiClient;

    constructor(config: MerchantConfig, apiClient: ApiClient)

    /**
     * Delete the webhook. Please note that deleting a particular webhook does not delete the history of the webhook notifications.
     * @summary Delete a Webhook Subscription
     * @param webhookId The webhook identifier.
     * @param {*} [options] Override http request options.
     */
    deleteWebhookSubscription(webhookId: string, callback?: any): null;
    /**
     * Retrieve the details of a specific webhook by supplying the webhook ID in the path.
     * @summary Get Details On a Single Webhook
     * @param webhookId The webhook Identifier
     * @param {*} [options] Override http request options.
     */
    getWebhookSubscriptionById(webhookId: string, callback?: any): InlineResponse2005;
    /**
     * Retrieve a list of all previously created webhooks.
     * @summary Get Details On All Created Webhooks
     * @param organizationId The Organization Identifier.
     * @param productId The Product Identifier.
     * @param eventType The Event Type.
     * @param {*} [options] Override http request options.
     */
    // getWebhookSubscriptionsByOrg (organizationId: string, productId: string, eventType: string, callback?: any) : Array&lt;InlineResponse2004&gt;;
    /**
     * Store and manage certificates that will be used to preform Message Level Encryption (MLE). Each new webhook will need its own unique asymmetric certificate. You can either use a digital certificate issued/signed by a CA or self-sign your own using the documentation available on the Developer Guide. 
     * @summary Message Level Encryption
     * @param vCSenderOrganizationId Sender organization id
     * @param vCPermissions Encoded user permissions returned by the CGK, for the entity user who initiated the boarding
     * @param saveAsymEgressKey Provide egress Asymmetric key information to save (create or store)
     * @param vCCorrelationId A globally unique id associated with your request
     * @param {*} [options] Override http request options.
     */
    saveAsymEgressKey(vCSenderOrganizationId: string, vCPermissions: string, saveAsymEgressKey: SaveAsymEgressKey, vCCorrelationId?: string, callback?: any): InlineResponse2014;
    /**
     * Update the webhook subscription using PATCH.
     * @summary Update a Webhook Subscription
     * @param webhookId The Webhook Identifier.
     * @param updateWebhookRequest The webhook payload or changes to apply.
     * @param {*} [options] Override http request options.
     */
    updateWebhookSubscription(webhookId: string, updateWebhookRequest?: UpdateWebhookRequest, callback?: any): null;
  }
  export interface UpdateWebhookRequest {
    /**
     * Client friendly webhook name.
     */
    name?: string;
    /**
     * Client friendly webhook description.\\
     */
    description?: string;
    /**
     * Organization Id.
     */
    organizationId?: string;
    /**
     * The product you are receiving a webhook for.
     */
    productId?: string;
    /**
     * Array of the different events for a given product id.
     */
    eventTypes?: Array<string>;
    /**
     * The client's endpoint (URL) to receive webhooks.
     */
    webhookUrl?: string;
    /**
     * The client's health check endpoint (URL). This should be as close as possible to the actual webhookUrl.
     */
    healthCheckUrl?: string;
    /**
     * Webhook status.
     */
    status?: string;
    notificationScope?: Notificationsubscriptionsv1webhooksNotificationScope;
    retryPolicy?: Notificationsubscriptionsv1webhooksRetryPolicy;
    securityPolicy?: Notificationsubscriptionsv1webhooksSecurityPolicy;
    /**
     * Additional, free form configuration data.
     */
    additionalAttributes?: Array<{ [key: string]: string; }>;
  }
  export interface InlineResponse2014 {
    /**
     * Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ` Example `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The `T` separates the date and the time. The `Z` indicates UTC. 
     */
    submitTimeUtc?: string;
    /**
     * The status of the submitted transaction. Possible values:  - ACCEPTED 
     */
    status?: string;
    clientReferenceInformation?: Kmsegressv2keyssymClientReferenceInformation;
    keyInformation?: Kmsegressv2keysasymKeyInformation;
  }
  export interface SaveAsymEgressKey {
    clientReferenceInformation?: Kmsegressv2keysasymClientReferenceInformation;
    /**
     * Client request action. 
     */
    clientRequestAction: string;
    keyInformation: Kmsegressv2keysasymKeyInformation;
  }
  export interface Kmsegressv2keysasymClientReferenceInformation {
    /**
     * Client generated order reference or tracking number. CyberSource recommends that you send a unique value for each transaction so that you can perform meaningful searches for the transaction. 
     */
    code?: string;
  }
  export interface Kmsegressv2keysasymKeyInformation {
    /**
     * Provider name 
     */
    provider?: string;
    /**
     * Tenant name 
     */
    tenant?: string;
    /**
     * Type of the key 
     */
    keyType?: string;
    /**
     * Organization Id 
     */
    organizationId?: string;
    /**
     * Public certificate with only base64 encoded payload and not the header (BEGIN CERTIFICATE) and footer (END CERTIFICATE) 
     */
    pub?: string;
    /**
     * Key Serial Number 
     */
    keyId?: string;
    /**
     * Private certificate with only base64 encoded payload and not header (BEGIN CERTIFICATE) and footer (END CERTIFICATE) 
     */
    pvt?: string;
    /**
     * The status of the key 
     */
    status?: string;
    /**
     * Key expiry duration in days 
     */
    expiryDuration?: string;
  }
  export interface InlineResponse2005 {
    /**
     * Webhook Id. This is generated by the server.
     */
    webhookId?: string;
    /**
     * Organization ID.
     */
    organizationId?: string;
    products?: Array<Notificationsubscriptionsv1webhooksProducts>;
    /**
     * The client's endpoint (URL) to receive webhooks.
     */
    webhookUrl?: string;
    /**
     * The client's health check endpoint (URL). This should be as close as possible to the actual webhookUrl.
     */
    healthCheckUrl?: string;
    notificationScope?: Notificationsubscriptionsv1webhooksNotificationScope;
    /**
     * Webhook status.
     */
    status?: string;
    /**
     * Client friendly webhook name.
     */
    name?: string;
    /**
     * Client friendly webhook description.
     */
    description?: string;
    retryPolicy?: Notificationsubscriptionsv1webhooksRetryPolicy;
    securityPolicy?: Notificationsubscriptionsv1webhooksSecurityPolicy;
    /**
     * Date on which webhook was created/registered.
     */
    createdOn?: string;
    /**
     * Date on which webhook was most recently updated.
     */
    updatedOn?: string;
    /**
     * Additional, free form configuration data.
     */
    additionalAttributes?: Array<{ [key: string]: string; }>;
  }
  export interface Notificationsubscriptionsv1webhooksProducts {
    /**
     * Product ID.
     */
    productId?: string;
    eventTypes?: Array<string>;
  }
  export class CreditApi {
    config: MerchantConfig;
    apiClient: ApiClient;

    constructor(config: MerchantConfig, apiClient: ApiClient);

    /**
     * POST to the credit resource to credit funds to a specified credit card.
     * @summary Process a Credit
     * @param createCreditRequest
     * @param {*} [options] Override http request options.
     */
    createCredit(
      createCreditRequest: CreateCreditRequest,
      callback?: any,
    ): PtsV2CreditsPost201Response;
  }

  export class CustomerApi {
    config: MerchantConfig;
    apiClient: ApiClient;

    constructor(config: MerchantConfig, apiClient: ApiClient);

    /**
     *
     * @summary Delete a Customer
     * @param customerTokenId The TokenId of a customer.
     * @param profileId The id of a profile containing user specific TMS configuration.
     * @param {*} [options] Override http request options.
     */
    deleteCustomer(
      customerTokenId: string,
      profileId?: string,
      callback?: any,
    ): null;
    /**
     *
     * @summary Retrieve a Customer
     * @param customerTokenId The TokenId of a customer.
     * @param profileId The id of a profile containing user specific TMS configuration.
     * @param {*} [options] Override http request options.
     */
    getCustomer(
      customerTokenId: string,
      profileId?: string,
      callback?: any,
    ): PostCustomerRequest;
    /**
     *
     * @summary Update a Customer
     * @param customerTokenId The TokenId of a customer.
     * @param patchCustomerRequest
     * @param profileId The id of a profile containing user specific TMS configuration.
     * @param {*} [options] Override http request options.
     */
    patchCustomer(
      customerTokenId: string,
      patchCustomerRequest: PatchCustomerRequest,
      profileId?: string,
      callback?: any,
    ): PatchCustomerRequest;
    /**
     *
     * @summary Create a Customer
     * @param postCustomerRequest
     * @param profileId The id of a profile containing user specific TMS configuration.
     * @param {*} [options] Override http request options.
     */
    postCustomer(
      postCustomerRequest: PostCustomerRequest,
      profileId?: string,
      callback?: any,
    ): PostCustomerRequest;
  }

  export class CustomerPaymentInstrumentApi {
    config: MerchantConfig;
    apiClient: ApiClient;

    constructor(config: MerchantConfig, apiClient: ApiClient);

    /**
     *
     * @summary Delete a Customer Payment Instrument
     * @param customerTokenId The TokenId of a customer.
     * @param paymentInstrumentTokenId The TokenId of a payment instrument.
     * @param profileId The id of a profile containing user specific TMS configuration.
     * @param {*} [options] Override http request options.
     */
    deleteCustomerPaymentInstrument(
      customerTokenId: string,
      paymentInstrumentTokenId: string,
      profileId?: string,
      callback?: any,
    ): null;
    /**
     *
     * @summary Retrieve a Customer Payment Instrument
     * @param customerTokenId The TokenId of a customer.
     * @param paymentInstrumentTokenId The TokenId of a payment instrument.
     * @param profileId The id of a profile containing user specific TMS configuration.
     * @param {*} [options] Override http request options.
     */
    getCustomerPaymentInstrument(
      customerTokenId: string,
      paymentInstrumentTokenId: string,
      profileId?: string,
      callback?: any,
    ): PostCustomerPaymentInstrumentRequest;
    /**
     *
     * @summary List Payment Instruments for a Customer
     * @param customerTokenId The TokenId of a customer.
     * @param profileId The id of a profile containing user specific TMS configuration.
     * @param offset Starting record in zero-based dataset that should be returned as the first object in the array. Default is 0.
     * @param limit The maximum number that can be returned in the array starting from the offset record in zero-based dataset. Default is 20, maximum is 100.
     * @param {*} [options] Override http request options.
     */
    getCustomerPaymentInstrumentsList(
      customerTokenId: string,
      profileId?: string,
      offset?: number,
      limit?: number,
      callback?: any,
    ): PaymentInstrumentListForCustomer;
    /**
     *
     * @summary Update a Customer Payment Instrument
     * @param customerTokenId The TokenId of a customer.
     * @param paymentInstrumentTokenId The TokenId of a payment instrument.
     * @param patchCustomerPaymentInstrumentRequest
     * @param profileId The id of a profile containing user specific TMS configuration.
     * @param {*} [options] Override http request options.
     */
    patchCustomersPaymentInstrument(
      customerTokenId: string,
      paymentInstrumentTokenId: string,
      patchCustomerPaymentInstrumentRequest: PatchCustomerPaymentInstrumentRequest,
      profileId?: string,
      callback?: any,
    ): PatchCustomerPaymentInstrumentRequest;
    /**
     *
     * @summary Create a Customer Payment Instrument
     * @param customerTokenId The TokenId of a customer.
     * @param postCustomerPaymentInstrumentRequest
     * @param profileId The id of a profile containing user specific TMS configuration.
     * @param {*} [options] Override http request options.
     */
    postCustomerPaymentInstrument(
      customerTokenId: string,
      postCustomerPaymentInstrumentRequest: PostCustomerPaymentInstrumentRequest,
      profileId?: string,
      callback?: any,
    ): PostCustomerPaymentInstrumentRequest;
  }

  export class CustomerShippingAddressApi {
    config: MerchantConfig;
    apiClient: ApiClient;

    constructor(config: MerchantConfig, apiClient: ApiClient);

    /**
     *
     * @summary Delete a Customer Shipping Address
     * @param customerTokenId The TokenId of a customer.
     * @param shippingAddressTokenId The TokenId of an shipping address.
     * @param profileId The id of a profile containing user specific TMS configuration.
     * @param {*} [options] Override http request options.
     */
    deleteCustomerShippingAddress(
      customerTokenId: string,
      shippingAddressTokenId: string,
      profileId?: string,
      callback?: any,
    ): null;
    /**
     *
     * @summary Retrieve a Customer Shipping Address
     * @param customerTokenId The TokenId of a customer.
     * @param shippingAddressTokenId The TokenId of an shipping address.
     * @param profileId The id of a profile containing user specific TMS configuration.
     * @param {*} [options] Override http request options.
     */
    getCustomerShippingAddress(
      customerTokenId: string,
      shippingAddressTokenId: string,
      profileId?: string,
      callback?: any,
    ): PostCustomerShippingAddressRequest;
    /**
     *
     * @summary List Shipping Addresses for a Customer
     * @param customerTokenId The TokenId of a customer.
     * @param profileId The id of a profile containing user specific TMS configuration.
     * @param offset Starting record in zero-based dataset that should be returned as the first object in the array. Default is 0.
     * @param limit The maximum number that can be returned in the array starting from the offset record in zero-based dataset. Default is 20, maximum is 100.
     * @param {*} [options] Override http request options.
     */
    getCustomerShippingAddressesList(
      customerTokenId: string,
      profileId?: string,
      offset?: number,
      limit?: number,
      callback?: any,
    ): ShippingAddressListForCustomer;
    /**
     *
     * @summary Update a Customer Shipping Address
     * @param customerTokenId The TokenId of a customer.
     * @param shippingAddressTokenId The TokenId of an shipping address.
     * @param patchCustomerShippingAddressRequest
     * @param profileId The id of a profile containing user specific TMS configuration.
     * @param ifMatch Contains an ETag value from a GET request to make the request conditional.
     * @param {*} [options] Override http request options.
     */
    patchCustomersShippingAddress(
      customerTokenId: string,
      shippingAddressTokenId: string,
      patchCustomerShippingAddressRequest: PatchCustomerShippingAddressRequest,
      profileId?: string,
      ifMatch?: string,
      callback?: any,
    ): PatchCustomerShippingAddressRequest;
    /**
     *
     * @summary Create a Customer Shipping Address
     * @param customerTokenId The TokenId of a customer.
     * @param postCustomerShippingAddressRequest
     * @param profileId The id of a profile containing user specific TMS configuration.
     * @param {*} [options] Override http request options.
     */
    postCustomerShippingAddress(
      customerTokenId: string,
      postCustomerShippingAddressRequest: PostCustomerShippingAddressRequest,
      profileId?: string,
      callback?: any,
    ): PostCustomerShippingAddressRequest;
  }

  export class DecisionManagerApi {
    config: MerchantConfig;
    apiClient: ApiClient;

    constructor(config: MerchantConfig, apiClient: ApiClient);

    /**
     * This call adds/deletes/converts the request information in the negative list.  Provide the list to be updated as the path parameter. This value can be 'postiive', 'negative' or 'review'.
     * @summary List Management
     * @param type The list to be updated. It can be &#39;positive&#39;, &#39;negative&#39; or &#39;review&#39;.
     * @param addNegativeListRequest
     * @param {*} [options] Override http request options.
     */
    addNegative(
      type: string,
      addNegativeListRequest: AddNegativeListRequest,
      callback?: any,
    ): RiskV1UpdatePost201Response;
    /**
     * Decision Manager can help you automate and streamline your fraud operations. Decision Manager will return a decision based on the request values.
     * @summary Create Decision Manager
     * @param createBundledDecisionManagerCaseRequest
     * @param {*} [options] Override http request options.
     */
    createBundledDecisionManagerCase(
      createBundledDecisionManagerCaseRequest: CreateBundledDecisionManagerCaseRequest,
      callback?: any,
    ): RiskV1DecisionsPost201Response;
    /**
     * This can be used to - 1. Add known fraudulent data to the fraud history 2. Remove data added to history with Transaction Marking Tool or by uploading chargeback files 3. Remove chargeback data from history that was automatically added. For detailed information, contact your Cybersource representative  Place the request ID of the transaction you want to mark as suspect (or remove from history) as the path parameter in this request.
     * @summary Fraud Marking
     * @param id Request ID of the transaction that you want to mark as suspect or remove from history.
     * @param fraudMarkingActionRequest
     * @param {*} [options] Override http request options.
     */
    fraudUpdate(
      id: string,
      fraudMarkingActionRequest: FraudMarkingActionRequest,
      callback?: any,
    ): RiskV1UpdatePost201Response;
  }

  export class DownloadDTDApi {
    config: MerchantConfig;
    apiClient: ApiClient;

    constructor(config: MerchantConfig, apiClient: ApiClient);

    /**
     * Used to download DTDs for reports on no-auth.
     * @summary Download DTD for Report
     * @param reportDefinitionNameVersion Name and version of DTD file to download. Some DTDs only have one version. In that case version name is not needed. Some example values are ctdr-1.0, tdr, pbdr-1.1
     * @param {*} [options] Override http request options.
     */
    getDTDV2(reportDefinitionNameVersion: string, callback?: any): null;
  }

  export class DownloadXSDApi {
    config: MerchantConfig;
    apiClient: ApiClient;

    constructor(config: MerchantConfig, apiClient: ApiClient);

    /**
     * Used to download XSDs for reports on no-auth.
     * @summary Download XSD for Report
     * @param reportDefinitionNameVersion Name and version of XSD file to download. Some XSDs only have one version. In that case version name is not needed. Some example values are DecisionManagerDetailReport, DecisionManagerTypes
     * @param {*} [options] Override http request options.
     */
    getXSDV2(reportDefinitionNameVersion: string, callback?: any): null;
  }

  export class InstrumentIdentifierApi {
    config: MerchantConfig;
    apiClient: ApiClient;

    constructor(config: MerchantConfig, apiClient: ApiClient);

    /**
     *
     * @summary Delete an Instrument Identifier
     * @param instrumentIdentifierTokenId The TokenId of a Instrument Identifier.
     * @param profileId The id of a profile containing user specific TMS configuration.
     * @param {*} [options] Override http request options.
     */
    deleteInstrumentIdentifier(
      instrumentIdentifierTokenId: string,
      profileId?: string,
      callback?: any,
    ): null;
    /**
     *
     * @summary Retrieve an Instrument Identifier
     * @param instrumentIdentifierTokenId The TokenId of a Instrument Identifier.
     * @param profileId The id of a profile containing user specific TMS configuration.
     * @param {*} [options] Override http request options.
     */
    getInstrumentIdentifier(
      instrumentIdentifierTokenId: string,
      profileId?: string,
      callback?: any,
    ): PostInstrumentIdentifierRequest;
    /**
     *
     * @summary List Payment Instruments for an Instrument Identifier
     * @param instrumentIdentifierTokenId The TokenId of a Instrument Identifier.
     * @param profileId The id of a profile containing user specific TMS configuration.
     * @param offset Starting record in zero-based dataset that should be returned as the first object in the array. Default is 0.
     * @param limit The maximum number that can be returned in the array starting from the offset record in zero-based dataset. Default is 20, maximum is 100.
     * @param {*} [options] Override http request options.
     */
    getInstrumentIdentifierPaymentInstrumentsList(
      instrumentIdentifierTokenId: string,
      profileId?: string,
      offset?: number,
      limit?: number,
      callback?: any,
    ): PaymentInstrumentListForInstrumentIdentifier;
    /**
     *
     * @summary Update an Instrument Identifier
     * @param instrumentIdentifierTokenId The TokenId of a Instrument Identifier.
     * @param patchInstrumentIdentifierRequest Specify the previous transaction ID to update.
     * @param profileId The id of a profile containing user specific TMS configuration.
     * @param ifMatch Contains an ETag value from a GET request to make the request conditional.
     * @param {*} [options] Override http request options.
     */
    patchInstrumentIdentifier(
      instrumentIdentifierTokenId: string,
      patchInstrumentIdentifierRequest: PatchInstrumentIdentifierRequest,
      profileId?: string,
      ifMatch?: string,
      callback?: any,
    ): PatchInstrumentIdentifierRequest;
    /**
     *
     * @summary Create an Instrument Identifier
     * @param postInstrumentIdentifierRequest Please specify either a Card, Bank Account or Enrollable Card
     * @param profileId The id of a profile containing user specific TMS configuration.
     * @param {*} [options] Override http request options.
     */
    postInstrumentIdentifier(
      postInstrumentIdentifierRequest: PostInstrumentIdentifierRequest,
      profileId?: string,
      callback?: any,
    ): PostInstrumentIdentifierRequest;
  }

  export class InvoiceSettingsApi {
    config: MerchantConfig;
    apiClient: ApiClient;

    constructor(config: MerchantConfig, apiClient: ApiClient);

    /**
     * Get the invoice settings for the invoice payment page.
     * @summary Get Invoice Settings
     * @param {*} [options] Override http request options.
     */
    getInvoiceSettings(
      callback?: any,
    ): InvoicingV2InvoiceSettingsGet200Response;
    /**
     * Update invoice settings for the invoice payment page.
     * @summary Update Invoice Settings
     * @param invoiceSettingsRequest
     * @param {*} [options] Override http request options.
     */
    updateInvoiceSettings(
      invoiceSettingsRequest: InvoiceSettingsRequest,
      callback?: any,
    ): InvoicingV2InvoiceSettingsGet200Response;
  }

  export class InvoicesApi {
    config: MerchantConfig;
    apiClient: ApiClient;

    constructor(config: MerchantConfig, apiClient: ApiClient);

    /**
     * Create a new invoice.
     * @summary Create a New Invoice
     * @param createInvoiceRequest
     * @param {*} [options] Override http request options.
     */
    createInvoice(
      createInvoiceRequest: CreateInvoiceRequest,
      callback?: any,
    ): InvoicingV2InvoicesPost201Response;
    /**
     * Get a list of invoices.
     * @summary Get a List of Invoices
     * @param offset Page offset number.
     * @param limit Maximum number of items you would like returned.
     * @param status The status of the invoice.  Possible values:   - DRAFT   - CREATED   - SENT   - PARTIAL   - PAID   - CANCELED
     * @param {*} [options] Override http request options.
     */
    getAllInvoices(
      offset: number,
      limit: number,
      status?: string,
      callback?: any,
    ): InvoicingV2InvoicesAllGet200Response;
    /**
     * Get the details of a specific invoice.
     * @summary Get Invoice Details
     * @param id The invoice number.
     * @param {*} [options] Override http request options.
     */
    getInvoice(id: string, callback?: any): InvoicingV2InvoicesGet200Response;
    /**
     * Cancel an invoice.
     * @summary Cancel an Invoice
     * @param id The invoice number.
     * @param {*} [options] Override http request options.
     */
    performCancelAction(
      id: string,
      callback?: any,
    ): InvoicingV2InvoicesPost201Response;
    /**
     * Send an invoice.
     * @summary Send an Invoice
     * @param id The invoice number.
     * @param {*} [options] Override http request options.
     */
    performSendAction(
      id: string,
      callback?: any,
    ): InvoicingV2InvoicesPost201Response;
    /**
     * Update an invoice.
     * @summary Update an Invoice
     * @param id The invoice number.
     * @param updateInvoiceRequest Updating the invoice does not resend the invoice automatically. You must resend the invoice separately.
     * @param {*} [options] Override http request options.
     */
    updateInvoice(
      id: string,
      updateInvoiceRequest: UpdateInvoiceRequest,
      callback?: any,
    ): InvoicingV2InvoicesPost201Response;
  }

  export class KeyGenerationApi {
    config: MerchantConfig;
    apiClient: ApiClient;

    constructor(config: MerchantConfig, apiClient: ApiClient);

    /**
     * Generate a one-time use public key and key ID to encrypt the card number in the follow-on Tokenize Card request. The key used to encrypt the card number on the cardholder’s device or browser is valid for 15 minutes and must be used to verify the signature in the response message. CyberSource recommends creating a new key for each order. Generating a key is an authenticated request initiated from your servers, prior to requesting to tokenize the card data from your customer’s device or browser.
     * @summary Generate Key
     * @param format Indicator to enable the receipt of the Keys response in Flex 11+ format (JWT) or legacy (parameter not required)
     * @param generatePublicKeyRequest
     * @param {*} [options] Override http request options.
     */
    generatePublicKey(
      format: string,
      generatePublicKeyRequest: GeneratePublicKeyRequest,
      callback?: any,
    ): any;
  }

  export class MicroformIntegrationApi {
    config: MerchantConfig;
    apiClient: ApiClient;

    constructor(config: MerchantConfig, apiClient: ApiClient);

    /**
     * Generate a one-time use public key and key ID to encrypt the card number in the follow-on Tokenize Card request. The key used to encrypt the card number on the cardholder’s device or browser is valid for 15 minutes and must be used to verify the signature in the response message. CyberSource recommends creating a new key for each order. Generating a key is an authenticated request initiated from your servers, prior to requesting to tokenize the card data from your customer’s device or browser.
     * @summary Generate Key
     * @param generateCaptureContextRequest
     * @param {*} [options] Override http request options.
     */
    generateCaptureContext(
      generateCaptureContextRequest: GenerateCaptureContextRequest,
      callback?: any,
    ): string;
  }

  export class NetFundingsApi {
    config: MerchantConfig;
    apiClient: ApiClient;

    constructor(config: MerchantConfig, apiClient: ApiClient);

    /**
     * Get Netfunding information for an account or a merchant.
     * @summary Get Netfunding Information for an Account or a Merchant
     * @param startTime Valid report Start Time in **ISO 8601 format** Please refer the following link to know more about ISO 8601 format.[Rfc Date Format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)  **Example date format:**   - yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ (e.g. 2018-01-01T00:00:00.000Z)
     * @param endTime Valid report End Time in **ISO 8601 format** Please refer the following link to know more about ISO 8601 format.[Rfc Date Format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)  **Example date format:**   - yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ (e.g. 2018-01-01T00:00:00.000Z)
     * @param organizationId Valid Cybersource Organization Id
     * @param groupName Valid CyberSource Group Name.
     * @param {*} [options] Override http request options.
     */
    getNetFundingDetails(
      startTime: Date,
      endTime: Date,
      organizationId?: string,
      groupName?: string,
      callback?: any,
    ): ReportingV3NetFundingsGet200Response;
  }

  export class NotificationOfChangesApi {
    config: MerchantConfig;
    apiClient: ApiClient;

    constructor(config: MerchantConfig, apiClient: ApiClient);

    /**
     * Download the Notification of Change report. This report shows eCheck-related fields updated as a result of a response to an eCheck settlement transaction.
     * @summary Get Notification of Changes
     * @param startTime Valid report Start Time in **ISO 8601 format** Please refer the following link to know more about ISO 8601 format.[Rfc Date Format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)  **Example date format:**   - yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ (e.g. 2018-01-01T00:00:00.000Z)
     * @param endTime Valid report End Time in **ISO 8601 format** Please refer the following link to know more about ISO 8601 format.[Rfc Date Format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)  **Example date format:**   - yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ (e.g. 2018-01-01T00:00:00.000Z)
     * @param {*} [options] Override http request options.
     */
    getNotificationOfChangeReport(
      startTime: Date,
      endTime: Date,
      callback?: any,
    ): ReportingV3NotificationofChangesGet200Response;
  }

  export class PayerAuthenticationApi {
    config: MerchantConfig;
    apiClient: ApiClient;

    constructor(config: MerchantConfig, apiClient: ApiClient);

    /**
     * This call verifies that the card is enrolled in a card authentication program.
     * @summary Check Payer Auth Enrollment
     * @param checkPayerAuthEnrollmentRequest
     * @param {*} [options] Override http request options.
     */
    checkPayerAuthEnrollment(
      checkPayerAuthEnrollmentRequest: CheckPayerAuthEnrollmentRequest,
      callback?: any,
    ): RiskV1AuthenticationsPost201Response;
    /**
     * A new service for Merchants to get reference_id for Digital Wallets to use in place of BIN number in Cardinal. Set up file while authenticating with Cardinal. This service should be called by Merchant when payment instrument chosen or changes. This service has to be called before enrollment check.
     * @summary Setup Payer Auth
     * @param payerAuthSetupRequest
     * @param {*} [options] Override http request options.
     */
    payerAuthSetup(
      payerAuthSetupRequest: PayerAuthSetupRequest,
      callback?: any,
    ): RiskV1AuthenticationSetupsPost201Response;
    /**
     * This call retrieves and validates the authentication results from issuer and allows the merchant to proceed with processing the payment.
     * @summary Validate Authentication Results
     * @param validateRequest
     * @param {*} [options] Override http request options.
     */
    validateAuthenticationResults(
      validateRequest: ValidateRequest,
      callback?: any,
    ): RiskV1AuthenticationResultsPost201Response;
  }

  export class PaymentBatchSummariesApi {
    config: MerchantConfig;
    apiClient: ApiClient;

    constructor(config: MerchantConfig, apiClient: ApiClient);

    /**
     * Scope can be either account/merchant or reseller.
     * @summary Get Payment Batch Summary Data
     * @param startTime Valid report Start Time in **ISO 8601 format** Please refer the following link to know more about ISO 8601 format.[Rfc Date Format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)  **Example date format:**   - yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ (e.g. 2018-01-01T00:00:00.000Z)
     * @param endTime Valid report End Time in **ISO 8601 format** Please refer the following link to know more about ISO 8601 format.[Rfc Date Format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)  **Example date format:**   - yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ (e.g. 2018-01-01T00:00:00.000Z)
     * @param organizationId Valid Cybersource Organization Id
     * @param rollUp Conditional - RollUp for data for day/week/month. Required while getting breakdown data for a Merchant
     * @param breakdown Conditional - Breakdown on account_rollup/all_merchant/selected_merchant. Required while getting breakdown data for a Merchant.
     * @param startDayOfWeek Optional - Start day of week to breakdown data for weeks in a month
     * @param {*} [options] Override http request options.
     */
    getPaymentBatchSummary(
      startTime: Date,
      endTime: Date,
      organizationId?: string,
      rollUp?: string,
      breakdown?: string,
      startDayOfWeek?: number,
      callback?: any,
    ): ReportingV3PaymentBatchSummariesGet200Response;
  }

  export class PaymentInstrumentApi {
    config: MerchantConfig;
    apiClient: ApiClient;

    constructor(config: MerchantConfig, apiClient: ApiClient);

    /**
     *
     * @summary Delete a Payment Instrument
     * @param paymentInstrumentTokenId The TokenId of a payment instrument.
     * @param profileId The id of a profile containing user specific TMS configuration.
     * @param {*} [options] Override http request options.
     */
    deletePaymentInstrument(
      paymentInstrumentTokenId: string,
      profileId?: string,
      callback?: any,
    ): null;
    /**
     *
     * @summary Retrieve a Payment Instrument
     * @param paymentInstrumentTokenId The TokenId of a payment instrument.
     * @param profileId The id of a profile containing user specific TMS configuration.
     * @param {*} [options] Override http request options.
     */
    getPaymentInstrument(
      paymentInstrumentTokenId: string,
      profileId?: string,
      callback?: any,
    ): PostPaymentInstrumentRequest;
    /**
     *
     * @summary Update a Payment Instrument
     * @param paymentInstrumentTokenId The TokenId of a payment instrument.
     * @param patchPaymentInstrumentRequest
     * @param profileId The id of a profile containing user specific TMS configuration.
     * @param ifMatch Contains an ETag value from a GET request to make the request conditional.
     * @param {*} [options] Override http request options.
     */
    patchPaymentInstrument(
      paymentInstrumentTokenId: string,
      patchPaymentInstrumentRequest: PatchPaymentInstrumentRequest,
      profileId?: string,
      ifMatch?: string,
      callback?: any,
    ): PatchPaymentInstrumentRequest;
    /**
     *
     * @summary Create a Payment Instrument
     * @param postPaymentInstrumentRequest
     * @param profileId The id of a profile containing user specific TMS configuration.
     * @param {*} [options] Override http request options.
     */
    postPaymentInstrument(
      postPaymentInstrumentRequest: PostPaymentInstrumentRequest,
      profileId?: string,
      callback?: any,
    ): PostPaymentInstrumentRequest;
  }

  export class PaymentsApi {
    config: MerchantConfig;
    apiClient: ApiClient;

    constructor(config: MerchantConfig, apiClient: ApiClient);

    /**
     * A payment authorizes the amount for the transaction. There are a number of supported payment feature, such as E-commerce and Card Present - Credit Card/Debit Card, Echeck, e-Wallets, Level II/III Data, etc..  A payment response includes the status of the request. It also includes processor-specific information when the request is successful and errors if unsuccessful. See the [Payments Developer Guides Page](https://developer.cybersource.com/api/developer-guides/dita-payments/GettingStarted.html).  Authorization can be requested with Capture, Decision Manager, Payer Authentication(3ds), and Token Creation. Find more on [Authorization with Add-On Features page.] (https://developer.cybersource.com/api/authorization-add-ons.html)  Possible [RESPONSE CODES](https://developer.cybersource.com/api/reference/response-codes.html) .  Processor specific [Testing Triggers](https://developer.cybersource.com/hello-world/testing-guide.html).
     * @summary Process a Payment
     * @param createPaymentRequest
     * @param {*} [options] Override http request options.
     */
    createPayment(
      createPaymentRequest: CreatePaymentRequest,
      callback?: any,
    ): PtsV2PaymentsPost201Response;
    /**
     * Use this service to authorize additional charges in a lodging or autorental transaction. Include the ID returned from the original authorization in the PATCH request to add additional charges to that authorization.
     * @summary Increment an Authorization
     * @param id The ID returned from the original authorization request.
     * @param incrementAuthRequest
     * @param {*} [options] Override http request options.
     */
    incrementAuth(
      id: string,
      incrementAuthRequest: IncrementAuthRequest,
      callback?: any,
    ): PtsV2IncrementalAuthorizationPatch201Response;
  }

  export class PayoutsApi {
    config: MerchantConfig;
    apiClient: ApiClient;

    constructor(config: MerchantConfig, apiClient: ApiClient);

    /**
     * Send funds from a selected funding source to a designated credit/debit card account or a prepaid card using an Original Credit Transaction (OCT).
     * @summary Process a Payout
     * @param octCreatePaymentRequest
     * @param {*} [options] Override http request options.
     */
    octCreatePayment(
      octCreatePaymentRequest: OctCreatePaymentRequest,
      callback?: any,
    ): PtsV2PayoutsPost201Response;
  }

  export class PurchaseAndRefundDetailsApi {
    config: MerchantConfig;
    apiClient: ApiClient;

    constructor(config: MerchantConfig, apiClient: ApiClient);

    /**
     * Download the Purchase and Refund Details report. This report report includes all purchases and refund transactions, as well as all activities related to transactions resulting in an adjustment to the net proceeds.
     * @summary Get Purchase and Refund Details
     * @param startTime Valid report Start Time in **ISO 8601 format** Please refer the following link to know more about ISO 8601 format.[Rfc Date Format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)  **Example date format:**   - yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ (e.g. 2018-01-01T00:00:00.000Z)
     * @param endTime Valid report End Time in **ISO 8601 format** Please refer the following link to know more about ISO 8601 format.[Rfc Date Format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)  **Example date format:**   - yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ (e.g. 2018-01-01T00:00:00.000Z)
     * @param organizationId Valid Cybersource Organization Id
     * @param paymentSubtype Payment Subtypes.   - **ALL**:  All Payment Subtypes   - **VI** :  Visa   - **MC** :  Master Card   - **AX** :  American Express   - **DI** :  Discover   - **DP** :  Pinless Debit
     * @param viewBy View results by Request Date or Submission Date.   - **requestDate** : Request Date   - **submissionDate**: Submission Date
     * @param groupName Valid CyberSource Group Name.User can define groups using CBAPI and Group Management Module in EBC2. Groups are collection of organizationIds
     * @param offset Offset of the Purchase and Refund Results.
     * @param limit Results count per page. Range(1-2000)
     * @param {*} [options] Override http request options.
     */
    getPurchaseAndRefundDetails(
      startTime: Date,
      endTime: Date,
      organizationId?: string,
      paymentSubtype?: string,
      viewBy?: string,
      groupName?: string,
      offset?: number,
      limit?: number,
      callback?: any,
    ): ReportingV3PurchaseRefundDetailsGet200Response;
  }

  export class RefundApi {
    config: MerchantConfig;
    apiClient: ApiClient;

    constructor(config: MerchantConfig, apiClient: ApiClient);

    /**
     * Refund a capture API is only used, if you have requested Capture independenlty using [/pts/v2/payments/{id}/captures](https://developer.cybersource.com/api-reference-assets/index.html#payments_capture) API call Include the capture ID in the POST request to refund the captured amount.
     * @summary Refund a Capture
     * @param refundCaptureRequest
     * @param id The capture ID. This ID is returned from a previous capture request.
     * @param {*} [options] Override http request options.
     */
    refundCapture(
      refundCaptureRequest: RefundCaptureRequest,
      id: string,
      callback?: any,
    ): PtsV2PaymentsRefundPost201Response;
    /**
     * Refund a Payment API is only used, if you have requested Authorization and Capture together in [/pts/v2/payments](https://developer.cybersource.com/api-reference-assets/index.html#payments_payments) API call.  Include the payment ID in the POST request to refund the payment amount.
     * @summary Refund a Payment
     * @param refundPaymentRequest
     * @param id The payment ID. This ID is returned from a previous payment request.
     * @param {*} [options] Override http request options.
     */
    refundPayment(
      refundPaymentRequest: RefundPaymentRequest,
      id: string,
      callback?: any,
    ): PtsV2PaymentsRefundPost201Response;
  }

  export class ReportDefinitionsApi {
    config: MerchantConfig;
    apiClient: ApiClient;

    constructor(config: MerchantConfig, apiClient: ApiClient);

    /**
     * View the attributes of an individual report type. For a list of values for reportDefinitionName, see the [Reporting Developer Guide](https://www.cybersource.com/developers/documentation/reporting_and_reconciliation/)
     * @summary Get Report Definition
     * @param reportDefinitionName Name of the Report definition to retrieve
     * @param subscriptionType The subscription type for which report definition is required. By default the type will be CUSTOM. Valid Values: - CLASSIC - CUSTOM - STANDARD
     * @param reportMimeType The format for which the report definition is required. By default the value will be CSV. Valid Values: - application/xml - text/csv
     * @param organizationId Valid Cybersource Organization Id
     * @param {*} [options] Override http request options.
     */
    getResourceInfoByReportDefinition(
      reportDefinitionName: string,
      subscriptionType?: string,
      reportMimeType?: string,
      organizationId?: string,
      callback?: any,
    ): ReportingV3ReportDefinitionsNameGet200Response;
    /**
     * View a list of supported reports and their attributes before subscribing to them.
     * @summary Get Reporting Resource Information
     * @param subscriptionType Valid Values: - CLASSIC - CUSTOM - STANDARD
     * @param organizationId Valid Cybersource Organization Id
     * @param {*} [options] Override http request options.
     */
    getResourceV2Info(
      subscriptionType?: string,
      organizationId?: string,
      callback?: any,
    ): ReportingV3ReportDefinitionsGet200Response;
  }

  export class ReportDownloadsApi {
    config: MerchantConfig;
    apiClient: ApiClient;

    constructor(config: MerchantConfig, apiClient: ApiClient);

    /**
     * Download a report using the unique report name and date.
     * @summary Download a Report
     * @param reportDate Valid date on which to download the report in **ISO 8601 format** Please refer the following link to know more about ISO 8601 format.[Rfc Date Format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)  **Example date format:**  yyyy-mm-dd For reports that span multiple days, this value would be the end date of the report in the time zone of the report subscription. Example 1: If your report start date is 2020-03-06 and the end date is 2020-03-09, the reportDate passed in the query is 2020-03-09. Example 2: If your report runs from midnight to midnight on 2020-03-09, the reportDate passed in the query is 2020-03-10
     * @param reportName Name of the report to download
     * @param organizationId Valid Cybersource Organization Id
     * @param {*} [options] Override http request options.
     */
    downloadReport(
      reportDate: string,
      reportName: string,
      organizationId?: string,
      callback?: any,
    ): null;
  }

  export class ReportSubscriptionsApi {
    config: MerchantConfig;
    apiClient: ApiClient;

    constructor(config: MerchantConfig, apiClient: ApiClient);

    /**
     * Create or update an already existing classic or standard subscription.
     * @summary Create a Standard or Classic Subscription
     * @param predefinedSubscriptionRequestBean Report subscription request payload
     * @param organizationId Valid Cybersource Organization Id
     * @param {*} [options] Override http request options.
     */
    createStandardOrClassicSubscription(
      predefinedSubscriptionRequestBean: PredefinedSubscriptionRequestBean,
      organizationId?: string,
      callback?: any,
    ): null;
    /**
     * Create a report subscription for your organization. The report name must be unique.
     * @summary Create Report Subscription for a Report Name by Organization
     * @param createReportSubscriptionRequest Report subscription request payload
     * @param organizationId Valid Cybersource Organization Id
     * @param {*} [options] Override http request options.
     */
    createSubscription(
      createReportSubscriptionRequest: CreateReportSubscriptionRequest,
      organizationId?: string,
      callback?: any,
    ): null;
    /**
     * Delete a report subscription for your organization. You must know the unique name of the report you want to delete.
     * @summary Delete Subscription of a Report Name by Organization
     * @param reportName Name of the Report to Delete
     * @param organizationId Valid Cybersource Organization Id
     * @param {*} [options] Override http request options.
     */
    deleteSubscription(
      reportName: string,
      organizationId?: string,
      callback?: any,
    ): null;
    /**
     * View a summary of all report subscriptions.
     * @summary Get All Subscriptions
     * @param organizationId Valid Cybersource Organization Id
     * @param {*} [options] Override http request options.
     */
    getAllSubscriptions(
      organizationId?: string,
      callback?: any,
    ): ReportingV3ReportSubscriptionsGet200Response;
    /**
     * View the details of a report subscription, such as the report format or report frequency, using the report’s unique name.
     * @summary Get Subscription for Report Name
     * @param reportName Name of the Report to Retrieve
     * @param organizationId Valid Cybersource Organization Id
     * @param {*} [options] Override http request options.
     */
    getSubscription(
      reportName: string,
      organizationId?: string,
      callback?: any,
    ): ReportingV3ReportSubscriptionsGet200ResponseSubscriptions;
  }

  export class ReportsApi {
    config: MerchantConfig;
    apiClient: ApiClient;

    constructor(config: MerchantConfig, apiClient: ApiClient);

    /**
     * Create a one-time report. You must specify the type of report in reportDefinitionName. For a list of values for reportDefinitionName, see the [Reporting Developer Guide](https://www.cybersource.com/developers/documentation/reporting_and_reconciliation)
     * @summary Create Adhoc Report
     * @param createAdhocReportRequest Report subscription request payload
     * @param organizationId Valid Cybersource Organization Id
     * @param {*} [options] Override http request options.
     */
    createReport(
      createAdhocReportRequest: CreateAdhocReportRequest,
      organizationId?: string,
      callback?: any,
    ): null;
    /**
     * Download a report using the reportId value. If you don’t already know this value, you can obtain it using the Retrieve available reports call.
     * @summary Get Report Based on Report Id
     * @param reportId Valid Report Id
     * @param organizationId Valid Cybersource Organization Id
     * @param {*} [options] Override http request options.
     */
    getReportByReportId(
      reportId: string,
      organizationId?: string,
      callback?: any,
    ): ReportingV3ReportsIdGet200Response;
    /**
     * Retrieve a list of the available reports to which you are subscribed. This will also give you the reportId value, which you can also use to download a report.
     * @summary Retrieve Available Reports
     * @param startTime Valid report Start Time in **ISO 8601 format** Please refer the following link to know more about ISO 8601 format.[Rfc Date Format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)  **Example date format:**   - yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ (e.g. 2018-01-01T00:00:00.000Z)
     * @param endTime Valid report End Time in **ISO 8601 format** Please refer the following link to know more about ISO 8601 format.[Rfc Date Format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)  **Example date format:**   - yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ (e.g. 2018-01-01T00:00:00.000Z)
     * @param timeQueryType Specify time you would like to search  Valid values: - reportTimeFrame - executedTime
     * @param organizationId Valid Cybersource Organization Id
     * @param reportMimeType Valid Report Format  Valid values: - application/xml - text/csv
     * @param reportFrequency Valid Report Frequency  Valid values: - DAILY - WEEKLY - MONTHLY - USER_DEFINED - ADHOC
     * @param reportName Valid Report Name
     * @param reportDefinitionId Valid Report Definition Id
     * @param reportStatus Valid Report Status  Valid values: - COMPLETED - PENDING - QUEUED - RUNNING - ERROR - NO_DATA
     * @param {*} [options] Override http request options.
     */
    searchReports(
      startTime: Date,
      endTime: Date,
      timeQueryType: string,
      organizationId?: string,
      reportMimeType?: string,
      reportFrequency?: string,
      reportName?: string,
      reportDefinitionId?: number,
      reportStatus?: string,
      callback?: any,
    ): ReportingV3ReportsGet200Response;
  }

  export class ReversalApi {
    config: MerchantConfig;
    apiClient: ApiClient;

    constructor(config: MerchantConfig, apiClient: ApiClient);

    /**
     * Include the payment ID in the POST request to reverse the payment amount.
     * @summary Process an Authorization Reversal
     * @param id The payment ID returned from a previous payment request.
     * @param authReversalRequest
     * @param {*} [options] Override http request options.
     */
    authReversal(
      id: string,
      authReversalRequest: AuthReversalRequest,
      callback?: any,
    ): PtsV2PaymentsReversalsPost201Response;
    /**
     * This is to reverse a previous payment that merchant does not receive a reply(Mostly due to Timeout). 
     * @summary Timeout Reversal
     * @param mitReversalRequest
     * @param {*} [options] Override http request options.
     */
    mitReversal(
      mitReversalRequest: MitReversalRequest,
      callback?: any,
    ): PtsV2PaymentsReversalsPost201Response;
  }

  export class SearchTransactionsApi {
    config: MerchantConfig;
    apiClient: ApiClient;

    constructor(config: MerchantConfig, apiClient: ApiClient);

    /**
     * Create a search request.
     * @summary Create a Search Request
     * @param createSearchRequest
     * @param {*} [options] Override http request options.
     */
    createSearch(
      createSearchRequest: CreateSearchRequest,
      callback?: any,
    ): TssV2TransactionsPost201Response;
    /**
     * Include the Search ID in the GET request to retrieve the search results.
     * @summary Get Search Results
     * @param searchId Search ID.
     * @param {*} [options] Override http request options.
     */
    getSearch(
      searchId: string,
      callback?: any,
    ): TssV2TransactionsPost201Response;
  }

  export class SecureFileShareApi {
    config: MerchantConfig;
    apiClient: ApiClient;

    constructor(config: MerchantConfig, apiClient: ApiClient);

    /**
     * Download a file for the given file identifier
     * @summary Download a File with File Identifier
     * @param fileId Unique identifier for each file
     * @param organizationId Valid Cybersource Organization Id
     * @param {*} [options] Override http request options.
     */
    getFile(fileId: string, organizationId?: string, callback?: any): null;
    /**
     * Get list of files and it's information of them available inside the report directory
     * @summary Get List of Files
     * @param startDate Valid start date in **ISO 8601 format** Please refer the following link to know more about ISO 8601 format.[Rfc Date Format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)   **Example date format:**   - yyyy-MM-dd
     * @param endDate Valid end date in **ISO 8601 format** Please refer the following link to know more about ISO 8601 format.[Rfc Date Format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)   **Example date format:**   - yyyy-MM-dd
     * @param organizationId Valid Cybersource Organization Id
     * @param name **Tailored to searches for specific files with in given Date range** example : MyTransactionDetailreport.xml
     * @param {*} [options] Override http request options.
     */
    getFileDetail(
      startDate: string,
      endDate: string,
      organizationId?: string,
      name?: string,
      callback?: any,
    ): V1FileDetailsGet200Response;
  }

  export class SymmetricKeyManagementApi {
    config: MerchantConfig;
    apiClient: ApiClient;

    constructor(config: MerchantConfig, apiClient: ApiClient);

    /**
     * Create one or more Shared-Secret Keys
     * @summary Create Shared-Secret Keys
     * @param createSharedSecretKeysRequest
     * @param {*} [options] Override http request options.
     */
    createV2SharedSecretKeys(
      createSharedSecretKeysRequest: CreateSharedSecretKeysRequest,
      callback?: any,
    ): KmsV2KeysSymPost201Response;
    /**
     * 'Delete one or more Symmetric keys'
     * @summary Delete one or more Symmetric keys
     * @param deleteBulkSymmetricKeysRequest
     * @param {*} [options] Override http request options.
     */
    deleteBulkSymmetricKeys(
      deleteBulkSymmetricKeysRequest: DeleteBulkSymmetricKeysRequest,
      callback?: any,
    ): KmsV2KeysSymDeletesPost200Response;
    /**
     * Retrieves keys details by providing the key id.
     * @summary Retrieves shared secret key details
     * @param keyId Key ID.
     * @param {*} [options] Override http request options.
     */
    getKeyDetails(keyId: string, callback?: any): KmsV2KeysSymGet200Response;
  }

  export class TaxesApi {
    config: MerchantConfig;
    apiClient: ApiClient;

    constructor(config: MerchantConfig, apiClient: ApiClient);

    /**
     * Get tax details for a transaction.
     * @summary Calculate Taxes
     * @param taxRequest
     * @param {*} [options] Override http request options.
     */
    calculateTax(
      taxRequest: TaxRequest,
      callback?: any,
    ): VasV2PaymentsPost201Response;
    voidTax(
      voidTaxRequest: VoidTaxRequest,
      id: string,
      callback?: any,
    ): VasV2TaxVoid200Response;
  }

  export class TokenizationApi {
    config: MerchantConfig;
    apiClient: ApiClient;

    constructor(config: MerchantConfig, apiClient: ApiClient);

    /**
     * Returns a token representing the supplied card details. The token replaces card data and can be used as the Subscription ID in the CyberSource Simple Order API or SCMP API. This is an unauthenticated call that you should initiate from your customer’s device or browser.
     * @summary Tokenize Card
     * @param tokenizeRequest
     * @param {*} [options] Override http request options.
     */
    tokenize(tokenizeRequest: TokenizeRequest, callback?: any): any;
  }

  export class TransactionBatchesApi {
    config: MerchantConfig;
    apiClient: ApiClient;

    constructor(config: MerchantConfig, apiClient: ApiClient);

    /**
     * Provides real-time detailed status information about the transactions that you previously uploaded in the Business Center or processed with the Offline Transaction File Submission service.
     * @summary Get Transaction Details for a given Batch Id
     * @param id The batch id assigned for the template.
     * @param uploadDate Date in which the original batch file was uploaded. Date must be in ISO-8601 format. Please refer the following link to know more about ISO 8601 format.[Rfc Date Format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14) **Example date format:**  - yyyy-MM-dd
     * @param status Allows you to filter by rejected response.  Valid values: - Rejected
     * @param {*} [options] Override http request options.
     */
    getTransactionBatchDetails(
      id: string,
      uploadDate?: string,
      status?: string,
      callback?: any,
    ): null;
    /**
     * Provide the search range
     * @summary Get Individual Batch File
     * @param id The batch id assigned for the template.
     * @param {*} [options] Override http request options.
     */
    getTransactionBatchId(
      id: string,
      callback?: any,
    ): PtsV1TransactionBatchesIdGet200Response;
    /**
     * Provide the search range
     * @summary Get a List of Batch Files
     * @param startTime Valid report Start Time in **ISO 8601 format** Please refer the following link to know more about ISO 8601 format.[Rfc Date Format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)   **Example date format:**   - yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZZ
     * @param endTime Valid report End Time in **ISO 8601 format** Please refer the following link to know more about ISO 8601 format.[Rfc Date Format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)   **Example date format:**   - yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZZ
     * @param {*} [options] Override http request options.
     */
    getTransactionBatches(
      startTime: Date,
      endTime: Date,
      callback?: any,
    ): PtsV1TransactionBatchesGet200Response;
  }

  export class TransactionDetailsApi {
    config: MerchantConfig;
    apiClient: ApiClient;

    constructor(config: MerchantConfig, apiClient: ApiClient);

    /**
     * Include the Request ID in the GET request to retrieve the transaction details.
     * @summary Retrieve a Transaction
     * @param id Request ID.
     * @param {*} [options] Override http request options.
     */
    getTransaction(id: string, callback?: any): TssV2TransactionsGet200Response;
  }
  export class TransientTokenDataApi {
    config: MerchantConfig;
    apiClient: ApiClient;

    constructor(config: MerchantConfig, apiClient: ApiClient)

    /**
     * Retrieve the Payment data captured by Unified Checkout. This API is used to retrieve the detailed data represented by the Transient Token. This API will return PCI payment data captured by the Unified Checkout platform.
     * @summary Get Payment Credentials
     * @param jti The jti field contained within the Transient token returned from a successful Unified Checkout transaction 
     * @param {*} [options] Override http request options.
     */
    getPaymentCredentialsForTransientToken(jti: string, callback?: any): string;
    /**
     * Retrieve the data captured by Unified Checkout. This API is used to retrieve the detailed data represented by the Transient Token. This API will not return PCI payment data (PAN). Include the Request ID in the GET request to retrieve the transaction details.
     * @summary Get Transient Token Data
     * @param transientToken Transient Token returned by the Unified Checkout application. 
     * @param {*} [options] Override http request options.
     */
    getTransactionForTransientToken(transientToken: string, callback?: any): null;
  }
  export class UnifiedCheckoutCaptureContextApi {
    config: MerchantConfig;
    apiClient: ApiClient;

    constructor(config: MerchantConfig, apiClient: ApiClient)

    /**
     * Unified Checkout is a powerful product within the Digital Acceptance Suite. Unified Checkout is designed to assist merchants with the adoption and inclusion of digital payments within their payment acceptance page. With Unified Checkout Integration you can add digital payment methods to create familiar, convenient and seamless payment experiences that are designed to reduce checkout friction and increase conversions. Click to Pay Drop-in UI is built on the Unified Checkout platform. For more information about Unified Checkout, see the [Unified Checkout Developer Guides Page](https://developer.cybersource.com/docs/cybs/en-us/unified-checkout/developer/all/rest/unified-checkout/uc-intro.html). For examples on how to integrate Unified Checkout within your webpage please see our [GitHub Unified Checkout Samples](https://github.com/CyberSource/cybersource-unified-checkout-sample-java). For more information about Click to Pay drop in UI, see the [Click to Pay Drop-in UI Developer Guides Page](https://developer.cybersource.com/docs/cybs/en-us/click-to-pay/developer/all/rest/click-to-pay/ctp-intro.html). Generate Unified Checkout Capture Context Generate a one-time use capture context used for the invocation of Unified Checkout. The Request wil contain all of the parameters for how Unified Checkout will operate within a client webpage. The resulting payload will be a JWT signed object that can be used to initiate Unified Checkout or Click to Pay Drop-in UI within a web page
     * @summary Generate Unified Checkout Capture Context
     * @param generateUnifiedCheckoutCaptureContextRequest 
     * @param {*} [options] Override http request options.
     */
    generateUnifiedCheckoutCaptureContext(generateUnifiedCheckoutCaptureContextRequest: GenerateUnifiedCheckoutCaptureContextRequest, callback?: any): string;
  }
  export interface GenerateUnifiedCheckoutCaptureContextRequest {
    targetOrigins?: Array<string>;
    /**
     * version number of Unified Checkout being used
     */
    clientVersion?: string;
    allowedCardNetworks?: Array<string>;
    allowedPaymentTypes?: Array<string>;
    /**
     * Country the purchase is originating from (e.g. country of the merchant). Use the two- character ISO Standard
     */
    country?: string;
    /**
     * Localization of the User experience conforming to the ISO 639-1 language standards and two-character ISO Standard Country Code
     */
    locale?: string;
    captureMandate?: Upv1capturecontextsCaptureMandate;
    orderInformation?: Upv1capturecontextsOrderInformation;
    checkoutApiInitialization?: Upv1capturecontextsCheckoutApiInitialization;
  }
  export interface Upv1capturecontextsCheckoutApiInitialization {
    profileId?: string;
    accessKey?: string;
    referenceNumber?: string;
    transactionUuid?: string;
    transactionType?: string;
    currency?: string;
    amount?: string;
    locale?: string;
    overrideCustomReceiptPage?: string;
    unsignedFieldNames?: string;
  }
  export interface Upv1capturecontextsOrderInformation {
    amountDetails?: Upv1capturecontextsOrderInformationAmountDetails;
    billTo?: Upv1capturecontextsOrderInformationBillTo;
    shipTo?: Upv1capturecontextsOrderInformationShipTo;
  }
  export interface Upv1capturecontextsOrderInformationAmountDetails {
    totalAmount?: number;
    currency?: string;
  }
  export interface Upv1capturecontextsOrderInformationBillTo {
    /**
     * Payment card billing street address as it appears on the credit card issuer's records. 
     */
    address1?: string;
    /**
     * Used for additional address information. For example: _Attention: Accounts Payable_ Optional field. 
     */
    address2?: string;
    /**
     * Additional address information (third line of the billing address)
     */
    address3?: string;
    /**
     * Additional address information (fourth line of the billing address) 
     */
    address4?: string;
    /**
     * State or province of the billing address. Use the [State, Province, and Territory Codes for the United States and Canada](https://developer.cybersource.com/library/documentation/sbc/quickref/states_and_provinces.pdf). 
     */
    administrativeArea?: string;
    /**
     * Building number in the street address. 
     */
    buildingNumber?: string;
    /**
     * Payment card billing country. Use the two-character [ISO Standard Country Codes](http://apps.cybersource.com/library/documentation/sbc/quickref/countries_alpha_list.pdf). 
     */
    country?: string;
    /**
     * Customer's neighborhood, community, or region (a barrio in Brazil) within the city or municipality 
     */
    district?: string;
    /**
     * Payment card billing city. 
     */
    locality?: string;
    /**
     * Postal code for the billing address. The postal code must consist of 5 to 9 digits. 
     */
    postalCode?: string;
    company?: Upv1capturecontextsOrderInformationBillToCompany;
    /**
     * Customer's email address, including the full domain name. 
     */
    email?: string;
    /**
     * Customer's first name. This name must be the same as the name on the card
     */
    firstName?: string;
    /**
     * Customer's last name. This name must be the same as the name on the card. 
     */
    lastName?: string;
    /**
     * Customer's middle name. 
     */
    middleName?: string;
    /**
     * Customer's name suffix. 
     */
    nameSuffix?: string;
    /**
     * Title. 
     */
    title?: string;
    /**
     * Customer's phone number. 
     */
    phoneNumber?: string;
    /**
     * Customer's phone number type.  #### For Payouts: This field may be sent only for FDC Compass.  Possible Values: * day * home * night * work 
     */
    phoneType?: string;
  }
  export interface Upv1capturecontextsOrderInformationBillToCompany {
    /**
     * Name of the customer's company.
     */
    name?: string;
    /**
     * Payment card billing street address as it appears on the credit card issuer's records. 
     */
    address1?: string;
    /**
     * Used for additional address information. For example: _Attention: Accounts Payable_ Optional field. 
     */
    address2?: string;
    /**
     * Additional address information (third line of the billing address)
     */
    address3?: string;
    /**
     * Additional address information (fourth line of the billing address) 
     */
    address4?: string;
    /**
     * State or province of the billing address. Use the [State, Province, and Territory Codes for the United States and Canada](https://developer.cybersource.com/library/documentation/sbc/quickref/states_and_provinces.pdf). 
     */
    administrativeArea?: string;
    /**
     * Building number in the street address. 
     */
    buildingNumber?: string;
    /**
     * Payment card billing country. Use the two-character [ISO Standard Country Codes](http://apps.cybersource.com/library/documentation/sbc/quickref/countries_alpha_list.pdf). 
     */
    country?: string;
    /**
     * Customer's neighborhood, community, or region (a barrio in Brazil) within the city or municipality 
     */
    district?: string;
    /**
     * Payment card billing city. 
     */
    locality?: string;
    /**
     * Postal code for the billing address. The postal code must consist of 5 to 9 digits. 
     */
    postalCode?: string;
  }
  export interface Upv1capturecontextsOrderInformationShipTo {
    /**
     * First line of the shipping address. 
     */
    address1?: string;
    /**
     * Second line of the shipping address. 
     */
    address2?: string;
    /**
     * Third line of the shipping address. 
     */
    address3?: string;
    /**
     * Fourth line of the shipping address.
     */
    address4?: string;
    /**
     * State or province of the shipping address.  Use the [State, Province, and Territory Codes for the United States and Canada](https://developer.cybersource.com/library/documentation/sbc/quickref/states_and_provinces.pdf) 
     */
    administrativeArea?: string;
    /**
     * Building number in the street address. 
     */
    buildingNumber?: string;
    /**
     * Country of the shipping address.  Use the two-character [ISO Standard Country Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/countries_alpha_list.pdf) 
     */
    country?: string;
    /**
     * Neighborhood, community, or region within a city or municipality.
     */
    district?: string;
    /**
     * City of the shipping address. 
     */
    locality?: string;
    /**
     * Postal code for the shipping address. The postal code must consist of 5 to 9 digits. 
     */
    postalCode?: string;
    /**
     * First name of the recipient
     */
    firstName?: string;
    /**
     * Last name of the recipient.
     */
    lastName?: string;
  }
  export interface Upv1capturecontextsCaptureMandate {
    /**
     * This field defines the type of Billing Address information captured through the Manual card Entry UX. FULL, PARTIAL
     */
    billingType?: string;
    /**
     * Capture email contact information in the manual card acceptance screens.
     */
    requestEmail?: boolean;
    /**
     * Capture email contact information in the manual card acceptance screens.
     */
    requestPhone?: boolean;
    /**
     * Capture email contact information in the manual card acceptance screens.
     */
    requestShipping?: boolean;
    /**
     * List of countries available to ship to. Use the two- character ISO Standard Country Codes.
     */
    shipToCountries?: Array<string>;
    /**
     * Show the list of accepted payment icons in the payment button
     */
    showAcceptedNetworkIcons?: boolean;
  }
  export class UserManagementApi {
    config: MerchantConfig;
    apiClient: ApiClient;

    constructor(config: MerchantConfig, apiClient: ApiClient);

    /**
     * This endpoint is deprecated. Please use the search end point.
     * @summary Get User Information - Deprecated
     * @param organizationId This is the orgId of the organization which the user belongs to.
     * @param userName User ID of the user you want to get details on.
     * @param permissionId permission that you are trying to search user on.
     * @param roleId role of the user you are trying to search on.
     * @param {*} [options] Override http request options.
     */
    getUsers(
      organizationId?: string,
      userName?: string,
      permissionId?: string,
      roleId?: string,
      callback?: any,
    ): UmsV1UsersGet200Response;
  }

  export class UserManagementSearchApi {
    config: MerchantConfig;
    apiClient: ApiClient;

    constructor(config: MerchantConfig, apiClient: ApiClient);

    /**
     * This endpoint is to get all the user information depending on the filter criteria passed in request body.
     * @summary Search User Information
     * @param searchRequest
     * @param {*} [options] Override http request options.
     */
    searchUsers(
      searchRequest: SearchRequest,
      callback?: any,
    ): UmsV1UsersGet200Response;
  }

  export class VerificationApi {
    config: MerchantConfig;
    apiClient: ApiClient;

    constructor(config: MerchantConfig, apiClient: ApiClient);

    /**
     * This call checks customer data against specified watch lists to ensure export compliance.
     * @summary Validate export compliance
     * @param validateExportComplianceRequest
     * @param {*} [options] Override http request options.
     */
    validateExportCompliance(
      validateExportComplianceRequest: ValidateExportComplianceRequest,
      callback?: any,
    ): RiskV1ExportComplianceInquiriesPost201Response;
    /**
     * This call verifies that the customer address submitted is valid.
     * @summary Verify customer address
     * @param verifyCustomerAddressRequest
     * @param {*} [options] Override http request options.
     */
    verifyCustomerAddress(
      verifyCustomerAddressRequest: VerifyCustomerAddressRequest,
      callback?: any,
    ): RiskV1AddressVerificationsPost201Response;
  }

  export class VoidApi {
    config: MerchantConfig;
    apiClient: ApiClient;

    constructor(config: MerchantConfig, apiClient: ApiClient);

    /**
     * This is to void a previous payment, capture, refund, or credit that merchant does not receive a reply(Mostly due to timeout). This is to void a previous payment, capture, refund, or credit that merchant does not receive a reply(Mostly due to Timeout). To use this feature/API, make sure to include unique value to field - clientReferenceInformation -> transactionId in your payment, capture, refund, or credit API call and use same transactionId in this API request payload to reverse the payment.
     * @summary Timeout Void
     * @param mitVoidRequest
     * @param {*} [options] Override http request options.
     */
    mitVoid(
      mitVoidRequest: MitVoidRequest,
      callback?: any,
    ): PtsV2PaymentsVoidsPost201Response;
    /**
     * Refund a capture API is only used, if you have requested Capture independenlty using [/pts/v2/payments/{id}/captures](https://developer.cybersource.com/api-reference-assets/index.html#payments_capture) API call.  Include the capture ID in the POST request to cancel the capture.
     * @summary Void a Capture
     * @param voidCaptureRequest
     * @param id The capture ID returned from a previous capture request.
     * @param {*} [options] Override http request options.
     */
    voidCapture(
      voidCaptureRequest: VoidCaptureRequest,
      id: string,
      callback?: any,
    ): PtsV2PaymentsVoidsPost201Response;
    /**
     * Include the credit ID in the POST request to cancel the credit.
     * @summary Void a Credit
     * @param voidCreditRequest
     * @param id The credit ID returned from a previous credit request.
     * @param {*} [options] Override http request options.
     */
    voidCredit(
      voidCreditRequest: VoidCreditRequest,
      id: string,
      callback?: any,
    ): PtsV2PaymentsVoidsPost201Response;
    /**
     * Void a Payment API is only used, if you have requested Authorization and Capture together in [/pts/v2/payments](https://developer.cybersource.com/api-reference-assets/index.html#payments_payments) API call.  Include the payment ID in the POST request to cancel the payment.
     * @summary Void a Payment
     * @param voidPaymentRequest
     * @param id The payment ID returned from a previous payment request.
     * @param {*} [options] Override http request options.
     */
    voidPayment(
      voidPaymentRequest: VoidPaymentRequest,
      id: string,
      callback?: any,
    ): PtsV2PaymentsVoidsPost201Response;
    /**
     * Include the refund ID in the POST request to cancel the refund.
     * @summary Void a Refund
     * @param voidRefundRequest
     * @param id The refund ID returned from a previous refund request.
     * @param {*} [options] Override http request options.
     */
    voidRefund(
      voidRefundRequest: VoidRefundRequest,
      id: string,
      callback?: any,
    ): PtsV2PaymentsVoidsPost201Response;
  }
}


